// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public_message.proto

#ifndef PROTOBUF_public_5fmessage_2eproto__INCLUDED
#define PROTOBUF_public_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_public_5fmessage_2eproto();
void protobuf_AssignDesc_public_5fmessage_2eproto();
void protobuf_ShutdownFile_public_5fmessage_2eproto();

class MsgMask;
class StockCodeTable;
class UserPermissionItem;
class UserPermissionInfo;
class StockBase;
class StockMmp;
class StockRiseFallInfo;
class RisestStockInfo;
class StockMsg;
class BlockMsg;
class KLine;
class Zhubi;
class PeriodKLine;
class UserLoginInfo;
class UserLoginKickInfo;
class OrdFeild;
class MoneyFeild;
class MoneyMsg;
class FundAbnormalMsg;
class BidMsg;
class BidBlockMsg;
class BidClientMsg;
class BlockFundAbnormalItem;
class RiseFallMonitorNumMsg;
class RateMsg;
class ShortMotionMsg;
class FenJia;
class MidAbnormalMsg;

enum Markets {
  SH = 1,
  SZ = 2,
  HK = 3
};
bool Markets_IsValid(int value);
const Markets Markets_MIN = SH;
const Markets Markets_MAX = HK;
const int Markets_ARRAYSIZE = Markets_MAX + 1;

const ::google::protobuf::EnumDescriptor* Markets_descriptor();
inline const ::std::string& Markets_Name(Markets value) {
  return ::google::protobuf::internal::NameOfEnum(
    Markets_descriptor(), value);
}
inline bool Markets_Parse(
    const ::std::string& name, Markets* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Markets>(
    Markets_descriptor(), name, value);
}
enum QuoteInfoStatus {
  QuoteInfoS = 0,
  QuoteInfoC = 1,
  QuoteInfoT = 2,
  QuoteInfoB = 3,
  QuoteInfoE = 4,
  QuoteInfoP = 5,
  QuoteInfoD = 6,
  QuoteInfoZ = 7
};
bool QuoteInfoStatus_IsValid(int value);
const QuoteInfoStatus QuoteInfoStatus_MIN = QuoteInfoS;
const QuoteInfoStatus QuoteInfoStatus_MAX = QuoteInfoZ;
const int QuoteInfoStatus_ARRAYSIZE = QuoteInfoStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuoteInfoStatus_descriptor();
inline const ::std::string& QuoteInfoStatus_Name(QuoteInfoStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuoteInfoStatus_descriptor(), value);
}
inline bool QuoteInfoStatus_Parse(
    const ::std::string& name, QuoteInfoStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuoteInfoStatus>(
    QuoteInfoStatus_descriptor(), name, value);
}
enum QuoteFilterFlag {
  MarketAll = 0,
  MarketSZ = 1,
  MarketSH = 2,
  MarketCY = 3,
  MarketZX = 4,
  MarketFX = 5,
  BlockIndustry = 100,
  BlockConcept = 101,
  BlockRegion = 102,
  BlockWhole = 103,
  IndexSH = 200,
  IndexSZ = 201,
  IndexInner = 202,
  IndexOutter = 203,
  IndexStocks = 204
};
bool QuoteFilterFlag_IsValid(int value);
const QuoteFilterFlag QuoteFilterFlag_MIN = MarketAll;
const QuoteFilterFlag QuoteFilterFlag_MAX = IndexStocks;
const int QuoteFilterFlag_ARRAYSIZE = QuoteFilterFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuoteFilterFlag_descriptor();
inline const ::std::string& QuoteFilterFlag_Name(QuoteFilterFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuoteFilterFlag_descriptor(), value);
}
inline bool QuoteFilterFlag_Parse(
    const ::std::string& name, QuoteFilterFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuoteFilterFlag>(
    QuoteFilterFlag_descriptor(), name, value);
}
enum DeviceType {
  device_pc = 1,
  device_web = 2,
  device_android = 3,
  device_ios = 4,
  device_ipad = 5
};
bool DeviceType_IsValid(int value);
const DeviceType DeviceType_MIN = device_pc;
const DeviceType DeviceType_MAX = device_ipad;
const int DeviceType_ARRAYSIZE = DeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor();
inline const ::std::string& DeviceType_Name(DeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceType_descriptor(), value);
}
inline bool DeviceType_Parse(
    const ::std::string& name, DeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceType>(
    DeviceType_descriptor(), name, value);
}
enum SvrType {
  Svr_Type_Login = 1,
  Svr_Type_Cond = 2,
  Svr_Type_Search = 3,
  Svr_Type_MongoDB = 4,
  Svr_Type_Quote = 5,
  Svr_Type_Rank = 6,
  Svr_Type_Calc = 7,
  Svr_Type_Trans = 8
};
bool SvrType_IsValid(int value);
const SvrType SvrType_MIN = Svr_Type_Login;
const SvrType SvrType_MAX = Svr_Type_Trans;
const int SvrType_ARRAYSIZE = SvrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SvrType_descriptor();
inline const ::std::string& SvrType_Name(SvrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SvrType_descriptor(), value);
}
inline bool SvrType_Parse(
    const ::std::string& name, SvrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SvrType>(
    SvrType_descriptor(), name, value);
}
enum FundAbnormalType {
  FAT_abnormal = 1,
  FAT_first_increase_buy = 2,
  FAT_low_rise = 3
};
bool FundAbnormalType_IsValid(int value);
const FundAbnormalType FundAbnormalType_MIN = FAT_abnormal;
const FundAbnormalType FundAbnormalType_MAX = FAT_low_rise;
const int FundAbnormalType_ARRAYSIZE = FundAbnormalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FundAbnormalType_descriptor();
inline const ::std::string& FundAbnormalType_Name(FundAbnormalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FundAbnormalType_descriptor(), value);
}
inline bool FundAbnormalType_Parse(
    const ::std::string& name, FundAbnormalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FundAbnormalType>(
    FundAbnormalType_descriptor(), name, value);
}
enum UserPermissionType {
  up_zbs = 0,
  up_yk = 1,
  up_tzyf = 2,
  up_zk = 3,
  up_tzxt = 4,
  up_dkx = 5,
  up_dpzs = 6,
  up_cjrl = 7,
  up_dxjj = 8,
  up_nrzg = 9,
  up_hzyj = 10,
  up_cynx = 11,
  up_cljq = 12,
  up_jgjj = 13,
  up_jhjj = 14,
  up_xskx = 15
};
bool UserPermissionType_IsValid(int value);
const UserPermissionType UserPermissionType_MIN = up_zbs;
const UserPermissionType UserPermissionType_MAX = up_xskx;
const int UserPermissionType_ARRAYSIZE = UserPermissionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserPermissionType_descriptor();
inline const ::std::string& UserPermissionType_Name(UserPermissionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserPermissionType_descriptor(), value);
}
inline bool UserPermissionType_Parse(
    const ::std::string& name, UserPermissionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserPermissionType>(
    UserPermissionType_descriptor(), name, value);
}
enum KlineType {
  KLINE_PERIOD_MIN = 1,
  KLINE_PERIOD_5MIN = 5,
  KLINE_PERIOD_15MIN = 15,
  KLINE_PERIOD_HOUR = 60,
  KLINE_PERIOD_DAY = 1440,
  KLINE_PERIOD_WEEK = 10080,
  KLINE_PERIOD_MONTH = 43200
};
bool KlineType_IsValid(int value);
const KlineType KlineType_MIN = KLINE_PERIOD_MIN;
const KlineType KlineType_MAX = KLINE_PERIOD_MONTH;
const int KlineType_ARRAYSIZE = KlineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KlineType_descriptor();
inline const ::std::string& KlineType_Name(KlineType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KlineType_descriptor(), value);
}
inline bool KlineType_Parse(
    const ::std::string& name, KlineType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KlineType>(
    KlineType_descriptor(), name, value);
}
enum emZhubiType {
  zhubi_type_total = 1,
  zhubi_type_money = 2
};
bool emZhubiType_IsValid(int value);
const emZhubiType emZhubiType_MIN = zhubi_type_total;
const emZhubiType emZhubiType_MAX = zhubi_type_money;
const int emZhubiType_ARRAYSIZE = emZhubiType_MAX + 1;

const ::google::protobuf::EnumDescriptor* emZhubiType_descriptor();
inline const ::std::string& emZhubiType_Name(emZhubiType value) {
  return ::google::protobuf::internal::NameOfEnum(
    emZhubiType_descriptor(), value);
}
inline bool emZhubiType_Parse(
    const ::std::string& name, emZhubiType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<emZhubiType>(
    emZhubiType_descriptor(), name, value);
}
enum RFMonitorType {
  RFM_type_zt = 1,
  RFM_type_dt = 2,
  RFM_type_zthb = 3,
  RFM_type_dtkb = 4,
  RFM_type_lb = 5,
  RFM_type_zb = 6,
  RFM_type_yestoday_zt = 7
};
bool RFMonitorType_IsValid(int value);
const RFMonitorType RFMonitorType_MIN = RFM_type_zt;
const RFMonitorType RFMonitorType_MAX = RFM_type_yestoday_zt;
const int RFMonitorType_ARRAYSIZE = RFMonitorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RFMonitorType_descriptor();
inline const ::std::string& RFMonitorType_Name(RFMonitorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RFMonitorType_descriptor(), value);
}
inline bool RFMonitorType_Parse(
    const ::std::string& name, RFMonitorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RFMonitorType>(
    RFMonitorType_descriptor(), name, value);
}
enum ShortMotionType {
  OrganizationEat = 0,
  LargeBid = 1,
  RocketLaunch = 2,
  RapidRebound = 3,
  HighDiving = 4,
  AccelerateDecline = 5,
  LargeBuy = 6,
  LargeSell = 7,
  LargeAsk = 8,
  UpperLimit = 9,
  DownLimit = 10,
  OpenUpperLimit = 11,
  OpenDownLimit = 12,
  OrganizationBuy = 13,
  OrganizationSell = 14,
  OrganizationSpit = 15,
  BuyNew = 16,
  SellNew = 17
};
bool ShortMotionType_IsValid(int value);
const ShortMotionType ShortMotionType_MIN = OrganizationEat;
const ShortMotionType ShortMotionType_MAX = SellNew;
const int ShortMotionType_ARRAYSIZE = ShortMotionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShortMotionType_descriptor();
inline const ::std::string& ShortMotionType_Name(ShortMotionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShortMotionType_descriptor(), value);
}
inline bool ShortMotionType_Parse(
    const ::std::string& name, ShortMotionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShortMotionType>(
    ShortMotionType_descriptor(), name, value);
}
enum ShortMotionClientType {
  SMCT_Total = 1,
  SMCT_Money = 2
};
bool ShortMotionClientType_IsValid(int value);
const ShortMotionClientType ShortMotionClientType_MIN = SMCT_Total;
const ShortMotionClientType ShortMotionClientType_MAX = SMCT_Money;
const int ShortMotionClientType_ARRAYSIZE = ShortMotionClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ShortMotionClientType_descriptor();
inline const ::std::string& ShortMotionClientType_Name(ShortMotionClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ShortMotionClientType_descriptor(), value);
}
inline bool ShortMotionClientType_Parse(
    const ::std::string& name, ShortMotionClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ShortMotionClientType>(
    ShortMotionClientType_descriptor(), name, value);
}
enum MidAbnormalType {
  ThirtyMinBuy = 0,
  ThirtyMinSell = 1,
  MoneyMaxOrdBuy = 2,
  MoneyBigOrdBuy = 3,
  MoneyMaxOrdSell = 4,
  MoneyBigOrdSell = 5,
  UpFiveRate = 6,
  DownFiveRate = 7,
  UpLimitRate = 8,
  DownLimitRate = 9,
  OpenUpLimitRate = 10,
  OpenDownLimitRate = 11
};
bool MidAbnormalType_IsValid(int value);
const MidAbnormalType MidAbnormalType_MIN = ThirtyMinBuy;
const MidAbnormalType MidAbnormalType_MAX = OpenDownLimitRate;
const int MidAbnormalType_ARRAYSIZE = MidAbnormalType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MidAbnormalType_descriptor();
inline const ::std::string& MidAbnormalType_Name(MidAbnormalType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MidAbnormalType_descriptor(), value);
}
inline bool MidAbnormalType_Parse(
    const ::std::string& name, MidAbnormalType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MidAbnormalType>(
    MidAbnormalType_descriptor(), name, value);
}
// ===================================================================

class MsgMask : public ::google::protobuf::Message {
 public:
  MsgMask();
  virtual ~MsgMask();
  
  MsgMask(const MsgMask& from);
  
  inline MsgMask& operator=(const MsgMask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMask& default_instance();
  
  void Swap(MsgMask* other);
  
  // implements Message ----------------------------------------------
  
  MsgMask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMask& from);
  void MergeFrom(const MsgMask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 mask = 1;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 1;
  inline ::google::protobuf::uint64 mask() const;
  inline void set_mask(::google::protobuf::uint64 value);
  
  // optional uint64 mask2 = 2;
  inline bool has_mask2() const;
  inline void clear_mask2();
  static const int kMask2FieldNumber = 2;
  inline ::google::protobuf::uint64 mask2() const;
  inline void set_mask2(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.MsgMask)
 private:
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_mask2();
  inline void clear_has_mask2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 mask_;
  ::google::protobuf::uint64 mask2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MsgMask* default_instance_;
};
// -------------------------------------------------------------------

class StockCodeTable : public ::google::protobuf::Message {
 public:
  StockCodeTable();
  virtual ~StockCodeTable();
  
  StockCodeTable(const StockCodeTable& from);
  
  inline StockCodeTable& operator=(const StockCodeTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockCodeTable& default_instance();
  
  void Swap(StockCodeTable* other);
  
  // implements Message ----------------------------------------------
  
  StockCodeTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockCodeTable& from);
  void MergeFrom(const StockCodeTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // required string stock_name = 2;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 2;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // required string stock_type = 3;
  inline bool has_stock_type() const;
  inline void clear_stock_type();
  static const int kStockTypeFieldNumber = 3;
  inline const ::std::string& stock_type() const;
  inline void set_stock_type(const ::std::string& value);
  inline void set_stock_type(const char* value);
  inline void set_stock_type(const char* value, size_t size);
  inline ::std::string* mutable_stock_type();
  inline ::std::string* release_stock_type();
  
  // required int32 deal_status = 4;
  inline bool has_deal_status() const;
  inline void clear_deal_status();
  static const int kDealStatusFieldNumber = 4;
  inline ::google::protobuf::int32 deal_status() const;
  inline void set_deal_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.StockCodeTable)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_stock_type();
  inline void clear_has_stock_type();
  inline void set_has_deal_status();
  inline void clear_has_deal_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::std::string* stock_name_;
  ::std::string* stock_type_;
  ::google::protobuf::int32 deal_status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static StockCodeTable* default_instance_;
};
// -------------------------------------------------------------------

class UserPermissionItem : public ::google::protobuf::Message {
 public:
  UserPermissionItem();
  virtual ~UserPermissionItem();
  
  UserPermissionItem(const UserPermissionItem& from);
  
  inline UserPermissionItem& operator=(const UserPermissionItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPermissionItem& default_instance();
  
  void Swap(UserPermissionItem* other);
  
  // implements Message ----------------------------------------------
  
  UserPermissionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPermissionItem& from);
  void MergeFrom(const UserPermissionItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);
  
  // optional int32 begin_time = 2;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int32 begin_time() const;
  inline void set_begin_time(::google::protobuf::int32 value);
  
  // optional int32 end_time = 3;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 end_time() const;
  inline void set_end_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserPermissionItem)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 begin_time_;
  ::google::protobuf::int32 end_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static UserPermissionItem* default_instance_;
};
// -------------------------------------------------------------------

class UserPermissionInfo : public ::google::protobuf::Message {
 public:
  UserPermissionInfo();
  virtual ~UserPermissionInfo();
  
  UserPermissionInfo(const UserPermissionInfo& from);
  
  inline UserPermissionInfo& operator=(const UserPermissionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPermissionInfo& default_instance();
  
  void Swap(UserPermissionInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserPermissionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPermissionInfo& from);
  void MergeFrom(const UserPermissionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .QuoteProto.UserPermissionItem permissions = 1;
  inline int permissions_size() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 1;
  inline const ::QuoteProto::UserPermissionItem& permissions(int index) const;
  inline ::QuoteProto::UserPermissionItem* mutable_permissions(int index);
  inline ::QuoteProto::UserPermissionItem* add_permissions();
  inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserPermissionItem >&
      permissions() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserPermissionItem >*
      mutable_permissions();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserPermissionInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserPermissionItem > permissions_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static UserPermissionInfo* default_instance_;
};
// -------------------------------------------------------------------

class StockBase : public ::google::protobuf::Message {
 public:
  StockBase();
  virtual ~StockBase();
  
  StockBase(const StockBase& from);
  
  inline StockBase& operator=(const StockBase& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockBase& default_instance();
  
  void Swap(StockBase* other);
  
  // implements Message ----------------------------------------------
  
  StockBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockBase& from);
  void MergeFrom(const StockBase& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float rate = 1;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 1;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional uint32 last_pice = 2;
  inline bool has_last_pice() const;
  inline void clear_last_pice();
  static const int kLastPiceFieldNumber = 2;
  inline ::google::protobuf::uint32 last_pice() const;
  inline void set_last_pice(::google::protobuf::uint32 value);
  
  // optional float ratio = 4;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 4;
  inline float ratio() const;
  inline void set_ratio(float value);
  
  // optional float pbv = 5;
  inline bool has_pbv() const;
  inline void clear_pbv();
  static const int kPbvFieldNumber = 5;
  inline float pbv() const;
  inline void set_pbv(float value);
  
  // optional uint32 trading_day = 6;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 6;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // optional uint32 pre_close_price = 7;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 7;
  inline ::google::protobuf::uint32 pre_close_price() const;
  inline void set_pre_close_price(::google::protobuf::uint32 value);
  
  // optional uint32 open_price = 8;
  inline bool has_open_price() const;
  inline void clear_open_price();
  static const int kOpenPriceFieldNumber = 8;
  inline ::google::protobuf::uint32 open_price() const;
  inline void set_open_price(::google::protobuf::uint32 value);
  
  // optional uint32 highest_price = 9;
  inline bool has_highest_price() const;
  inline void clear_highest_price();
  static const int kHighestPriceFieldNumber = 9;
  inline ::google::protobuf::uint32 highest_price() const;
  inline void set_highest_price(::google::protobuf::uint32 value);
  
  // optional uint32 lowest_price = 10;
  inline bool has_lowest_price() const;
  inline void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 10;
  inline ::google::protobuf::uint32 lowest_price() const;
  inline void set_lowest_price(::google::protobuf::uint32 value);
  
  // optional uint64 volume = 11;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 11;
  inline ::google::protobuf::uint64 volume() const;
  inline void set_volume(::google::protobuf::uint64 value);
  
  // optional uint64 cur_volume = 12;
  inline bool has_cur_volume() const;
  inline void clear_cur_volume();
  static const int kCurVolumeFieldNumber = 12;
  inline ::google::protobuf::uint64 cur_volume() const;
  inline void set_cur_volume(::google::protobuf::uint64 value);
  
  // optional float turnover_rate = 13;
  inline bool has_turnover_rate() const;
  inline void clear_turnover_rate();
  static const int kTurnoverRateFieldNumber = 13;
  inline float turnover_rate() const;
  inline void set_turnover_rate(float value);
  
  // optional float pes = 14;
  inline bool has_pes() const;
  inline void clear_pes();
  static const int kPesFieldNumber = 14;
  inline float pes() const;
  inline void set_pes(float value);
  
  // optional uint64 turnover = 15;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 15;
  inline ::google::protobuf::uint64 turnover() const;
  inline void set_turnover(::google::protobuf::uint64 value);
  
  // optional uint32 avg_price = 16;
  inline bool has_avg_price() const;
  inline void clear_avg_price();
  static const int kAvgPriceFieldNumber = 16;
  inline ::google::protobuf::uint32 avg_price() const;
  inline void set_avg_price(::google::protobuf::uint32 value);
  
  // optional uint32 update_time = 17;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 17;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);
  
  // optional float committee = 18;
  inline bool has_committee() const;
  inline void clear_committee();
  static const int kCommitteeFieldNumber = 18;
  inline float committee() const;
  inline void set_committee(float value);
  
  // optional uint64 cir_stock = 19;
  inline bool has_cir_stock() const;
  inline void clear_cir_stock();
  static const int kCirStockFieldNumber = 19;
  inline ::google::protobuf::uint64 cir_stock() const;
  inline void set_cir_stock(::google::protobuf::uint64 value);
  
  // optional uint64 tot_stock = 20;
  inline bool has_tot_stock() const;
  inline void clear_tot_stock();
  static const int kTotStockFieldNumber = 20;
  inline ::google::protobuf::uint64 tot_stock() const;
  inline void set_tot_stock(::google::protobuf::uint64 value);
  
  // optional uint64 cir_value = 21;
  inline bool has_cir_value() const;
  inline void clear_cir_value();
  static const int kCirValueFieldNumber = 21;
  inline ::google::protobuf::uint64 cir_value() const;
  inline void set_cir_value(::google::protobuf::uint64 value);
  
  // optional uint64 tot_value = 22;
  inline bool has_tot_value() const;
  inline void clear_tot_value();
  static const int kTotValueFieldNumber = 22;
  inline ::google::protobuf::uint64 tot_value() const;
  inline void set_tot_value(::google::protobuf::uint64 value);
  
  // optional uint64 np_volume = 23;
  inline bool has_np_volume() const;
  inline void clear_np_volume();
  static const int kNpVolumeFieldNumber = 23;
  inline ::google::protobuf::uint64 np_volume() const;
  inline void set_np_volume(::google::protobuf::uint64 value);
  
  // optional uint64 wp_volume = 24;
  inline bool has_wp_volume() const;
  inline void clear_wp_volume();
  static const int kWpVolumeFieldNumber = 24;
  inline ::google::protobuf::uint64 wp_volume() const;
  inline void set_wp_volume(::google::protobuf::uint64 value);
  
  // optional uint32 trade_status = 25;
  inline bool has_trade_status() const;
  inline void clear_trade_status();
  static const int kTradeStatusFieldNumber = 25;
  inline ::google::protobuf::uint32 trade_status() const;
  inline void set_trade_status(::google::protobuf::uint32 value);
  
  // optional int64 buy_sell_buy = 26;
  inline bool has_buy_sell_buy() const;
  inline void clear_buy_sell_buy();
  static const int kBuySellBuyFieldNumber = 26;
  inline ::google::protobuf::int64 buy_sell_buy() const;
  inline void set_buy_sell_buy(::google::protobuf::int64 value);
  
  // optional uint64 avg_stock = 27;
  inline bool has_avg_stock() const;
  inline void clear_avg_stock();
  static const int kAvgStockFieldNumber = 27;
  inline ::google::protobuf::uint64 avg_stock() const;
  inline void set_avg_stock(::google::protobuf::uint64 value);
  
  // optional uint32 rise = 28;
  inline bool has_rise() const;
  inline void clear_rise();
  static const int kRiseFieldNumber = 28;
  inline ::google::protobuf::uint32 rise() const;
  inline void set_rise(::google::protobuf::uint32 value);
  
  // optional uint32 fall = 29;
  inline bool has_fall() const;
  inline void clear_fall();
  static const int kFallFieldNumber = 29;
  inline ::google::protobuf::uint32 fall() const;
  inline void set_fall(::google::protobuf::uint32 value);
  
  // optional uint32 flat = 30;
  inline bool has_flat() const;
  inline void clear_flat();
  static const int kFlatFieldNumber = 30;
  inline ::google::protobuf::uint32 flat() const;
  inline void set_flat(::google::protobuf::uint32 value);
  
  // optional float ro = 32;
  inline bool has_ro() const;
  inline void clear_ro();
  static const int kRoFieldNumber = 32;
  inline float ro() const;
  inline void set_ro(float value);
  
  // optional float roe = 33;
  inline bool has_roe() const;
  inline void clear_roe();
  static const int kRoeFieldNumber = 33;
  inline float roe() const;
  inline void set_roe(float value);
  
  // optional float profit = 34;
  inline bool has_profit() const;
  inline void clear_profit();
  static const int kProfitFieldNumber = 34;
  inline float profit() const;
  inline void set_profit(float value);
  
  // optional uint32 upper_limit_rice = 35;
  inline bool has_upper_limit_rice() const;
  inline void clear_upper_limit_rice();
  static const int kUpperLimitRiceFieldNumber = 35;
  inline ::google::protobuf::uint32 upper_limit_rice() const;
  inline void set_upper_limit_rice(::google::protobuf::uint32 value);
  
  // optional uint32 down_limit_price = 36;
  inline bool has_down_limit_price() const;
  inline void clear_down_limit_price();
  static const int kDownLimitPriceFieldNumber = 36;
  inline ::google::protobuf::uint32 down_limit_price() const;
  inline void set_down_limit_price(::google::protobuf::uint32 value);
  
  // optional bool clear_sig = 37;
  inline bool has_clear_sig() const;
  inline void clear_clear_sig();
  static const int kClearSigFieldNumber = 37;
  inline bool clear_sig() const;
  inline void set_clear_sig(bool value);
  
  // optional float ped = 38;
  inline bool has_ped() const;
  inline void clear_ped();
  static const int kPedFieldNumber = 38;
  inline float ped() const;
  inline void set_ped(float value);
  
  // optional uint32 buy_sell = 39;
  inline bool has_buy_sell() const;
  inline void clear_buy_sell();
  static const int kBuySellFieldNumber = 39;
  inline ::google::protobuf::uint32 buy_sell() const;
  inline void set_buy_sell(::google::protobuf::uint32 value);
  
  // optional float speed_rate = 42;
  inline bool has_speed_rate() const;
  inline void clear_speed_rate();
  static const int kSpeedRateFieldNumber = 42;
  inline float speed_rate() const;
  inline void set_speed_rate(float value);
  
  // optional float three_rate = 43;
  inline bool has_three_rate() const;
  inline void clear_three_rate();
  static const int kThreeRateFieldNumber = 43;
  inline float three_rate() const;
  inline void set_three_rate(float value);
  
  // optional float three_tuv_rate = 44;
  inline bool has_three_tuv_rate() const;
  inline void clear_three_tuv_rate();
  static const int kThreeTuvRateFieldNumber = 44;
  inline float three_tuv_rate() const;
  inline void set_three_tuv_rate(float value);
  
  // optional float five_tuv_rate = 45;
  inline bool has_five_tuv_rate() const;
  inline void clear_five_tuv_rate();
  static const int kFiveTuvRateFieldNumber = 45;
  inline float five_tuv_rate() const;
  inline void set_five_tuv_rate(float value);
  
  // optional uint64 detail_volume = 46;
  inline bool has_detail_volume() const;
  inline void clear_detail_volume();
  static const int kDetailVolumeFieldNumber = 46;
  inline ::google::protobuf::uint64 detail_volume() const;
  inline void set_detail_volume(::google::protobuf::uint64 value);
  
  // optional string block_name = 47;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 47;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional uint32 rise_day_num = 48;
  inline bool has_rise_day_num() const;
  inline void clear_rise_day_num();
  static const int kRiseDayNumFieldNumber = 48;
  inline ::google::protobuf::uint32 rise_day_num() const;
  inline void set_rise_day_num(::google::protobuf::uint32 value);
  
  // optional float second_rate = 49;
  inline bool has_second_rate() const;
  inline void clear_second_rate();
  static const int kSecondRateFieldNumber = 49;
  inline float second_rate() const;
  inline void set_second_rate(float value);
  
  // optional float five_rate = 50;
  inline bool has_five_rate() const;
  inline void clear_five_rate();
  static const int kFiveRateFieldNumber = 50;
  inline float five_rate() const;
  inline void set_five_rate(float value);
  
  // optional uint32 limit_up = 51;
  inline bool has_limit_up() const;
  inline void clear_limit_up();
  static const int kLimitUpFieldNumber = 51;
  inline ::google::protobuf::uint32 limit_up() const;
  inline void set_limit_up(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.StockBase)
 private:
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_last_pice();
  inline void clear_has_last_pice();
  inline void set_has_ratio();
  inline void clear_has_ratio();
  inline void set_has_pbv();
  inline void clear_has_pbv();
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  inline void set_has_open_price();
  inline void clear_has_open_price();
  inline void set_has_highest_price();
  inline void clear_has_highest_price();
  inline void set_has_lowest_price();
  inline void clear_has_lowest_price();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_cur_volume();
  inline void clear_has_cur_volume();
  inline void set_has_turnover_rate();
  inline void clear_has_turnover_rate();
  inline void set_has_pes();
  inline void clear_has_pes();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_avg_price();
  inline void clear_has_avg_price();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_committee();
  inline void clear_has_committee();
  inline void set_has_cir_stock();
  inline void clear_has_cir_stock();
  inline void set_has_tot_stock();
  inline void clear_has_tot_stock();
  inline void set_has_cir_value();
  inline void clear_has_cir_value();
  inline void set_has_tot_value();
  inline void clear_has_tot_value();
  inline void set_has_np_volume();
  inline void clear_has_np_volume();
  inline void set_has_wp_volume();
  inline void clear_has_wp_volume();
  inline void set_has_trade_status();
  inline void clear_has_trade_status();
  inline void set_has_buy_sell_buy();
  inline void clear_has_buy_sell_buy();
  inline void set_has_avg_stock();
  inline void clear_has_avg_stock();
  inline void set_has_rise();
  inline void clear_has_rise();
  inline void set_has_fall();
  inline void clear_has_fall();
  inline void set_has_flat();
  inline void clear_has_flat();
  inline void set_has_ro();
  inline void clear_has_ro();
  inline void set_has_roe();
  inline void clear_has_roe();
  inline void set_has_profit();
  inline void clear_has_profit();
  inline void set_has_upper_limit_rice();
  inline void clear_has_upper_limit_rice();
  inline void set_has_down_limit_price();
  inline void clear_has_down_limit_price();
  inline void set_has_clear_sig();
  inline void clear_has_clear_sig();
  inline void set_has_ped();
  inline void clear_has_ped();
  inline void set_has_buy_sell();
  inline void clear_has_buy_sell();
  inline void set_has_speed_rate();
  inline void clear_has_speed_rate();
  inline void set_has_three_rate();
  inline void clear_has_three_rate();
  inline void set_has_three_tuv_rate();
  inline void clear_has_three_tuv_rate();
  inline void set_has_five_tuv_rate();
  inline void clear_has_five_tuv_rate();
  inline void set_has_detail_volume();
  inline void clear_has_detail_volume();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_rise_day_num();
  inline void clear_has_rise_day_num();
  inline void set_has_second_rate();
  inline void clear_has_second_rate();
  inline void set_has_five_rate();
  inline void clear_has_five_rate();
  inline void set_has_limit_up();
  inline void clear_has_limit_up();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float rate_;
  ::google::protobuf::uint32 last_pice_;
  float ratio_;
  float pbv_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 pre_close_price_;
  ::google::protobuf::uint32 open_price_;
  ::google::protobuf::uint32 highest_price_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::uint32 lowest_price_;
  float turnover_rate_;
  ::google::protobuf::uint64 cur_volume_;
  ::google::protobuf::uint64 turnover_;
  float pes_;
  ::google::protobuf::uint32 avg_price_;
  ::google::protobuf::uint32 update_time_;
  float committee_;
  ::google::protobuf::uint64 cir_stock_;
  ::google::protobuf::uint64 tot_stock_;
  ::google::protobuf::uint64 cir_value_;
  ::google::protobuf::uint64 tot_value_;
  ::google::protobuf::uint64 np_volume_;
  ::google::protobuf::uint64 wp_volume_;
  ::google::protobuf::int64 buy_sell_buy_;
  ::google::protobuf::uint32 trade_status_;
  ::google::protobuf::uint32 rise_;
  ::google::protobuf::uint64 avg_stock_;
  ::google::protobuf::uint32 fall_;
  ::google::protobuf::uint32 flat_;
  float ro_;
  float roe_;
  float profit_;
  ::google::protobuf::uint32 upper_limit_rice_;
  ::google::protobuf::uint32 down_limit_price_;
  bool clear_sig_;
  float ped_;
  ::google::protobuf::uint32 buy_sell_;
  float speed_rate_;
  float three_rate_;
  float three_tuv_rate_;
  float five_tuv_rate_;
  ::google::protobuf::uint64 detail_volume_;
  ::std::string* block_name_;
  ::google::protobuf::uint32 rise_day_num_;
  float second_rate_;
  float five_rate_;
  ::google::protobuf::uint32 limit_up_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(47 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static StockBase* default_instance_;
};
// -------------------------------------------------------------------

class StockMmp : public ::google::protobuf::Message {
 public:
  StockMmp();
  virtual ~StockMmp();
  
  StockMmp(const StockMmp& from);
  
  inline StockMmp& operator=(const StockMmp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockMmp& default_instance();
  
  void Swap(StockMmp* other);
  
  // implements Message ----------------------------------------------
  
  StockMmp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockMmp& from);
  void MergeFrom(const StockMmp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 buy_price1 = 1;
  inline bool has_buy_price1() const;
  inline void clear_buy_price1();
  static const int kBuyPrice1FieldNumber = 1;
  inline ::google::protobuf::uint32 buy_price1() const;
  inline void set_buy_price1(::google::protobuf::uint32 value);
  
  // required uint32 buy_price2 = 2;
  inline bool has_buy_price2() const;
  inline void clear_buy_price2();
  static const int kBuyPrice2FieldNumber = 2;
  inline ::google::protobuf::uint32 buy_price2() const;
  inline void set_buy_price2(::google::protobuf::uint32 value);
  
  // required uint32 buy_price3 = 3;
  inline bool has_buy_price3() const;
  inline void clear_buy_price3();
  static const int kBuyPrice3FieldNumber = 3;
  inline ::google::protobuf::uint32 buy_price3() const;
  inline void set_buy_price3(::google::protobuf::uint32 value);
  
  // required uint32 buy_price4 = 4;
  inline bool has_buy_price4() const;
  inline void clear_buy_price4();
  static const int kBuyPrice4FieldNumber = 4;
  inline ::google::protobuf::uint32 buy_price4() const;
  inline void set_buy_price4(::google::protobuf::uint32 value);
  
  // required uint32 buy_price5 = 5;
  inline bool has_buy_price5() const;
  inline void clear_buy_price5();
  static const int kBuyPrice5FieldNumber = 5;
  inline ::google::protobuf::uint32 buy_price5() const;
  inline void set_buy_price5(::google::protobuf::uint32 value);
  
  // required uint32 buy_volume1 = 6;
  inline bool has_buy_volume1() const;
  inline void clear_buy_volume1();
  static const int kBuyVolume1FieldNumber = 6;
  inline ::google::protobuf::uint32 buy_volume1() const;
  inline void set_buy_volume1(::google::protobuf::uint32 value);
  
  // required uint32 buy_volume2 = 7;
  inline bool has_buy_volume2() const;
  inline void clear_buy_volume2();
  static const int kBuyVolume2FieldNumber = 7;
  inline ::google::protobuf::uint32 buy_volume2() const;
  inline void set_buy_volume2(::google::protobuf::uint32 value);
  
  // required uint32 buy_volume3 = 8;
  inline bool has_buy_volume3() const;
  inline void clear_buy_volume3();
  static const int kBuyVolume3FieldNumber = 8;
  inline ::google::protobuf::uint32 buy_volume3() const;
  inline void set_buy_volume3(::google::protobuf::uint32 value);
  
  // required uint32 buy_volume4 = 9;
  inline bool has_buy_volume4() const;
  inline void clear_buy_volume4();
  static const int kBuyVolume4FieldNumber = 9;
  inline ::google::protobuf::uint32 buy_volume4() const;
  inline void set_buy_volume4(::google::protobuf::uint32 value);
  
  // required uint32 buy_volume5 = 10;
  inline bool has_buy_volume5() const;
  inline void clear_buy_volume5();
  static const int kBuyVolume5FieldNumber = 10;
  inline ::google::protobuf::uint32 buy_volume5() const;
  inline void set_buy_volume5(::google::protobuf::uint32 value);
  
  // required uint32 sell_price1 = 11;
  inline bool has_sell_price1() const;
  inline void clear_sell_price1();
  static const int kSellPrice1FieldNumber = 11;
  inline ::google::protobuf::uint32 sell_price1() const;
  inline void set_sell_price1(::google::protobuf::uint32 value);
  
  // required uint32 sell_price2 = 12;
  inline bool has_sell_price2() const;
  inline void clear_sell_price2();
  static const int kSellPrice2FieldNumber = 12;
  inline ::google::protobuf::uint32 sell_price2() const;
  inline void set_sell_price2(::google::protobuf::uint32 value);
  
  // required uint32 sell_price3 = 13;
  inline bool has_sell_price3() const;
  inline void clear_sell_price3();
  static const int kSellPrice3FieldNumber = 13;
  inline ::google::protobuf::uint32 sell_price3() const;
  inline void set_sell_price3(::google::protobuf::uint32 value);
  
  // required uint32 sell_price4 = 14;
  inline bool has_sell_price4() const;
  inline void clear_sell_price4();
  static const int kSellPrice4FieldNumber = 14;
  inline ::google::protobuf::uint32 sell_price4() const;
  inline void set_sell_price4(::google::protobuf::uint32 value);
  
  // required uint32 sell_price5 = 15;
  inline bool has_sell_price5() const;
  inline void clear_sell_price5();
  static const int kSellPrice5FieldNumber = 15;
  inline ::google::protobuf::uint32 sell_price5() const;
  inline void set_sell_price5(::google::protobuf::uint32 value);
  
  // required uint32 sell_volume1 = 16;
  inline bool has_sell_volume1() const;
  inline void clear_sell_volume1();
  static const int kSellVolume1FieldNumber = 16;
  inline ::google::protobuf::uint32 sell_volume1() const;
  inline void set_sell_volume1(::google::protobuf::uint32 value);
  
  // required uint32 sell_volume2 = 17;
  inline bool has_sell_volume2() const;
  inline void clear_sell_volume2();
  static const int kSellVolume2FieldNumber = 17;
  inline ::google::protobuf::uint32 sell_volume2() const;
  inline void set_sell_volume2(::google::protobuf::uint32 value);
  
  // required uint32 sell_volume3 = 18;
  inline bool has_sell_volume3() const;
  inline void clear_sell_volume3();
  static const int kSellVolume3FieldNumber = 18;
  inline ::google::protobuf::uint32 sell_volume3() const;
  inline void set_sell_volume3(::google::protobuf::uint32 value);
  
  // required uint32 sell_volume4 = 19;
  inline bool has_sell_volume4() const;
  inline void clear_sell_volume4();
  static const int kSellVolume4FieldNumber = 19;
  inline ::google::protobuf::uint32 sell_volume4() const;
  inline void set_sell_volume4(::google::protobuf::uint32 value);
  
  // required uint32 sell_volume5 = 20;
  inline bool has_sell_volume5() const;
  inline void clear_sell_volume5();
  static const int kSellVolume5FieldNumber = 20;
  inline ::google::protobuf::uint32 sell_volume5() const;
  inline void set_sell_volume5(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.StockMmp)
 private:
  inline void set_has_buy_price1();
  inline void clear_has_buy_price1();
  inline void set_has_buy_price2();
  inline void clear_has_buy_price2();
  inline void set_has_buy_price3();
  inline void clear_has_buy_price3();
  inline void set_has_buy_price4();
  inline void clear_has_buy_price4();
  inline void set_has_buy_price5();
  inline void clear_has_buy_price5();
  inline void set_has_buy_volume1();
  inline void clear_has_buy_volume1();
  inline void set_has_buy_volume2();
  inline void clear_has_buy_volume2();
  inline void set_has_buy_volume3();
  inline void clear_has_buy_volume3();
  inline void set_has_buy_volume4();
  inline void clear_has_buy_volume4();
  inline void set_has_buy_volume5();
  inline void clear_has_buy_volume5();
  inline void set_has_sell_price1();
  inline void clear_has_sell_price1();
  inline void set_has_sell_price2();
  inline void clear_has_sell_price2();
  inline void set_has_sell_price3();
  inline void clear_has_sell_price3();
  inline void set_has_sell_price4();
  inline void clear_has_sell_price4();
  inline void set_has_sell_price5();
  inline void clear_has_sell_price5();
  inline void set_has_sell_volume1();
  inline void clear_has_sell_volume1();
  inline void set_has_sell_volume2();
  inline void clear_has_sell_volume2();
  inline void set_has_sell_volume3();
  inline void clear_has_sell_volume3();
  inline void set_has_sell_volume4();
  inline void clear_has_sell_volume4();
  inline void set_has_sell_volume5();
  inline void clear_has_sell_volume5();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 buy_price1_;
  ::google::protobuf::uint32 buy_price2_;
  ::google::protobuf::uint32 buy_price3_;
  ::google::protobuf::uint32 buy_price4_;
  ::google::protobuf::uint32 buy_price5_;
  ::google::protobuf::uint32 buy_volume1_;
  ::google::protobuf::uint32 buy_volume2_;
  ::google::protobuf::uint32 buy_volume3_;
  ::google::protobuf::uint32 buy_volume4_;
  ::google::protobuf::uint32 buy_volume5_;
  ::google::protobuf::uint32 sell_price1_;
  ::google::protobuf::uint32 sell_price2_;
  ::google::protobuf::uint32 sell_price3_;
  ::google::protobuf::uint32 sell_price4_;
  ::google::protobuf::uint32 sell_price5_;
  ::google::protobuf::uint32 sell_volume1_;
  ::google::protobuf::uint32 sell_volume2_;
  ::google::protobuf::uint32 sell_volume3_;
  ::google::protobuf::uint32 sell_volume4_;
  ::google::protobuf::uint32 sell_volume5_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static StockMmp* default_instance_;
};
// -------------------------------------------------------------------

class StockRiseFallInfo : public ::google::protobuf::Message {
 public:
  StockRiseFallInfo();
  virtual ~StockRiseFallInfo();
  
  StockRiseFallInfo(const StockRiseFallInfo& from);
  
  inline StockRiseFallInfo& operator=(const StockRiseFallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockRiseFallInfo& default_instance();
  
  void Swap(StockRiseFallInfo* other);
  
  // implements Message ----------------------------------------------
  
  StockRiseFallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockRiseFallInfo& from);
  void MergeFrom(const StockRiseFallInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string block_code = 1;
  inline bool has_block_code() const;
  inline void clear_block_code();
  static const int kBlockCodeFieldNumber = 1;
  inline const ::std::string& block_code() const;
  inline void set_block_code(const ::std::string& value);
  inline void set_block_code(const char* value);
  inline void set_block_code(const char* value, size_t size);
  inline ::std::string* mutable_block_code();
  inline ::std::string* release_block_code();
  
  // optional string block_name = 2;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional uint32 greater_seven = 3;
  inline bool has_greater_seven() const;
  inline void clear_greater_seven();
  static const int kGreaterSevenFieldNumber = 3;
  inline ::google::protobuf::uint32 greater_seven() const;
  inline void set_greater_seven(::google::protobuf::uint32 value);
  
  // optional uint32 up_five_seven = 4;
  inline bool has_up_five_seven() const;
  inline void clear_up_five_seven();
  static const int kUpFiveSevenFieldNumber = 4;
  inline ::google::protobuf::uint32 up_five_seven() const;
  inline void set_up_five_seven(::google::protobuf::uint32 value);
  
  // optional uint32 up_two_five = 5;
  inline bool has_up_two_five() const;
  inline void clear_up_two_five();
  static const int kUpTwoFiveFieldNumber = 5;
  inline ::google::protobuf::uint32 up_two_five() const;
  inline void set_up_two_five(::google::protobuf::uint32 value);
  
  // optional uint32 up_zero_two = 6;
  inline bool has_up_zero_two() const;
  inline void clear_up_zero_two();
  static const int kUpZeroTwoFieldNumber = 6;
  inline ::google::protobuf::uint32 up_zero_two() const;
  inline void set_up_zero_two(::google::protobuf::uint32 value);
  
  // optional uint32 down_zero_two = 7;
  inline bool has_down_zero_two() const;
  inline void clear_down_zero_two();
  static const int kDownZeroTwoFieldNumber = 7;
  inline ::google::protobuf::uint32 down_zero_two() const;
  inline void set_down_zero_two(::google::protobuf::uint32 value);
  
  // optional uint32 down_two_five = 8;
  inline bool has_down_two_five() const;
  inline void clear_down_two_five();
  static const int kDownTwoFiveFieldNumber = 8;
  inline ::google::protobuf::uint32 down_two_five() const;
  inline void set_down_two_five(::google::protobuf::uint32 value);
  
  // optional uint32 down_five_seven = 9;
  inline bool has_down_five_seven() const;
  inline void clear_down_five_seven();
  static const int kDownFiveSevenFieldNumber = 9;
  inline ::google::protobuf::uint32 down_five_seven() const;
  inline void set_down_five_seven(::google::protobuf::uint32 value);
  
  // optional uint32 less_seven = 10;
  inline bool has_less_seven() const;
  inline void clear_less_seven();
  static const int kLessSevenFieldNumber = 10;
  inline ::google::protobuf::uint32 less_seven() const;
  inline void set_less_seven(::google::protobuf::uint32 value);
  
  // optional uint32 limit_up_num = 11;
  inline bool has_limit_up_num() const;
  inline void clear_limit_up_num();
  static const int kLimitUpNumFieldNumber = 11;
  inline ::google::protobuf::uint32 limit_up_num() const;
  inline void set_limit_up_num(::google::protobuf::uint32 value);
  
  // optional uint32 up_num = 12;
  inline bool has_up_num() const;
  inline void clear_up_num();
  static const int kUpNumFieldNumber = 12;
  inline ::google::protobuf::uint32 up_num() const;
  inline void set_up_num(::google::protobuf::uint32 value);
  
  // optional uint32 limit_down_num = 13;
  inline bool has_limit_down_num() const;
  inline void clear_limit_down_num();
  static const int kLimitDownNumFieldNumber = 13;
  inline ::google::protobuf::uint32 limit_down_num() const;
  inline void set_limit_down_num(::google::protobuf::uint32 value);
  
  // optional uint32 down_num = 14;
  inline bool has_down_num() const;
  inline void clear_down_num();
  static const int kDownNumFieldNumber = 14;
  inline ::google::protobuf::uint32 down_num() const;
  inline void set_down_num(::google::protobuf::uint32 value);
  
  // optional uint32 flat_num = 15;
  inline bool has_flat_num() const;
  inline void clear_flat_num();
  static const int kFlatNumFieldNumber = 15;
  inline ::google::protobuf::uint32 flat_num() const;
  inline void set_flat_num(::google::protobuf::uint32 value);
  
  // optional uint32 stop_num = 16;
  inline bool has_stop_num() const;
  inline void clear_stop_num();
  static const int kStopNumFieldNumber = 16;
  inline ::google::protobuf::uint32 stop_num() const;
  inline void set_stop_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.StockRiseFallInfo)
 private:
  inline void set_has_block_code();
  inline void clear_has_block_code();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_greater_seven();
  inline void clear_has_greater_seven();
  inline void set_has_up_five_seven();
  inline void clear_has_up_five_seven();
  inline void set_has_up_two_five();
  inline void clear_has_up_two_five();
  inline void set_has_up_zero_two();
  inline void clear_has_up_zero_two();
  inline void set_has_down_zero_two();
  inline void clear_has_down_zero_two();
  inline void set_has_down_two_five();
  inline void clear_has_down_two_five();
  inline void set_has_down_five_seven();
  inline void clear_has_down_five_seven();
  inline void set_has_less_seven();
  inline void clear_has_less_seven();
  inline void set_has_limit_up_num();
  inline void clear_has_limit_up_num();
  inline void set_has_up_num();
  inline void clear_has_up_num();
  inline void set_has_limit_down_num();
  inline void clear_has_limit_down_num();
  inline void set_has_down_num();
  inline void clear_has_down_num();
  inline void set_has_flat_num();
  inline void clear_has_flat_num();
  inline void set_has_stop_num();
  inline void clear_has_stop_num();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* block_code_;
  ::std::string* block_name_;
  ::google::protobuf::uint32 greater_seven_;
  ::google::protobuf::uint32 up_five_seven_;
  ::google::protobuf::uint32 up_two_five_;
  ::google::protobuf::uint32 up_zero_two_;
  ::google::protobuf::uint32 down_zero_two_;
  ::google::protobuf::uint32 down_two_five_;
  ::google::protobuf::uint32 down_five_seven_;
  ::google::protobuf::uint32 less_seven_;
  ::google::protobuf::uint32 limit_up_num_;
  ::google::protobuf::uint32 up_num_;
  ::google::protobuf::uint32 limit_down_num_;
  ::google::protobuf::uint32 down_num_;
  ::google::protobuf::uint32 flat_num_;
  ::google::protobuf::uint32 stop_num_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static StockRiseFallInfo* default_instance_;
};
// -------------------------------------------------------------------

class RisestStockInfo : public ::google::protobuf::Message {
 public:
  RisestStockInfo();
  virtual ~RisestStockInfo();
  
  RisestStockInfo(const RisestStockInfo& from);
  
  inline RisestStockInfo& operator=(const RisestStockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RisestStockInfo& default_instance();
  
  void Swap(RisestStockInfo* other);
  
  // implements Message ----------------------------------------------
  
  RisestStockInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RisestStockInfo& from);
  void MergeFrom(const RisestStockInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional string stock_name = 2;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 2;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // optional uint32 last_pice = 3;
  inline bool has_last_pice() const;
  inline void clear_last_pice();
  static const int kLastPiceFieldNumber = 3;
  inline ::google::protobuf::uint32 last_pice() const;
  inline void set_last_pice(::google::protobuf::uint32 value);
  
  // optional uint32 pre_close_price = 4;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 4;
  inline ::google::protobuf::uint32 pre_close_price() const;
  inline void set_pre_close_price(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.RisestStockInfo)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_last_pice();
  inline void clear_has_last_pice();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::std::string* stock_name_;
  ::google::protobuf::uint32 last_pice_;
  ::google::protobuf::uint32 pre_close_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static RisestStockInfo* default_instance_;
};
// -------------------------------------------------------------------

class StockMsg : public ::google::protobuf::Message {
 public:
  StockMsg();
  virtual ~StockMsg();
  
  StockMsg(const StockMsg& from);
  
  inline StockMsg& operator=(const StockMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StockMsg& default_instance();
  
  void Swap(StockMsg* other);
  
  // implements Message ----------------------------------------------
  
  StockMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StockMsg& from);
  void MergeFrom(const StockMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional string stock_name = 2;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 2;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // optional bool is_block = 3;
  inline bool has_is_block() const;
  inline void clear_is_block();
  static const int kIsBlockFieldNumber = 3;
  inline bool is_block() const;
  inline void set_is_block(bool value);
  
  // optional .QuoteProto.StockBase stk_base = 4;
  inline bool has_stk_base() const;
  inline void clear_stk_base();
  static const int kStkBaseFieldNumber = 4;
  inline const ::QuoteProto::StockBase& stk_base() const;
  inline ::QuoteProto::StockBase* mutable_stk_base();
  inline ::QuoteProto::StockBase* release_stk_base();
  
  // optional .QuoteProto.StockMmp stk_mmp = 5;
  inline bool has_stk_mmp() const;
  inline void clear_stk_mmp();
  static const int kStkMmpFieldNumber = 5;
  inline const ::QuoteProto::StockMmp& stk_mmp() const;
  inline ::QuoteProto::StockMmp* mutable_stk_mmp();
  inline ::QuoteProto::StockMmp* release_stk_mmp();
  
  // optional string block_type = 6;
  inline bool has_block_type() const;
  inline void clear_block_type();
  static const int kBlockTypeFieldNumber = 6;
  inline const ::std::string& block_type() const;
  inline void set_block_type(const ::std::string& value);
  inline void set_block_type(const char* value);
  inline void set_block_type(const char* value, size_t size);
  inline ::std::string* mutable_block_type();
  inline ::std::string* release_block_type();
  
  // optional .QuoteProto.RisestStockInfo risest_stock = 7;
  inline bool has_risest_stock() const;
  inline void clear_risest_stock();
  static const int kRisestStockFieldNumber = 7;
  inline const ::QuoteProto::RisestStockInfo& risest_stock() const;
  inline ::QuoteProto::RisestStockInfo* mutable_risest_stock();
  inline ::QuoteProto::RisestStockInfo* release_risest_stock();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.StockMsg)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_is_block();
  inline void clear_has_is_block();
  inline void set_has_stk_base();
  inline void clear_has_stk_base();
  inline void set_has_stk_mmp();
  inline void clear_has_stk_mmp();
  inline void set_has_block_type();
  inline void clear_has_block_type();
  inline void set_has_risest_stock();
  inline void clear_has_risest_stock();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::std::string* stock_name_;
  ::QuoteProto::StockBase* stk_base_;
  ::QuoteProto::StockMmp* stk_mmp_;
  ::std::string* block_type_;
  ::QuoteProto::RisestStockInfo* risest_stock_;
  bool is_block_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static StockMsg* default_instance_;
};
// -------------------------------------------------------------------

class BlockMsg : public ::google::protobuf::Message {
 public:
  BlockMsg();
  virtual ~BlockMsg();
  
  BlockMsg(const BlockMsg& from);
  
  inline BlockMsg& operator=(const BlockMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockMsg& default_instance();
  
  void Swap(BlockMsg* other);
  
  // implements Message ----------------------------------------------
  
  BlockMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockMsg& from);
  void MergeFrom(const BlockMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string block_code = 1;
  inline bool has_block_code() const;
  inline void clear_block_code();
  static const int kBlockCodeFieldNumber = 1;
  inline const ::std::string& block_code() const;
  inline void set_block_code(const ::std::string& value);
  inline void set_block_code(const char* value);
  inline void set_block_code(const char* value, size_t size);
  inline ::std::string* mutable_block_code();
  inline ::std::string* release_block_code();
  
  // optional string block_name = 2;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional uint32 pre_close_price = 3;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 3;
  inline ::google::protobuf::uint32 pre_close_price() const;
  inline void set_pre_close_price(::google::protobuf::uint32 value);
  
  // optional uint32 open_price = 4;
  inline bool has_open_price() const;
  inline void clear_open_price();
  static const int kOpenPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 open_price() const;
  inline void set_open_price(::google::protobuf::uint32 value);
  
  // optional uint32 highest_price = 5;
  inline bool has_highest_price() const;
  inline void clear_highest_price();
  static const int kHighestPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 highest_price() const;
  inline void set_highest_price(::google::protobuf::uint32 value);
  
  // optional uint32 lowest_price = 6;
  inline bool has_lowest_price() const;
  inline void clear_lowest_price();
  static const int kLowestPriceFieldNumber = 6;
  inline ::google::protobuf::uint32 lowest_price() const;
  inline void set_lowest_price(::google::protobuf::uint32 value);
  
  // optional uint32 last_pice = 7;
  inline bool has_last_pice() const;
  inline void clear_last_pice();
  static const int kLastPiceFieldNumber = 7;
  inline ::google::protobuf::uint32 last_pice() const;
  inline void set_last_pice(::google::protobuf::uint32 value);
  
  // optional uint64 volume = 10;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 10;
  inline ::google::protobuf::uint64 volume() const;
  inline void set_volume(::google::protobuf::uint64 value);
  
  // optional uint64 turnover = 11;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 11;
  inline ::google::protobuf::uint64 turnover() const;
  inline void set_turnover(::google::protobuf::uint64 value);
  
  // optional uint32 update_time = 12;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);
  
  // optional uint64 cir_stock = 13;
  inline bool has_cir_stock() const;
  inline void clear_cir_stock();
  static const int kCirStockFieldNumber = 13;
  inline ::google::protobuf::uint64 cir_stock() const;
  inline void set_cir_stock(::google::protobuf::uint64 value);
  
  // optional uint64 tot_stock = 14;
  inline bool has_tot_stock() const;
  inline void clear_tot_stock();
  static const int kTotStockFieldNumber = 14;
  inline ::google::protobuf::uint64 tot_stock() const;
  inline void set_tot_stock(::google::protobuf::uint64 value);
  
  // optional uint64 cir_value = 15;
  inline bool has_cir_value() const;
  inline void clear_cir_value();
  static const int kCirValueFieldNumber = 15;
  inline ::google::protobuf::uint64 cir_value() const;
  inline void set_cir_value(::google::protobuf::uint64 value);
  
  // optional uint64 tot_value = 16;
  inline bool has_tot_value() const;
  inline void clear_tot_value();
  static const int kTotValueFieldNumber = 16;
  inline ::google::protobuf::uint64 tot_value() const;
  inline void set_tot_value(::google::protobuf::uint64 value);
  
  // optional uint64 avg_stock = 17;
  inline bool has_avg_stock() const;
  inline void clear_avg_stock();
  static const int kAvgStockFieldNumber = 17;
  inline ::google::protobuf::uint64 avg_stock() const;
  inline void set_avg_stock(::google::protobuf::uint64 value);
  
  // optional float turnover_rate = 18;
  inline bool has_turnover_rate() const;
  inline void clear_turnover_rate();
  static const int kTurnoverRateFieldNumber = 18;
  inline float turnover_rate() const;
  inline void set_turnover_rate(float value);
  
  // optional uint64 np_volume = 19;
  inline bool has_np_volume() const;
  inline void clear_np_volume();
  static const int kNpVolumeFieldNumber = 19;
  inline ::google::protobuf::uint64 np_volume() const;
  inline void set_np_volume(::google::protobuf::uint64 value);
  
  // optional uint64 wp_volume = 20;
  inline bool has_wp_volume() const;
  inline void clear_wp_volume();
  static const int kWpVolumeFieldNumber = 20;
  inline ::google::protobuf::uint64 wp_volume() const;
  inline void set_wp_volume(::google::protobuf::uint64 value);
  
  // optional uint32 rise = 21;
  inline bool has_rise() const;
  inline void clear_rise();
  static const int kRiseFieldNumber = 21;
  inline ::google::protobuf::uint32 rise() const;
  inline void set_rise(::google::protobuf::uint32 value);
  
  // optional uint32 fall = 22;
  inline bool has_fall() const;
  inline void clear_fall();
  static const int kFallFieldNumber = 22;
  inline ::google::protobuf::uint32 fall() const;
  inline void set_fall(::google::protobuf::uint32 value);
  
  // optional uint32 flat = 23;
  inline bool has_flat() const;
  inline void clear_flat();
  static const int kFlatFieldNumber = 23;
  inline ::google::protobuf::uint32 flat() const;
  inline void set_flat(::google::protobuf::uint32 value);
  
  // optional uint32 trading_day = 25;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 25;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // optional uint32 trade_status = 26;
  inline bool has_trade_status() const;
  inline void clear_trade_status();
  static const int kTradeStatusFieldNumber = 26;
  inline ::google::protobuf::uint32 trade_status() const;
  inline void set_trade_status(::google::protobuf::uint32 value);
  
  // optional float speed_rate = 27;
  inline bool has_speed_rate() const;
  inline void clear_speed_rate();
  static const int kSpeedRateFieldNumber = 27;
  inline float speed_rate() const;
  inline void set_speed_rate(float value);
  
  // optional float three_rate = 28;
  inline bool has_three_rate() const;
  inline void clear_three_rate();
  static const int kThreeRateFieldNumber = 28;
  inline float three_rate() const;
  inline void set_three_rate(float value);
  
  // optional float three_tuv_rate = 29;
  inline bool has_three_tuv_rate() const;
  inline void clear_three_tuv_rate();
  static const int kThreeTuvRateFieldNumber = 29;
  inline float three_tuv_rate() const;
  inline void set_three_tuv_rate(float value);
  
  // optional float five_tuv_rate = 30;
  inline bool has_five_tuv_rate() const;
  inline void clear_five_tuv_rate();
  static const int kFiveTuvRateFieldNumber = 30;
  inline float five_tuv_rate() const;
  inline void set_five_tuv_rate(float value);
  
  // optional float ratio = 31;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 31;
  inline float ratio() const;
  inline void set_ratio(float value);
  
  // optional uint64 cur_volume = 33;
  inline bool has_cur_volume() const;
  inline void clear_cur_volume();
  static const int kCurVolumeFieldNumber = 33;
  inline ::google::protobuf::uint64 cur_volume() const;
  inline void set_cur_volume(::google::protobuf::uint64 value);
  
  // optional uint64 detail_volume = 34;
  inline bool has_detail_volume() const;
  inline void clear_detail_volume();
  static const int kDetailVolumeFieldNumber = 34;
  inline ::google::protobuf::uint64 detail_volume() const;
  inline void set_detail_volume(::google::protobuf::uint64 value);
  
  // optional string block_type = 35;
  inline bool has_block_type() const;
  inline void clear_block_type();
  static const int kBlockTypeFieldNumber = 35;
  inline const ::std::string& block_type() const;
  inline void set_block_type(const ::std::string& value);
  inline void set_block_type(const char* value);
  inline void set_block_type(const char* value, size_t size);
  inline ::std::string* mutable_block_type();
  inline ::std::string* release_block_type();
  
  // optional uint32 rise_day_num = 36;
  inline bool has_rise_day_num() const;
  inline void clear_rise_day_num();
  static const int kRiseDayNumFieldNumber = 36;
  inline ::google::protobuf::uint32 rise_day_num() const;
  inline void set_rise_day_num(::google::protobuf::uint32 value);
  
  // optional float five_rate = 50;
  inline bool has_five_rate() const;
  inline void clear_five_rate();
  static const int kFiveRateFieldNumber = 50;
  inline float five_rate() const;
  inline void set_five_rate(float value);
  
  // optional uint32 limit_up = 51;
  inline bool has_limit_up() const;
  inline void clear_limit_up();
  static const int kLimitUpFieldNumber = 51;
  inline ::google::protobuf::uint32 limit_up() const;
  inline void set_limit_up(::google::protobuf::uint32 value);
  
  // optional uint32 avg_price = 52;
  inline bool has_avg_price() const;
  inline void clear_avg_price();
  static const int kAvgPriceFieldNumber = 52;
  inline ::google::protobuf::uint32 avg_price() const;
  inline void set_avg_price(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.BlockMsg)
 private:
  inline void set_has_block_code();
  inline void clear_has_block_code();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  inline void set_has_open_price();
  inline void clear_has_open_price();
  inline void set_has_highest_price();
  inline void clear_has_highest_price();
  inline void set_has_lowest_price();
  inline void clear_has_lowest_price();
  inline void set_has_last_pice();
  inline void clear_has_last_pice();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_cir_stock();
  inline void clear_has_cir_stock();
  inline void set_has_tot_stock();
  inline void clear_has_tot_stock();
  inline void set_has_cir_value();
  inline void clear_has_cir_value();
  inline void set_has_tot_value();
  inline void clear_has_tot_value();
  inline void set_has_avg_stock();
  inline void clear_has_avg_stock();
  inline void set_has_turnover_rate();
  inline void clear_has_turnover_rate();
  inline void set_has_np_volume();
  inline void clear_has_np_volume();
  inline void set_has_wp_volume();
  inline void clear_has_wp_volume();
  inline void set_has_rise();
  inline void clear_has_rise();
  inline void set_has_fall();
  inline void clear_has_fall();
  inline void set_has_flat();
  inline void clear_has_flat();
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_trade_status();
  inline void clear_has_trade_status();
  inline void set_has_speed_rate();
  inline void clear_has_speed_rate();
  inline void set_has_three_rate();
  inline void clear_has_three_rate();
  inline void set_has_three_tuv_rate();
  inline void clear_has_three_tuv_rate();
  inline void set_has_five_tuv_rate();
  inline void clear_has_five_tuv_rate();
  inline void set_has_ratio();
  inline void clear_has_ratio();
  inline void set_has_cur_volume();
  inline void clear_has_cur_volume();
  inline void set_has_detail_volume();
  inline void clear_has_detail_volume();
  inline void set_has_block_type();
  inline void clear_has_block_type();
  inline void set_has_rise_day_num();
  inline void clear_has_rise_day_num();
  inline void set_has_five_rate();
  inline void clear_has_five_rate();
  inline void set_has_limit_up();
  inline void clear_has_limit_up();
  inline void set_has_avg_price();
  inline void clear_has_avg_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* block_code_;
  ::std::string* block_name_;
  ::google::protobuf::uint32 pre_close_price_;
  ::google::protobuf::uint32 open_price_;
  ::google::protobuf::uint32 highest_price_;
  ::google::protobuf::uint32 lowest_price_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::uint32 last_pice_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint64 turnover_;
  ::google::protobuf::uint64 cir_stock_;
  ::google::protobuf::uint64 tot_stock_;
  ::google::protobuf::uint64 cir_value_;
  ::google::protobuf::uint64 tot_value_;
  ::google::protobuf::uint64 avg_stock_;
  ::google::protobuf::uint64 np_volume_;
  float turnover_rate_;
  ::google::protobuf::uint32 rise_;
  ::google::protobuf::uint64 wp_volume_;
  ::google::protobuf::uint32 fall_;
  ::google::protobuf::uint32 flat_;
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 trade_status_;
  float speed_rate_;
  float three_rate_;
  float three_tuv_rate_;
  float five_tuv_rate_;
  ::google::protobuf::uint64 cur_volume_;
  ::google::protobuf::uint64 detail_volume_;
  float ratio_;
  ::google::protobuf::uint32 rise_day_num_;
  ::std::string* block_type_;
  float five_rate_;
  ::google::protobuf::uint32 limit_up_;
  ::google::protobuf::uint32 avg_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(35 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BlockMsg* default_instance_;
};
// -------------------------------------------------------------------

class KLine : public ::google::protobuf::Message {
 public:
  KLine();
  virtual ~KLine();
  
  KLine(const KLine& from);
  
  inline KLine& operator=(const KLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KLine& default_instance();
  
  void Swap(KLine* other);
  
  // implements Message ----------------------------------------------
  
  KLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KLine& from);
  void MergeFrom(const KLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 trading_day = 1;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 1;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // required uint32 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);
  
  // required uint32 upsert_time = 3;
  inline bool has_upsert_time() const;
  inline void clear_upsert_time();
  static const int kUpsertTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 upsert_time() const;
  inline void set_upsert_time(::google::protobuf::uint32 value);
  
  // required uint32 high_price = 4;
  inline bool has_high_price() const;
  inline void clear_high_price();
  static const int kHighPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 high_price() const;
  inline void set_high_price(::google::protobuf::uint32 value);
  
  // required uint32 open_price = 5;
  inline bool has_open_price() const;
  inline void clear_open_price();
  static const int kOpenPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 open_price() const;
  inline void set_open_price(::google::protobuf::uint32 value);
  
  // required uint32 low_price = 6;
  inline bool has_low_price() const;
  inline void clear_low_price();
  static const int kLowPriceFieldNumber = 6;
  inline ::google::protobuf::uint32 low_price() const;
  inline void set_low_price(::google::protobuf::uint32 value);
  
  // required uint32 close_price = 7;
  inline bool has_close_price() const;
  inline void clear_close_price();
  static const int kClosePriceFieldNumber = 7;
  inline ::google::protobuf::uint32 close_price() const;
  inline void set_close_price(::google::protobuf::uint32 value);
  
  // required uint64 volume = 8;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 8;
  inline ::google::protobuf::uint64 volume() const;
  inline void set_volume(::google::protobuf::uint64 value);
  
  // required uint64 turnover = 9;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 9;
  inline ::google::protobuf::uint64 turnover() const;
  inline void set_turnover(::google::protobuf::uint64 value);
  
  // required uint32 pre_close_price = 10;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 10;
  inline ::google::protobuf::uint32 pre_close_price() const;
  inline void set_pre_close_price(::google::protobuf::uint32 value);
  
  // required uint32 avg_price = 11;
  inline bool has_avg_price() const;
  inline void clear_avg_price();
  static const int kAvgPriceFieldNumber = 11;
  inline ::google::protobuf::uint32 avg_price() const;
  inline void set_avg_price(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.KLine)
 private:
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_upsert_time();
  inline void clear_has_upsert_time();
  inline void set_has_high_price();
  inline void clear_has_high_price();
  inline void set_has_open_price();
  inline void clear_has_open_price();
  inline void set_has_low_price();
  inline void clear_has_low_price();
  inline void set_has_close_price();
  inline void clear_has_close_price();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  inline void set_has_avg_price();
  inline void clear_has_avg_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 upsert_time_;
  ::google::protobuf::uint32 high_price_;
  ::google::protobuf::uint32 open_price_;
  ::google::protobuf::uint32 low_price_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::uint32 close_price_;
  ::google::protobuf::uint32 pre_close_price_;
  ::google::protobuf::uint64 turnover_;
  ::google::protobuf::uint32 avg_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static KLine* default_instance_;
};
// -------------------------------------------------------------------

class Zhubi : public ::google::protobuf::Message {
 public:
  Zhubi();
  virtual ~Zhubi();
  
  Zhubi(const Zhubi& from);
  
  inline Zhubi& operator=(const Zhubi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Zhubi& default_instance();
  
  void Swap(Zhubi* other);
  
  // implements Message ----------------------------------------------
  
  Zhubi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Zhubi& from);
  void MergeFrom(const Zhubi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 trading_day = 1;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 1;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // required uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);
  
  // required uint64 volume = 4;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 4;
  inline ::google::protobuf::uint64 volume() const;
  inline void set_volume(::google::protobuf::uint64 value);
  
  // required uint32 access_way = 5;
  inline bool has_access_way() const;
  inline void clear_access_way();
  static const int kAccessWayFieldNumber = 5;
  inline ::google::protobuf::uint32 access_way() const;
  inline void set_access_way(::google::protobuf::uint32 value);
  
  // required uint32 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);
  
  // required uint64 turnover = 7;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 7;
  inline ::google::protobuf::uint64 turnover() const;
  inline void set_turnover(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.Zhubi)
 private:
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_access_way();
  inline void clear_has_access_way();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::uint32 access_way_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint64 turnover_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static Zhubi* default_instance_;
};
// -------------------------------------------------------------------

class PeriodKLine : public ::google::protobuf::Message {
 public:
  PeriodKLine();
  virtual ~PeriodKLine();
  
  PeriodKLine(const PeriodKLine& from);
  
  inline PeriodKLine& operator=(const PeriodKLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PeriodKLine& default_instance();
  
  void Swap(PeriodKLine* other);
  
  // implements Message ----------------------------------------------
  
  PeriodKLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PeriodKLine& from);
  void MergeFrom(const PeriodKLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 kline_type = 1;
  inline bool has_kline_type() const;
  inline void clear_kline_type();
  static const int kKlineTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 kline_type() const;
  inline void set_kline_type(::google::protobuf::uint32 value);
  
  // required string stock_code = 2;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 2;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // required .QuoteProto.KLine kline_info = 3;
  inline bool has_kline_info() const;
  inline void clear_kline_info();
  static const int kKlineInfoFieldNumber = 3;
  inline const ::QuoteProto::KLine& kline_info() const;
  inline ::QuoteProto::KLine* mutable_kline_info();
  inline ::QuoteProto::KLine* release_kline_info();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.PeriodKLine)
 private:
  inline void set_has_kline_type();
  inline void clear_has_kline_type();
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_kline_info();
  inline void clear_has_kline_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::QuoteProto::KLine* kline_info_;
  ::google::protobuf::uint32 kline_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static PeriodKLine* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginInfo : public ::google::protobuf::Message {
 public:
  UserLoginInfo();
  virtual ~UserLoginInfo();
  
  UserLoginInfo(const UserLoginInfo& from);
  
  inline UserLoginInfo& operator=(const UserLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginInfo& default_instance();
  
  void Swap(UserLoginInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserLoginInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginInfo& from);
  void MergeFrom(const UserLoginInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);
  
  // required .QuoteProto.DeviceType device_type = 2;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  inline QuoteProto::DeviceType device_type() const;
  inline void set_device_type(QuoteProto::DeviceType value);
  
  // optional bool offline = 3;
  inline bool has_offline() const;
  inline void clear_offline();
  static const int kOfflineFieldNumber = 3;
  inline bool offline() const;
  inline void set_offline(bool value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserLoginInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_offline();
  inline void clear_has_offline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 uid_;
  int device_type_;
  bool offline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static UserLoginInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginKickInfo : public ::google::protobuf::Message {
 public:
  UserLoginKickInfo();
  virtual ~UserLoginKickInfo();
  
  UserLoginKickInfo(const UserLoginKickInfo& from);
  
  inline UserLoginKickInfo& operator=(const UserLoginKickInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginKickInfo& default_instance();
  
  void Swap(UserLoginKickInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserLoginKickInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginKickInfo& from);
  void MergeFrom(const UserLoginKickInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);
  
  // optional .QuoteProto.DeviceType device_type = 2;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  inline QuoteProto::DeviceType device_type() const;
  inline void set_device_type(QuoteProto::DeviceType value);
  
  // optional string kick_desc = 3;
  inline bool has_kick_desc() const;
  inline void clear_kick_desc();
  static const int kKickDescFieldNumber = 3;
  inline const ::std::string& kick_desc() const;
  inline void set_kick_desc(const ::std::string& value);
  inline void set_kick_desc(const char* value);
  inline void set_kick_desc(const char* value, size_t size);
  inline ::std::string* mutable_kick_desc();
  inline ::std::string* release_kick_desc();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserLoginKickInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_device_type();
  inline void clear_has_device_type();
  inline void set_has_kick_desc();
  inline void clear_has_kick_desc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 uid_;
  ::std::string* kick_desc_;
  int device_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static UserLoginKickInfo* default_instance_;
};
// -------------------------------------------------------------------

class OrdFeild : public ::google::protobuf::Message {
 public:
  OrdFeild();
  virtual ~OrdFeild();
  
  OrdFeild(const OrdFeild& from);
  
  inline OrdFeild& operator=(const OrdFeild& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const OrdFeild& default_instance();
  
  void Swap(OrdFeild* other);
  
  // implements Message ----------------------------------------------
  
  OrdFeild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrdFeild& from);
  void MergeFrom(const OrdFeild& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 money_input = 1;
  inline bool has_money_input() const;
  inline void clear_money_input();
  static const int kMoneyInputFieldNumber = 1;
  inline ::google::protobuf::int64 money_input() const;
  inline void set_money_input(::google::protobuf::int64 value);
  
  // optional int64 money_output = 2;
  inline bool has_money_output() const;
  inline void clear_money_output();
  static const int kMoneyOutputFieldNumber = 2;
  inline ::google::protobuf::int64 money_output() const;
  inline void set_money_output(::google::protobuf::int64 value);
  
  // optional int64 money_netput = 3;
  inline bool has_money_netput() const;
  inline void clear_money_netput();
  static const int kMoneyNetputFieldNumber = 3;
  inline ::google::protobuf::int64 money_netput() const;
  inline void set_money_netput(::google::protobuf::int64 value);
  
  // optional float money_rate = 4;
  inline bool has_money_rate() const;
  inline void clear_money_rate();
  static const int kMoneyRateFieldNumber = 4;
  inline float money_rate() const;
  inline void set_money_rate(float value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.OrdFeild)
 private:
  inline void set_has_money_input();
  inline void clear_has_money_input();
  inline void set_has_money_output();
  inline void clear_has_money_output();
  inline void set_has_money_netput();
  inline void clear_has_money_netput();
  inline void set_has_money_rate();
  inline void clear_has_money_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 money_input_;
  ::google::protobuf::int64 money_output_;
  ::google::protobuf::int64 money_netput_;
  float money_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static OrdFeild* default_instance_;
};
// -------------------------------------------------------------------

class MoneyFeild : public ::google::protobuf::Message {
 public:
  MoneyFeild();
  virtual ~MoneyFeild();
  
  MoneyFeild(const MoneyFeild& from);
  
  inline MoneyFeild& operator=(const MoneyFeild& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneyFeild& default_instance();
  
  void Swap(MoneyFeild* other);
  
  // implements Message ----------------------------------------------
  
  MoneyFeild* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoneyFeild& from);
  void MergeFrom(const MoneyFeild& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 trading_day = 1;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 1;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // optional uint32 last_price = 2;
  inline bool has_last_price() const;
  inline void clear_last_price();
  static const int kLastPriceFieldNumber = 2;
  inline ::google::protobuf::uint32 last_price() const;
  inline void set_last_price(::google::protobuf::uint32 value);
  
  // optional uint32 pre_close_price = 3;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 3;
  inline ::google::protobuf::uint32 pre_close_price() const;
  inline void set_pre_close_price(::google::protobuf::uint32 value);
  
  // optional float rate = 4;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 4;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional uint64 auction_volume = 5;
  inline bool has_auction_volume() const;
  inline void clear_auction_volume();
  static const int kAuctionVolumeFieldNumber = 5;
  inline ::google::protobuf::uint64 auction_volume() const;
  inline void set_auction_volume(::google::protobuf::uint64 value);
  
  // optional uint64 auction_turnover = 6;
  inline bool has_auction_turnover() const;
  inline void clear_auction_turnover();
  static const int kAuctionTurnoverFieldNumber = 6;
  inline ::google::protobuf::uint64 auction_turnover() const;
  inline void set_auction_turnover(::google::protobuf::uint64 value);
  
  // optional .QuoteProto.OrdFeild active_money = 7;
  inline bool has_active_money() const;
  inline void clear_active_money();
  static const int kActiveMoneyFieldNumber = 7;
  inline const ::QuoteProto::OrdFeild& active_money() const;
  inline ::QuoteProto::OrdFeild* mutable_active_money();
  inline ::QuoteProto::OrdFeild* release_active_money();
  
  // optional .QuoteProto.OrdFeild leader_money = 8;
  inline bool has_leader_money() const;
  inline void clear_leader_money();
  static const int kLeaderMoneyFieldNumber = 8;
  inline const ::QuoteProto::OrdFeild& leader_money() const;
  inline ::QuoteProto::OrdFeild* mutable_leader_money();
  inline ::QuoteProto::OrdFeild* release_leader_money();
  
  // optional .QuoteProto.OrdFeild maxord_money = 9;
  inline bool has_maxord_money() const;
  inline void clear_maxord_money();
  static const int kMaxordMoneyFieldNumber = 9;
  inline const ::QuoteProto::OrdFeild& maxord_money() const;
  inline ::QuoteProto::OrdFeild* mutable_maxord_money();
  inline ::QuoteProto::OrdFeild* release_maxord_money();
  
  // optional .QuoteProto.OrdFeild bigord_money = 10;
  inline bool has_bigord_money() const;
  inline void clear_bigord_money();
  static const int kBigordMoneyFieldNumber = 10;
  inline const ::QuoteProto::OrdFeild& bigord_money() const;
  inline ::QuoteProto::OrdFeild* mutable_bigord_money();
  inline ::QuoteProto::OrdFeild* release_bigord_money();
  
  // optional .QuoteProto.OrdFeild midord_money = 11;
  inline bool has_midord_money() const;
  inline void clear_midord_money();
  static const int kMidordMoneyFieldNumber = 11;
  inline const ::QuoteProto::OrdFeild& midord_money() const;
  inline ::QuoteProto::OrdFeild* mutable_midord_money();
  inline ::QuoteProto::OrdFeild* release_midord_money();
  
  // optional .QuoteProto.OrdFeild minord_money = 12;
  inline bool has_minord_money() const;
  inline void clear_minord_money();
  static const int kMinordMoneyFieldNumber = 12;
  inline const ::QuoteProto::OrdFeild& minord_money() const;
  inline ::QuoteProto::OrdFeild* mutable_minord_money();
  inline ::QuoteProto::OrdFeild* release_minord_money();
  
  // optional float avg_less_three = 13;
  inline bool has_avg_less_three() const;
  inline void clear_avg_less_three();
  static const int kAvgLessThreeFieldNumber = 13;
  inline float avg_less_three() const;
  inline void set_avg_less_three(float value);
  
  // optional float avg_less_five = 14;
  inline bool has_avg_less_five() const;
  inline void clear_avg_less_five();
  static const int kAvgLessFiveFieldNumber = 14;
  inline float avg_less_five() const;
  inline void set_avg_less_five(float value);
  
  // optional float leader_net_volume = 15;
  inline bool has_leader_net_volume() const;
  inline void clear_leader_net_volume();
  static const int kLeaderNetVolumeFieldNumber = 15;
  inline float leader_net_volume() const;
  inline void set_leader_net_volume(float value);
  
  // optional int32 up_down_price = 16;
  inline bool has_up_down_price() const;
  inline void clear_up_down_price();
  static const int kUpDownPriceFieldNumber = 16;
  inline ::google::protobuf::int32 up_down_price() const;
  inline void set_up_down_price(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.MoneyFeild)
 private:
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_last_price();
  inline void clear_has_last_price();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_auction_volume();
  inline void clear_has_auction_volume();
  inline void set_has_auction_turnover();
  inline void clear_has_auction_turnover();
  inline void set_has_active_money();
  inline void clear_has_active_money();
  inline void set_has_leader_money();
  inline void clear_has_leader_money();
  inline void set_has_maxord_money();
  inline void clear_has_maxord_money();
  inline void set_has_bigord_money();
  inline void clear_has_bigord_money();
  inline void set_has_midord_money();
  inline void clear_has_midord_money();
  inline void set_has_minord_money();
  inline void clear_has_minord_money();
  inline void set_has_avg_less_three();
  inline void clear_has_avg_less_three();
  inline void set_has_avg_less_five();
  inline void clear_has_avg_less_five();
  inline void set_has_leader_net_volume();
  inline void clear_has_leader_net_volume();
  inline void set_has_up_down_price();
  inline void clear_has_up_down_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 last_price_;
  ::google::protobuf::uint32 pre_close_price_;
  float rate_;
  ::google::protobuf::uint64 auction_volume_;
  ::google::protobuf::uint64 auction_turnover_;
  ::QuoteProto::OrdFeild* active_money_;
  ::QuoteProto::OrdFeild* leader_money_;
  ::QuoteProto::OrdFeild* maxord_money_;
  ::QuoteProto::OrdFeild* bigord_money_;
  ::QuoteProto::OrdFeild* midord_money_;
  ::QuoteProto::OrdFeild* minord_money_;
  float avg_less_three_;
  float avg_less_five_;
  float leader_net_volume_;
  ::google::protobuf::int32 up_down_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MoneyFeild* default_instance_;
};
// -------------------------------------------------------------------

class MoneyMsg : public ::google::protobuf::Message {
 public:
  MoneyMsg();
  virtual ~MoneyMsg();
  
  MoneyMsg(const MoneyMsg& from);
  
  inline MoneyMsg& operator=(const MoneyMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneyMsg& default_instance();
  
  void Swap(MoneyMsg* other);
  
  // implements Message ----------------------------------------------
  
  MoneyMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoneyMsg& from);
  void MergeFrom(const MoneyMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional string stock_name = 2;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 2;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // optional string block_name = 3;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 3;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional string stock_type = 4;
  inline bool has_stock_type() const;
  inline void clear_stock_type();
  static const int kStockTypeFieldNumber = 4;
  inline const ::std::string& stock_type() const;
  inline void set_stock_type(const ::std::string& value);
  inline void set_stock_type(const char* value);
  inline void set_stock_type(const char* value, size_t size);
  inline ::std::string* mutable_stock_type();
  inline ::std::string* release_stock_type();
  
  // optional .QuoteProto.MoneyFeild money_one_day = 5;
  inline bool has_money_one_day() const;
  inline void clear_money_one_day();
  static const int kMoneyOneDayFieldNumber = 5;
  inline const ::QuoteProto::MoneyFeild& money_one_day() const;
  inline ::QuoteProto::MoneyFeild* mutable_money_one_day();
  inline ::QuoteProto::MoneyFeild* release_money_one_day();
  
  // optional .QuoteProto.MoneyFeild money_three_day = 6;
  inline bool has_money_three_day() const;
  inline void clear_money_three_day();
  static const int kMoneyThreeDayFieldNumber = 6;
  inline const ::QuoteProto::MoneyFeild& money_three_day() const;
  inline ::QuoteProto::MoneyFeild* mutable_money_three_day();
  inline ::QuoteProto::MoneyFeild* release_money_three_day();
  
  // optional .QuoteProto.MoneyFeild money_five_day = 7;
  inline bool has_money_five_day() const;
  inline void clear_money_five_day();
  static const int kMoneyFiveDayFieldNumber = 7;
  inline const ::QuoteProto::MoneyFeild& money_five_day() const;
  inline ::QuoteProto::MoneyFeild* mutable_money_five_day();
  inline ::QuoteProto::MoneyFeild* release_money_five_day();
  
  // optional .QuoteProto.MoneyFeild money_ten_day = 8;
  inline bool has_money_ten_day() const;
  inline void clear_money_ten_day();
  static const int kMoneyTenDayFieldNumber = 8;
  inline const ::QuoteProto::MoneyFeild& money_ten_day() const;
  inline ::QuoteProto::MoneyFeild* mutable_money_ten_day();
  inline ::QuoteProto::MoneyFeild* release_money_ten_day();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.MoneyMsg)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_stock_type();
  inline void clear_has_stock_type();
  inline void set_has_money_one_day();
  inline void clear_has_money_one_day();
  inline void set_has_money_three_day();
  inline void clear_has_money_three_day();
  inline void set_has_money_five_day();
  inline void clear_has_money_five_day();
  inline void set_has_money_ten_day();
  inline void clear_has_money_ten_day();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::std::string* stock_name_;
  ::std::string* block_name_;
  ::std::string* stock_type_;
  ::QuoteProto::MoneyFeild* money_one_day_;
  ::QuoteProto::MoneyFeild* money_three_day_;
  ::QuoteProto::MoneyFeild* money_five_day_;
  ::QuoteProto::MoneyFeild* money_ten_day_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MoneyMsg* default_instance_;
};
// -------------------------------------------------------------------

class FundAbnormalMsg : public ::google::protobuf::Message {
 public:
  FundAbnormalMsg();
  virtual ~FundAbnormalMsg();
  
  FundAbnormalMsg(const FundAbnormalMsg& from);
  
  inline FundAbnormalMsg& operator=(const FundAbnormalMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FundAbnormalMsg& default_instance();
  
  void Swap(FundAbnormalMsg* other);
  
  // implements Message ----------------------------------------------
  
  FundAbnormalMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FundAbnormalMsg& from);
  void MergeFrom(const FundAbnormalMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional string stock_name = 2;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 2;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // optional string stock_type = 3;
  inline bool has_stock_type() const;
  inline void clear_stock_type();
  static const int kStockTypeFieldNumber = 3;
  inline const ::std::string& stock_type() const;
  inline void set_stock_type(const ::std::string& value);
  inline void set_stock_type(const char* value);
  inline void set_stock_type(const char* value, size_t size);
  inline ::std::string* mutable_stock_type();
  inline ::std::string* release_stock_type();
  
  // optional string block_name = 4;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 4;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional float rate = 5;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 5;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional float thirty_rate = 6;
  inline bool has_thirty_rate() const;
  inline void clear_thirty_rate();
  static const int kThirtyRateFieldNumber = 6;
  inline float thirty_rate() const;
  inline void set_thirty_rate(float value);
  
  // optional int64 active_netput = 7;
  inline bool has_active_netput() const;
  inline void clear_active_netput();
  static const int kActiveNetputFieldNumber = 7;
  inline ::google::protobuf::int64 active_netput() const;
  inline void set_active_netput(::google::protobuf::int64 value);
  
  // optional int64 thirty_active_netput = 8;
  inline bool has_thirty_active_netput() const;
  inline void clear_thirty_active_netput();
  static const int kThirtyActiveNetputFieldNumber = 8;
  inline ::google::protobuf::int64 thirty_active_netput() const;
  inline void set_thirty_active_netput(::google::protobuf::int64 value);
  
  // optional int64 leader_netput = 9;
  inline bool has_leader_netput() const;
  inline void clear_leader_netput();
  static const int kLeaderNetputFieldNumber = 9;
  inline ::google::protobuf::int64 leader_netput() const;
  inline void set_leader_netput(::google::protobuf::int64 value);
  
  // optional float avtive_rate = 10;
  inline bool has_avtive_rate() const;
  inline void clear_avtive_rate();
  static const int kAvtiveRateFieldNumber = 10;
  inline float avtive_rate() const;
  inline void set_avtive_rate(float value);
  
  // optional float leader_rate = 11;
  inline bool has_leader_rate() const;
  inline void clear_leader_rate();
  static const int kLeaderRateFieldNumber = 11;
  inline float leader_rate() const;
  inline void set_leader_rate(float value);
  
  // optional float turnover_rate = 12;
  inline bool has_turnover_rate() const;
  inline void clear_turnover_rate();
  static const int kTurnoverRateFieldNumber = 12;
  inline float turnover_rate() const;
  inline void set_turnover_rate(float value);
  
  // optional float ratio = 13;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 13;
  inline float ratio() const;
  inline void set_ratio(float value);
  
  // optional uint64 cir_value = 14;
  inline bool has_cir_value() const;
  inline void clear_cir_value();
  static const int kCirValueFieldNumber = 14;
  inline ::google::protobuf::uint64 cir_value() const;
  inline void set_cir_value(::google::protobuf::uint64 value);
  
  // optional float ped = 15;
  inline bool has_ped() const;
  inline void clear_ped();
  static const int kPedFieldNumber = 15;
  inline float ped() const;
  inline void set_ped(float value);
  
  // optional int64 three_avtive_netput = 16;
  inline bool has_three_avtive_netput() const;
  inline void clear_three_avtive_netput();
  static const int kThreeAvtiveNetputFieldNumber = 16;
  inline ::google::protobuf::int64 three_avtive_netput() const;
  inline void set_three_avtive_netput(::google::protobuf::int64 value);
  
  // optional float three_rate = 17;
  inline bool has_three_rate() const;
  inline void clear_three_rate();
  static const int kThreeRateFieldNumber = 17;
  inline float three_rate() const;
  inline void set_three_rate(float value);
  
  // optional int64 five_avtive_netput = 18;
  inline bool has_five_avtive_netput() const;
  inline void clear_five_avtive_netput();
  static const int kFiveAvtiveNetputFieldNumber = 18;
  inline ::google::protobuf::int64 five_avtive_netput() const;
  inline void set_five_avtive_netput(::google::protobuf::int64 value);
  
  // optional float five_rate = 19;
  inline bool has_five_rate() const;
  inline void clear_five_rate();
  static const int kFiveRateFieldNumber = 19;
  inline float five_rate() const;
  inline void set_five_rate(float value);
  
  // optional uint32 last_pice = 20;
  inline bool has_last_pice() const;
  inline void clear_last_pice();
  static const int kLastPiceFieldNumber = 20;
  inline ::google::protobuf::uint32 last_pice() const;
  inline void set_last_pice(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.FundAbnormalMsg)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_stock_type();
  inline void clear_has_stock_type();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_thirty_rate();
  inline void clear_has_thirty_rate();
  inline void set_has_active_netput();
  inline void clear_has_active_netput();
  inline void set_has_thirty_active_netput();
  inline void clear_has_thirty_active_netput();
  inline void set_has_leader_netput();
  inline void clear_has_leader_netput();
  inline void set_has_avtive_rate();
  inline void clear_has_avtive_rate();
  inline void set_has_leader_rate();
  inline void clear_has_leader_rate();
  inline void set_has_turnover_rate();
  inline void clear_has_turnover_rate();
  inline void set_has_ratio();
  inline void clear_has_ratio();
  inline void set_has_cir_value();
  inline void clear_has_cir_value();
  inline void set_has_ped();
  inline void clear_has_ped();
  inline void set_has_three_avtive_netput();
  inline void clear_has_three_avtive_netput();
  inline void set_has_three_rate();
  inline void clear_has_three_rate();
  inline void set_has_five_avtive_netput();
  inline void clear_has_five_avtive_netput();
  inline void set_has_five_rate();
  inline void clear_has_five_rate();
  inline void set_has_last_pice();
  inline void clear_has_last_pice();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::std::string* stock_name_;
  ::std::string* stock_type_;
  ::std::string* block_name_;
  float rate_;
  float thirty_rate_;
  ::google::protobuf::int64 active_netput_;
  ::google::protobuf::int64 thirty_active_netput_;
  ::google::protobuf::int64 leader_netput_;
  float avtive_rate_;
  float leader_rate_;
  float turnover_rate_;
  float ratio_;
  ::google::protobuf::uint64 cir_value_;
  ::google::protobuf::int64 three_avtive_netput_;
  float ped_;
  float three_rate_;
  ::google::protobuf::int64 five_avtive_netput_;
  float five_rate_;
  ::google::protobuf::uint32 last_pice_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static FundAbnormalMsg* default_instance_;
};
// -------------------------------------------------------------------

class BidMsg : public ::google::protobuf::Message {
 public:
  BidMsg();
  virtual ~BidMsg();
  
  BidMsg(const BidMsg& from);
  
  inline BidMsg& operator=(const BidMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidMsg& default_instance();
  
  void Swap(BidMsg* other);
  
  // implements Message ----------------------------------------------
  
  BidMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidMsg& from);
  void MergeFrom(const BidMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional string stock_type = 2;
  inline bool has_stock_type() const;
  inline void clear_stock_type();
  static const int kStockTypeFieldNumber = 2;
  inline const ::std::string& stock_type() const;
  inline void set_stock_type(const ::std::string& value);
  inline void set_stock_type(const char* value);
  inline void set_stock_type(const char* value, size_t size);
  inline ::std::string* mutable_stock_type();
  inline ::std::string* release_stock_type();
  
  // optional string stock_name = 3;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 3;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // optional uint32 trading_day = 4;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 4;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // optional float bidding_rise = 5;
  inline bool has_bidding_rise() const;
  inline void clear_bidding_rise();
  static const int kBiddingRiseFieldNumber = 5;
  inline float bidding_rise() const;
  inline void set_bidding_rise(float value);
  
  // optional uint64 main_funds = 6;
  inline bool has_main_funds() const;
  inline void clear_main_funds();
  static const int kMainFundsFieldNumber = 6;
  inline ::google::protobuf::uint64 main_funds() const;
  inline void set_main_funds(::google::protobuf::uint64 value);
  
  // optional int64 bidding_quantity_than = 7;
  inline bool has_bidding_quantity_than() const;
  inline void clear_bidding_quantity_than();
  static const int kBiddingQuantityThanFieldNumber = 7;
  inline ::google::protobuf::int64 bidding_quantity_than() const;
  inline void set_bidding_quantity_than(::google::protobuf::int64 value);
  
  // optional string plate = 8;
  inline bool has_plate() const;
  inline void clear_plate();
  static const int kPlateFieldNumber = 8;
  inline const ::std::string& plate() const;
  inline void set_plate(const ::std::string& value);
  inline void set_plate(const char* value);
  inline void set_plate(const char* value, size_t size);
  inline ::std::string* mutable_plate();
  inline ::std::string* release_plate();
  
  // optional uint64 bidding_volume = 9;
  inline bool has_bidding_volume() const;
  inline void clear_bidding_volume();
  static const int kBiddingVolumeFieldNumber = 9;
  inline ::google::protobuf::uint64 bidding_volume() const;
  inline void set_bidding_volume(::google::protobuf::uint64 value);
  
  // optional uint64 bidding_turnover = 10;
  inline bool has_bidding_turnover() const;
  inline void clear_bidding_turnover();
  static const int kBiddingTurnoverFieldNumber = 10;
  inline ::google::protobuf::uint64 bidding_turnover() const;
  inline void set_bidding_turnover(::google::protobuf::uint64 value);
  
  // optional uint32 bidding_price = 11;
  inline bool has_bidding_price() const;
  inline void clear_bidding_price();
  static const int kBiddingPriceFieldNumber = 11;
  inline ::google::protobuf::uint32 bidding_price() const;
  inline void set_bidding_price(::google::protobuf::uint32 value);
  
  // optional uint64 bidding_volume1 = 12;
  inline bool has_bidding_volume1() const;
  inline void clear_bidding_volume1();
  static const int kBiddingVolume1FieldNumber = 12;
  inline ::google::protobuf::uint64 bidding_volume1() const;
  inline void set_bidding_volume1(::google::protobuf::uint64 value);
  
  // optional uint64 current_value = 13;
  inline bool has_current_value() const;
  inline void clear_current_value();
  static const int kCurrentValueFieldNumber = 13;
  inline ::google::protobuf::uint64 current_value() const;
  inline void set_current_value(::google::protobuf::uint64 value);
  
  // optional float yesterday_rate = 14;
  inline bool has_yesterday_rate() const;
  inline void clear_yesterday_rate();
  static const int kYesterdayRateFieldNumber = 14;
  inline float yesterday_rate() const;
  inline void set_yesterday_rate(float value);
  
  // optional uint32 trade_status = 15;
  inline bool has_trade_status() const;
  inline void clear_trade_status();
  static const int kTradeStatusFieldNumber = 15;
  inline ::google::protobuf::uint32 trade_status() const;
  inline void set_trade_status(::google::protobuf::uint32 value);
  
  // optional uint32 update_time = 16;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.BidMsg)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_type();
  inline void clear_has_stock_type();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_bidding_rise();
  inline void clear_has_bidding_rise();
  inline void set_has_main_funds();
  inline void clear_has_main_funds();
  inline void set_has_bidding_quantity_than();
  inline void clear_has_bidding_quantity_than();
  inline void set_has_plate();
  inline void clear_has_plate();
  inline void set_has_bidding_volume();
  inline void clear_has_bidding_volume();
  inline void set_has_bidding_turnover();
  inline void clear_has_bidding_turnover();
  inline void set_has_bidding_price();
  inline void clear_has_bidding_price();
  inline void set_has_bidding_volume1();
  inline void clear_has_bidding_volume1();
  inline void set_has_current_value();
  inline void clear_has_current_value();
  inline void set_has_yesterday_rate();
  inline void clear_has_yesterday_rate();
  inline void set_has_trade_status();
  inline void clear_has_trade_status();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::std::string* stock_type_;
  ::std::string* stock_name_;
  ::google::protobuf::uint32 trading_day_;
  float bidding_rise_;
  ::google::protobuf::uint64 main_funds_;
  ::google::protobuf::int64 bidding_quantity_than_;
  ::std::string* plate_;
  ::google::protobuf::uint64 bidding_volume_;
  ::google::protobuf::uint64 bidding_turnover_;
  ::google::protobuf::uint64 bidding_volume1_;
  ::google::protobuf::uint32 bidding_price_;
  float yesterday_rate_;
  ::google::protobuf::uint64 current_value_;
  ::google::protobuf::uint32 trade_status_;
  ::google::protobuf::uint32 update_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BidMsg* default_instance_;
};
// -------------------------------------------------------------------

class BidBlockMsg : public ::google::protobuf::Message {
 public:
  BidBlockMsg();
  virtual ~BidBlockMsg();
  
  BidBlockMsg(const BidBlockMsg& from);
  
  inline BidBlockMsg& operator=(const BidBlockMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidBlockMsg& default_instance();
  
  void Swap(BidBlockMsg* other);
  
  // implements Message ----------------------------------------------
  
  BidBlockMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidBlockMsg& from);
  void MergeFrom(const BidBlockMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string block_code = 1;
  inline bool has_block_code() const;
  inline void clear_block_code();
  static const int kBlockCodeFieldNumber = 1;
  inline const ::std::string& block_code() const;
  inline void set_block_code(const ::std::string& value);
  inline void set_block_code(const char* value);
  inline void set_block_code(const char* value, size_t size);
  inline ::std::string* mutable_block_code();
  inline ::std::string* release_block_code();
  
  // optional string block_name = 2;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional float rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional uint32 update_time_sec = 4;
  inline bool has_update_time_sec() const;
  inline void clear_update_time_sec();
  static const int kUpdateTimeSecFieldNumber = 4;
  inline ::google::protobuf::uint32 update_time_sec() const;
  inline void set_update_time_sec(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.BidBlockMsg)
 private:
  inline void set_has_block_code();
  inline void clear_has_block_code();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_update_time_sec();
  inline void clear_has_update_time_sec();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* block_code_;
  ::std::string* block_name_;
  float rate_;
  ::google::protobuf::uint32 update_time_sec_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BidBlockMsg* default_instance_;
};
// -------------------------------------------------------------------

class BidClientMsg : public ::google::protobuf::Message {
 public:
  BidClientMsg();
  virtual ~BidClientMsg();
  
  BidClientMsg(const BidClientMsg& from);
  
  inline BidClientMsg& operator=(const BidClientMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidClientMsg& default_instance();
  
  void Swap(BidClientMsg* other);
  
  // implements Message ----------------------------------------------
  
  BidClientMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidClientMsg& from);
  void MergeFrom(const BidClientMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .QuoteProto.BidMsg base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::QuoteProto::BidMsg& base_info() const;
  inline ::QuoteProto::BidMsg* mutable_base_info();
  inline ::QuoteProto::BidMsg* release_base_info();
  
  // optional uint32 last_pice = 2;
  inline bool has_last_pice() const;
  inline void clear_last_pice();
  static const int kLastPiceFieldNumber = 2;
  inline ::google::protobuf::uint32 last_pice() const;
  inline void set_last_pice(::google::protobuf::uint32 value);
  
  // optional float rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional uint32 pre_close_price = 4;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 4;
  inline ::google::protobuf::uint32 pre_close_price() const;
  inline void set_pre_close_price(::google::protobuf::uint32 value);
  
  // optional uint64 upsert_time = 5;
  inline bool has_upsert_time() const;
  inline void clear_upsert_time();
  static const int kUpsertTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 upsert_time() const;
  inline void set_upsert_time(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.BidClientMsg)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_last_pice();
  inline void clear_has_last_pice();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  inline void set_has_upsert_time();
  inline void clear_has_upsert_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::BidMsg* base_info_;
  ::google::protobuf::uint32 last_pice_;
  float rate_;
  ::google::protobuf::uint64 upsert_time_;
  ::google::protobuf::uint32 pre_close_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BidClientMsg* default_instance_;
};
// -------------------------------------------------------------------

class BlockFundAbnormalItem : public ::google::protobuf::Message {
 public:
  BlockFundAbnormalItem();
  virtual ~BlockFundAbnormalItem();
  
  BlockFundAbnormalItem(const BlockFundAbnormalItem& from);
  
  inline BlockFundAbnormalItem& operator=(const BlockFundAbnormalItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockFundAbnormalItem& default_instance();
  
  void Swap(BlockFundAbnormalItem* other);
  
  // implements Message ----------------------------------------------
  
  BlockFundAbnormalItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockFundAbnormalItem& from);
  void MergeFrom(const BlockFundAbnormalItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .QuoteProto.StockMsg block_info = 1;
  inline bool has_block_info() const;
  inline void clear_block_info();
  static const int kBlockInfoFieldNumber = 1;
  inline const ::QuoteProto::StockMsg& block_info() const;
  inline ::QuoteProto::StockMsg* mutable_block_info();
  inline ::QuoteProto::StockMsg* release_block_info();
  
  // repeated .QuoteProto.StockMsg stk = 2;
  inline int stk_size() const;
  inline void clear_stk();
  static const int kStkFieldNumber = 2;
  inline const ::QuoteProto::StockMsg& stk(int index) const;
  inline ::QuoteProto::StockMsg* mutable_stk(int index);
  inline ::QuoteProto::StockMsg* add_stk();
  inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::StockMsg >&
      stk() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::StockMsg >*
      mutable_stk();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.BlockFundAbnormalItem)
 private:
  inline void set_has_block_info();
  inline void clear_has_block_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::StockMsg* block_info_;
  ::google::protobuf::RepeatedPtrField< ::QuoteProto::StockMsg > stk_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BlockFundAbnormalItem* default_instance_;
};
// -------------------------------------------------------------------

class RiseFallMonitorNumMsg : public ::google::protobuf::Message {
 public:
  RiseFallMonitorNumMsg();
  virtual ~RiseFallMonitorNumMsg();
  
  RiseFallMonitorNumMsg(const RiseFallMonitorNumMsg& from);
  
  inline RiseFallMonitorNumMsg& operator=(const RiseFallMonitorNumMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RiseFallMonitorNumMsg& default_instance();
  
  void Swap(RiseFallMonitorNumMsg* other);
  
  // implements Message ----------------------------------------------
  
  RiseFallMonitorNumMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RiseFallMonitorNumMsg& from);
  void MergeFrom(const RiseFallMonitorNumMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 real_time_num = 1;
  inline bool has_real_time_num() const;
  inline void clear_real_time_num();
  static const int kRealTimeNumFieldNumber = 1;
  inline ::google::protobuf::int32 real_time_num() const;
  inline void set_real_time_num(::google::protobuf::int32 value);
  
  // optional uint32 natural_num = 2;
  inline bool has_natural_num() const;
  inline void clear_natural_num();
  static const int kNaturalNumFieldNumber = 2;
  inline ::google::protobuf::uint32 natural_num() const;
  inline void set_natural_num(::google::protobuf::uint32 value);
  
  // optional uint32 continuous_num = 3;
  inline bool has_continuous_num() const;
  inline void clear_continuous_num();
  static const int kContinuousNumFieldNumber = 3;
  inline ::google::protobuf::uint32 continuous_num() const;
  inline void set_continuous_num(::google::protobuf::uint32 value);
  
  // optional uint32 aword_plate = 4;
  inline bool has_aword_plate() const;
  inline void clear_aword_plate();
  static const int kAwordPlateFieldNumber = 4;
  inline ::google::protobuf::uint32 aword_plate() const;
  inline void set_aword_plate(::google::protobuf::uint32 value);
  
  // optional float sealing_plate_rate = 5;
  inline bool has_sealing_plate_rate() const;
  inline void clear_sealing_plate_rate();
  static const int kSealingPlateRateFieldNumber = 5;
  inline float sealing_plate_rate() const;
  inline void set_sealing_plate_rate(float value);
  
  // optional uint32 fried_plate = 6;
  inline bool has_fried_plate() const;
  inline void clear_fried_plate();
  static const int kFriedPlateFieldNumber = 6;
  inline ::google::protobuf::uint32 fried_plate() const;
  inline void set_fried_plate(::google::protobuf::uint32 value);
  
  // optional float yeaterday_limit_rate = 7;
  inline bool has_yeaterday_limit_rate() const;
  inline void clear_yeaterday_limit_rate();
  static const int kYeaterdayLimitRateFieldNumber = 7;
  inline float yeaterday_limit_rate() const;
  inline void set_yeaterday_limit_rate(float value);
  
  // optional float yeaterday_high_open_rate = 8;
  inline bool has_yeaterday_high_open_rate() const;
  inline void clear_yeaterday_high_open_rate();
  static const int kYeaterdayHighOpenRateFieldNumber = 8;
  inline float yeaterday_high_open_rate() const;
  inline void set_yeaterday_high_open_rate(float value);
  
  // optional int32 yeaterday_profit_rate = 9;
  inline bool has_yeaterday_profit_rate() const;
  inline void clear_yeaterday_profit_rate();
  static const int kYeaterdayProfitRateFieldNumber = 9;
  inline ::google::protobuf::int32 yeaterday_profit_rate() const;
  inline void set_yeaterday_profit_rate(::google::protobuf::int32 value);
  
  // optional float yeaterday_continuous_limit_rate = 10;
  inline bool has_yeaterday_continuous_limit_rate() const;
  inline void clear_yeaterday_continuous_limit_rate();
  static const int kYeaterdayContinuousLimitRateFieldNumber = 10;
  inline float yeaterday_continuous_limit_rate() const;
  inline void set_yeaterday_continuous_limit_rate(float value);
  
  // optional float yeaterday_continuous_high_open_rate = 11;
  inline bool has_yeaterday_continuous_high_open_rate() const;
  inline void clear_yeaterday_continuous_high_open_rate();
  static const int kYeaterdayContinuousHighOpenRateFieldNumber = 11;
  inline float yeaterday_continuous_high_open_rate() const;
  inline void set_yeaterday_continuous_high_open_rate(float value);
  
  // optional int32 yeaterday_continuous_profit_rate = 12;
  inline bool has_yeaterday_continuous_profit_rate() const;
  inline void clear_yeaterday_continuous_profit_rate();
  static const int kYeaterdayContinuousProfitRateFieldNumber = 12;
  inline ::google::protobuf::int32 yeaterday_continuous_profit_rate() const;
  inline void set_yeaterday_continuous_profit_rate(::google::protobuf::int32 value);
  
  // optional uint32 update_time_sec = 13;
  inline bool has_update_time_sec() const;
  inline void clear_update_time_sec();
  static const int kUpdateTimeSecFieldNumber = 13;
  inline ::google::protobuf::uint32 update_time_sec() const;
  inline void set_update_time_sec(::google::protobuf::uint32 value);
  
  // optional uint32 trading_day = 14;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 14;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.RiseFallMonitorNumMsg)
 private:
  inline void set_has_real_time_num();
  inline void clear_has_real_time_num();
  inline void set_has_natural_num();
  inline void clear_has_natural_num();
  inline void set_has_continuous_num();
  inline void clear_has_continuous_num();
  inline void set_has_aword_plate();
  inline void clear_has_aword_plate();
  inline void set_has_sealing_plate_rate();
  inline void clear_has_sealing_plate_rate();
  inline void set_has_fried_plate();
  inline void clear_has_fried_plate();
  inline void set_has_yeaterday_limit_rate();
  inline void clear_has_yeaterday_limit_rate();
  inline void set_has_yeaterday_high_open_rate();
  inline void clear_has_yeaterday_high_open_rate();
  inline void set_has_yeaterday_profit_rate();
  inline void clear_has_yeaterday_profit_rate();
  inline void set_has_yeaterday_continuous_limit_rate();
  inline void clear_has_yeaterday_continuous_limit_rate();
  inline void set_has_yeaterday_continuous_high_open_rate();
  inline void clear_has_yeaterday_continuous_high_open_rate();
  inline void set_has_yeaterday_continuous_profit_rate();
  inline void clear_has_yeaterday_continuous_profit_rate();
  inline void set_has_update_time_sec();
  inline void clear_has_update_time_sec();
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 real_time_num_;
  ::google::protobuf::uint32 natural_num_;
  ::google::protobuf::uint32 continuous_num_;
  ::google::protobuf::uint32 aword_plate_;
  float sealing_plate_rate_;
  ::google::protobuf::uint32 fried_plate_;
  float yeaterday_limit_rate_;
  float yeaterday_high_open_rate_;
  ::google::protobuf::int32 yeaterday_profit_rate_;
  float yeaterday_continuous_limit_rate_;
  float yeaterday_continuous_high_open_rate_;
  ::google::protobuf::int32 yeaterday_continuous_profit_rate_;
  ::google::protobuf::uint32 update_time_sec_;
  ::google::protobuf::uint32 trading_day_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static RiseFallMonitorNumMsg* default_instance_;
};
// -------------------------------------------------------------------

class RateMsg : public ::google::protobuf::Message {
 public:
  RateMsg();
  virtual ~RateMsg();
  
  RateMsg(const RateMsg& from);
  
  inline RateMsg& operator=(const RateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RateMsg& default_instance();
  
  void Swap(RateMsg* other);
  
  // implements Message ----------------------------------------------
  
  RateMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RateMsg& from);
  void MergeFrom(const RateMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 message_type = 1;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 message_type() const;
  inline void set_message_type(::google::protobuf::uint32 value);
  
  // optional string security_code = 2;
  inline bool has_security_code() const;
  inline void clear_security_code();
  static const int kSecurityCodeFieldNumber = 2;
  inline const ::std::string& security_code() const;
  inline void set_security_code(const ::std::string& value);
  inline void set_security_code(const char* value);
  inline void set_security_code(const char* value, size_t size);
  inline ::std::string* mutable_security_code();
  inline ::std::string* release_security_code();
  
  // optional string security_type = 3;
  inline bool has_security_type() const;
  inline void clear_security_type();
  static const int kSecurityTypeFieldNumber = 3;
  inline const ::std::string& security_type() const;
  inline void set_security_type(const ::std::string& value);
  inline void set_security_type(const char* value);
  inline void set_security_type(const char* value, size_t size);
  inline ::std::string* mutable_security_type();
  inline ::std::string* release_security_type();
  
  // optional string security_name = 4;
  inline bool has_security_name() const;
  inline void clear_security_name();
  static const int kSecurityNameFieldNumber = 4;
  inline const ::std::string& security_name() const;
  inline void set_security_name(const ::std::string& value);
  inline void set_security_name(const char* value);
  inline void set_security_name(const char* value, size_t size);
  inline ::std::string* mutable_security_name();
  inline ::std::string* release_security_name();
  
  // optional float rise = 5;
  inline bool has_rise() const;
  inline void clear_rise();
  static const int kRiseFieldNumber = 5;
  inline float rise() const;
  inline void set_rise(float value);
  
  // optional string plate = 6;
  inline bool has_plate() const;
  inline void clear_plate();
  static const int kPlateFieldNumber = 6;
  inline const ::std::string& plate() const;
  inline void set_plate(const ::std::string& value);
  inline void set_plate(const char* value);
  inline void set_plate(const char* value, size_t size);
  inline ::std::string* mutable_plate();
  inline ::std::string* release_plate();
  
  // optional uint32 up_limit_rate_time = 7;
  inline bool has_up_limit_rate_time() const;
  inline void clear_up_limit_rate_time();
  static const int kUpLimitRateTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 up_limit_rate_time() const;
  inline void set_up_limit_rate_time(::google::protobuf::uint32 value);
  
  // optional string continuous_up_limit_rate = 8;
  inline bool has_continuous_up_limit_rate() const;
  inline void clear_continuous_up_limit_rate();
  static const int kContinuousUpLimitRateFieldNumber = 8;
  inline const ::std::string& continuous_up_limit_rate() const;
  inline void set_continuous_up_limit_rate(const ::std::string& value);
  inline void set_continuous_up_limit_rate(const char* value);
  inline void set_continuous_up_limit_rate(const char* value, size_t size);
  inline ::std::string* mutable_continuous_up_limit_rate();
  inline ::std::string* release_continuous_up_limit_rate();
  
  // optional string continuous_lower_limit_rate = 9;
  inline bool has_continuous_lower_limit_rate() const;
  inline void clear_continuous_lower_limit_rate();
  static const int kContinuousLowerLimitRateFieldNumber = 9;
  inline const ::std::string& continuous_lower_limit_rate() const;
  inline void set_continuous_lower_limit_rate(const ::std::string& value);
  inline void set_continuous_lower_limit_rate(const char* value);
  inline void set_continuous_lower_limit_rate(const char* value, size_t size);
  inline ::std::string* mutable_continuous_lower_limit_rate();
  inline ::std::string* release_continuous_lower_limit_rate();
  
  // optional uint64 up_limit_volume = 10;
  inline bool has_up_limit_volume() const;
  inline void clear_up_limit_volume();
  static const int kUpLimitVolumeFieldNumber = 10;
  inline ::google::protobuf::uint64 up_limit_volume() const;
  inline void set_up_limit_volume(::google::protobuf::uint64 value);
  
  // optional uint64 lower_limit_volume = 11;
  inline bool has_lower_limit_volume() const;
  inline void clear_lower_limit_volume();
  static const int kLowerLimitVolumeFieldNumber = 11;
  inline ::google::protobuf::uint64 lower_limit_volume() const;
  inline void set_lower_limit_volume(::google::protobuf::uint64 value);
  
  // optional uint32 lower_limit_rate_time = 12;
  inline bool has_lower_limit_rate_time() const;
  inline void clear_lower_limit_rate_time();
  static const int kLowerLimitRateTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 lower_limit_rate_time() const;
  inline void set_lower_limit_rate_time(::google::protobuf::uint32 value);
  
  // optional uint32 fried_time = 13;
  inline bool has_fried_time() const;
  inline void clear_fried_time();
  static const int kFriedTimeFieldNumber = 13;
  inline ::google::protobuf::uint32 fried_time() const;
  inline void set_fried_time(::google::protobuf::uint32 value);
  
  // optional uint32 fried_num = 14;
  inline bool has_fried_num() const;
  inline void clear_fried_num();
  static const int kFriedNumFieldNumber = 14;
  inline ::google::protobuf::uint32 fried_num() const;
  inline void set_fried_num(::google::protobuf::uint32 value);
  
  // optional int64 main_funds = 15;
  inline bool has_main_funds() const;
  inline void clear_main_funds();
  static const int kMainFundsFieldNumber = 15;
  inline ::google::protobuf::int64 main_funds() const;
  inline void set_main_funds(::google::protobuf::int64 value);
  
  // optional uint32 to_up_limit_time = 16;
  inline bool has_to_up_limit_time() const;
  inline void clear_to_up_limit_time();
  static const int kToUpLimitTimeFieldNumber = 16;
  inline ::google::protobuf::uint32 to_up_limit_time() const;
  inline void set_to_up_limit_time(::google::protobuf::uint32 value);
  
  // optional uint32 to_lower_limit_time = 17;
  inline bool has_to_lower_limit_time() const;
  inline void clear_to_lower_limit_time();
  static const int kToLowerLimitTimeFieldNumber = 17;
  inline ::google::protobuf::uint32 to_lower_limit_time() const;
  inline void set_to_lower_limit_time(::google::protobuf::uint32 value);
  
  // optional string history_continuous = 18;
  inline bool has_history_continuous() const;
  inline void clear_history_continuous();
  static const int kHistoryContinuousFieldNumber = 18;
  inline const ::std::string& history_continuous() const;
  inline void set_history_continuous(const ::std::string& value);
  inline void set_history_continuous(const char* value);
  inline void set_history_continuous(const char* value, size_t size);
  inline ::std::string* mutable_history_continuous();
  inline ::std::string* release_history_continuous();
  
  // optional uint32 update_time_sec = 19;
  inline bool has_update_time_sec() const;
  inline void clear_update_time_sec();
  static const int kUpdateTimeSecFieldNumber = 19;
  inline ::google::protobuf::uint32 update_time_sec() const;
  inline void set_update_time_sec(::google::protobuf::uint32 value);
  
  // optional uint32 tradingday = 20;
  inline bool has_tradingday() const;
  inline void clear_tradingday();
  static const int kTradingdayFieldNumber = 20;
  inline ::google::protobuf::uint32 tradingday() const;
  inline void set_tradingday(::google::protobuf::uint32 value);
  
  // optional uint32 last_price = 21;
  inline bool has_last_price() const;
  inline void clear_last_price();
  static const int kLastPriceFieldNumber = 21;
  inline ::google::protobuf::uint32 last_price() const;
  inline void set_last_price(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.RateMsg)
 private:
  inline void set_has_message_type();
  inline void clear_has_message_type();
  inline void set_has_security_code();
  inline void clear_has_security_code();
  inline void set_has_security_type();
  inline void clear_has_security_type();
  inline void set_has_security_name();
  inline void clear_has_security_name();
  inline void set_has_rise();
  inline void clear_has_rise();
  inline void set_has_plate();
  inline void clear_has_plate();
  inline void set_has_up_limit_rate_time();
  inline void clear_has_up_limit_rate_time();
  inline void set_has_continuous_up_limit_rate();
  inline void clear_has_continuous_up_limit_rate();
  inline void set_has_continuous_lower_limit_rate();
  inline void clear_has_continuous_lower_limit_rate();
  inline void set_has_up_limit_volume();
  inline void clear_has_up_limit_volume();
  inline void set_has_lower_limit_volume();
  inline void clear_has_lower_limit_volume();
  inline void set_has_lower_limit_rate_time();
  inline void clear_has_lower_limit_rate_time();
  inline void set_has_fried_time();
  inline void clear_has_fried_time();
  inline void set_has_fried_num();
  inline void clear_has_fried_num();
  inline void set_has_main_funds();
  inline void clear_has_main_funds();
  inline void set_has_to_up_limit_time();
  inline void clear_has_to_up_limit_time();
  inline void set_has_to_lower_limit_time();
  inline void clear_has_to_lower_limit_time();
  inline void set_has_history_continuous();
  inline void clear_has_history_continuous();
  inline void set_has_update_time_sec();
  inline void clear_has_update_time_sec();
  inline void set_has_tradingday();
  inline void clear_has_tradingday();
  inline void set_has_last_price();
  inline void clear_has_last_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* security_code_;
  ::std::string* security_type_;
  ::google::protobuf::uint32 message_type_;
  float rise_;
  ::std::string* security_name_;
  ::std::string* plate_;
  ::std::string* continuous_up_limit_rate_;
  ::std::string* continuous_lower_limit_rate_;
  ::google::protobuf::uint32 up_limit_rate_time_;
  ::google::protobuf::uint32 lower_limit_rate_time_;
  ::google::protobuf::uint64 up_limit_volume_;
  ::google::protobuf::uint64 lower_limit_volume_;
  ::google::protobuf::uint32 fried_time_;
  ::google::protobuf::uint32 fried_num_;
  ::google::protobuf::int64 main_funds_;
  ::google::protobuf::uint32 to_up_limit_time_;
  ::google::protobuf::uint32 to_lower_limit_time_;
  ::std::string* history_continuous_;
  ::google::protobuf::uint32 update_time_sec_;
  ::google::protobuf::uint32 tradingday_;
  ::google::protobuf::uint32 last_price_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static RateMsg* default_instance_;
};
// -------------------------------------------------------------------

class ShortMotionMsg : public ::google::protobuf::Message {
 public:
  ShortMotionMsg();
  virtual ~ShortMotionMsg();
  
  ShortMotionMsg(const ShortMotionMsg& from);
  
  inline ShortMotionMsg& operator=(const ShortMotionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShortMotionMsg& default_instance();
  
  void Swap(ShortMotionMsg* other);
  
  // implements Message ----------------------------------------------
  
  ShortMotionMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShortMotionMsg& from);
  void MergeFrom(const ShortMotionMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);
  
  // optional .QuoteProto.ShortMotionType short_type = 2;
  inline bool has_short_type() const;
  inline void clear_short_type();
  static const int kShortTypeFieldNumber = 2;
  inline QuoteProto::ShortMotionType short_type() const;
  inline void set_short_type(QuoteProto::ShortMotionType value);
  
  // optional string stock_code = 3;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 3;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional string stock_name = 4;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 4;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // optional uint32 update_time_sec = 5;
  inline bool has_update_time_sec() const;
  inline void clear_update_time_sec();
  static const int kUpdateTimeSecFieldNumber = 5;
  inline ::google::protobuf::uint32 update_time_sec() const;
  inline void set_update_time_sec(::google::protobuf::uint32 value);
  
  // optional uint64 detail_vol = 6;
  inline bool has_detail_vol() const;
  inline void clear_detail_vol();
  static const int kDetailVolFieldNumber = 6;
  inline ::google::protobuf::uint64 detail_vol() const;
  inline void set_detail_vol(::google::protobuf::uint64 value);
  
  // optional float rate = 7;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 7;
  inline float rate() const;
  inline void set_rate(float value);
  
  // optional int32 last_price = 8;
  inline bool has_last_price() const;
  inline void clear_last_price();
  static const int kLastPriceFieldNumber = 8;
  inline ::google::protobuf::int32 last_price() const;
  inline void set_last_price(::google::protobuf::int32 value);
  
  // optional int32 buy_volume = 9;
  inline bool has_buy_volume() const;
  inline void clear_buy_volume();
  static const int kBuyVolumeFieldNumber = 9;
  inline ::google::protobuf::int32 buy_volume() const;
  inline void set_buy_volume(::google::protobuf::int32 value);
  
  // optional int32 buy_volume1 = 10;
  inline bool has_buy_volume1() const;
  inline void clear_buy_volume1();
  static const int kBuyVolume1FieldNumber = 10;
  inline ::google::protobuf::int32 buy_volume1() const;
  inline void set_buy_volume1(::google::protobuf::int32 value);
  
  // optional int32 sell_volume = 11;
  inline bool has_sell_volume() const;
  inline void clear_sell_volume();
  static const int kSellVolumeFieldNumber = 11;
  inline ::google::protobuf::int32 sell_volume() const;
  inline void set_sell_volume(::google::protobuf::int32 value);
  
  // optional int32 sell_volume1 = 12;
  inline bool has_sell_volume1() const;
  inline void clear_sell_volume1();
  static const int kSellVolume1FieldNumber = 12;
  inline ::google::protobuf::int32 sell_volume1() const;
  inline void set_sell_volume1(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.ShortMotionMsg)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_short_type();
  inline void clear_has_short_type();
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_update_time_sec();
  inline void clear_has_update_time_sec();
  inline void set_has_detail_vol();
  inline void clear_has_detail_vol();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_last_price();
  inline void clear_has_last_price();
  inline void set_has_buy_volume();
  inline void clear_has_buy_volume();
  inline void set_has_buy_volume1();
  inline void clear_has_buy_volume1();
  inline void set_has_sell_volume();
  inline void clear_has_sell_volume();
  inline void set_has_sell_volume1();
  inline void clear_has_sell_volume1();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 index_;
  int short_type_;
  ::std::string* stock_code_;
  ::std::string* stock_name_;
  ::google::protobuf::uint64 detail_vol_;
  ::google::protobuf::uint32 update_time_sec_;
  float rate_;
  ::google::protobuf::int32 last_price_;
  ::google::protobuf::int32 buy_volume_;
  ::google::protobuf::int32 buy_volume1_;
  ::google::protobuf::int32 sell_volume_;
  ::google::protobuf::int32 sell_volume1_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ShortMotionMsg* default_instance_;
};
// -------------------------------------------------------------------

class FenJia : public ::google::protobuf::Message {
 public:
  FenJia();
  virtual ~FenJia();
  
  FenJia(const FenJia& from);
  
  inline FenJia& operator=(const FenJia& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FenJia& default_instance();
  
  void Swap(FenJia* other);
  
  // implements Message ----------------------------------------------
  
  FenJia* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FenJia& from);
  void MergeFrom(const FenJia& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 trading_day = 1;
  inline bool has_trading_day() const;
  inline void clear_trading_day();
  static const int kTradingDayFieldNumber = 1;
  inline ::google::protobuf::uint32 trading_day() const;
  inline void set_trading_day(::google::protobuf::uint32 value);
  
  // optional uint32 price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);
  
  // optional uint64 buy_volume = 4;
  inline bool has_buy_volume() const;
  inline void clear_buy_volume();
  static const int kBuyVolumeFieldNumber = 4;
  inline ::google::protobuf::uint64 buy_volume() const;
  inline void set_buy_volume(::google::protobuf::uint64 value);
  
  // optional uint64 sell_volume = 5;
  inline bool has_sell_volume() const;
  inline void clear_sell_volume();
  static const int kSellVolumeFieldNumber = 5;
  inline ::google::protobuf::uint64 sell_volume() const;
  inline void set_sell_volume(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.FenJia)
 private:
  inline void set_has_trading_day();
  inline void clear_has_trading_day();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_buy_volume();
  inline void clear_has_buy_volume();
  inline void set_has_sell_volume();
  inline void clear_has_sell_volume();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 trading_day_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint64 buy_volume_;
  ::google::protobuf::uint64 sell_volume_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static FenJia* default_instance_;
};
// -------------------------------------------------------------------

class MidAbnormalMsg : public ::google::protobuf::Message {
 public:
  MidAbnormalMsg();
  virtual ~MidAbnormalMsg();
  
  MidAbnormalMsg(const MidAbnormalMsg& from);
  
  inline MidAbnormalMsg& operator=(const MidAbnormalMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MidAbnormalMsg& default_instance();
  
  void Swap(MidAbnormalMsg* other);
  
  // implements Message ----------------------------------------------
  
  MidAbnormalMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MidAbnormalMsg& from);
  void MergeFrom(const MidAbnormalMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QuoteProto.MidAbnormalType abnormal_type = 1;
  inline bool has_abnormal_type() const;
  inline void clear_abnormal_type();
  static const int kAbnormalTypeFieldNumber = 1;
  inline QuoteProto::MidAbnormalType abnormal_type() const;
  inline void set_abnormal_type(QuoteProto::MidAbnormalType value);
  
  // required string stock_code = 2;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 2;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // required string stock_name = 3;
  inline bool has_stock_name() const;
  inline void clear_stock_name();
  static const int kStockNameFieldNumber = 3;
  inline const ::std::string& stock_name() const;
  inline void set_stock_name(const ::std::string& value);
  inline void set_stock_name(const char* value);
  inline void set_stock_name(const char* value, size_t size);
  inline ::std::string* mutable_stock_name();
  inline ::std::string* release_stock_name();
  
  // required uint32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);
  
  // required float rate = 5;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 5;
  inline float rate() const;
  inline void set_rate(float value);
  
  // required uint32 last_price = 6;
  inline bool has_last_price() const;
  inline void clear_last_price();
  static const int kLastPriceFieldNumber = 6;
  inline ::google::protobuf::uint32 last_price() const;
  inline void set_last_price(::google::protobuf::uint32 value);
  
  // required uint64 turnover = 7;
  inline bool has_turnover() const;
  inline void clear_turnover();
  static const int kTurnoverFieldNumber = 7;
  inline ::google::protobuf::uint64 turnover() const;
  inline void set_turnover(::google::protobuf::uint64 value);
  
  // required uint64 volume = 8;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 8;
  inline ::google::protobuf::uint64 volume() const;
  inline void set_volume(::google::protobuf::uint64 value);
  
  // required float real_time_rate = 9;
  inline bool has_real_time_rate() const;
  inline void clear_real_time_rate();
  static const int kRealTimeRateFieldNumber = 9;
  inline float real_time_rate() const;
  inline void set_real_time_rate(float value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.MidAbnormalMsg)
 private:
  inline void set_has_abnormal_type();
  inline void clear_has_abnormal_type();
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_stock_name();
  inline void clear_has_stock_name();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_last_price();
  inline void clear_has_last_price();
  inline void set_has_turnover();
  inline void clear_has_turnover();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_real_time_rate();
  inline void clear_has_real_time_rate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  int abnormal_type_;
  ::google::protobuf::uint32 update_time_;
  ::std::string* stock_name_;
  float rate_;
  ::google::protobuf::uint32 last_price_;
  ::google::protobuf::uint64 turnover_;
  ::google::protobuf::uint64 volume_;
  float real_time_rate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_public_5fmessage_2eproto();
  friend void protobuf_AssignDesc_public_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_public_5fmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MidAbnormalMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgMask

// optional uint64 mask = 1;
inline bool MsgMask::has_mask() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgMask::set_has_mask() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgMask::clear_has_mask() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgMask::clear_mask() {
  mask_ = GOOGLE_ULONGLONG(0);
  clear_has_mask();
}
inline ::google::protobuf::uint64 MsgMask::mask() const {
  return mask_;
}
inline void MsgMask::set_mask(::google::protobuf::uint64 value) {
  set_has_mask();
  mask_ = value;
}

// optional uint64 mask2 = 2;
inline bool MsgMask::has_mask2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgMask::set_has_mask2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgMask::clear_has_mask2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgMask::clear_mask2() {
  mask2_ = GOOGLE_ULONGLONG(0);
  clear_has_mask2();
}
inline ::google::protobuf::uint64 MsgMask::mask2() const {
  return mask2_;
}
inline void MsgMask::set_mask2(::google::protobuf::uint64 value) {
  set_has_mask2();
  mask2_ = value;
}

// -------------------------------------------------------------------

// StockCodeTable

// required string stock_code = 1;
inline bool StockCodeTable::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockCodeTable::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockCodeTable::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockCodeTable::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& StockCodeTable::stock_code() const {
  return *stock_code_;
}
inline void StockCodeTable::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void StockCodeTable::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void StockCodeTable::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockCodeTable::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* StockCodeTable::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stock_name = 2;
inline bool StockCodeTable::has_stock_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockCodeTable::set_has_stock_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockCodeTable::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockCodeTable::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& StockCodeTable::stock_name() const {
  return *stock_name_;
}
inline void StockCodeTable::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void StockCodeTable::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void StockCodeTable::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockCodeTable::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* StockCodeTable::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stock_type = 3;
inline bool StockCodeTable::has_stock_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockCodeTable::set_has_stock_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockCodeTable::clear_has_stock_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockCodeTable::clear_stock_type() {
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    stock_type_->clear();
  }
  clear_has_stock_type();
}
inline const ::std::string& StockCodeTable::stock_type() const {
  return *stock_type_;
}
inline void StockCodeTable::set_stock_type(const ::std::string& value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void StockCodeTable::set_stock_type(const char* value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void StockCodeTable::set_stock_type(const char* value, size_t size) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockCodeTable::mutable_stock_type() {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  return stock_type_;
}
inline ::std::string* StockCodeTable::release_stock_type() {
  clear_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_type_;
    stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 deal_status = 4;
inline bool StockCodeTable::has_deal_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockCodeTable::set_has_deal_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockCodeTable::clear_has_deal_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockCodeTable::clear_deal_status() {
  deal_status_ = 0;
  clear_has_deal_status();
}
inline ::google::protobuf::int32 StockCodeTable::deal_status() const {
  return deal_status_;
}
inline void StockCodeTable::set_deal_status(::google::protobuf::int32 value) {
  set_has_deal_status();
  deal_status_ = value;
}

// -------------------------------------------------------------------

// UserPermissionItem

// optional int32 pid = 1;
inline bool UserPermissionItem::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPermissionItem::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPermissionItem::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPermissionItem::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 UserPermissionItem::pid() const {
  return pid_;
}
inline void UserPermissionItem::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional int32 begin_time = 2;
inline bool UserPermissionItem::has_begin_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPermissionItem::set_has_begin_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPermissionItem::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPermissionItem::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
}
inline ::google::protobuf::int32 UserPermissionItem::begin_time() const {
  return begin_time_;
}
inline void UserPermissionItem::set_begin_time(::google::protobuf::int32 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional int32 end_time = 3;
inline bool UserPermissionItem::has_end_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPermissionItem::set_has_end_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPermissionItem::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPermissionItem::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline ::google::protobuf::int32 UserPermissionItem::end_time() const {
  return end_time_;
}
inline void UserPermissionItem::set_end_time(::google::protobuf::int32 value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// UserPermissionInfo

// repeated .QuoteProto.UserPermissionItem permissions = 1;
inline int UserPermissionInfo::permissions_size() const {
  return permissions_.size();
}
inline void UserPermissionInfo::clear_permissions() {
  permissions_.Clear();
}
inline const ::QuoteProto::UserPermissionItem& UserPermissionInfo::permissions(int index) const {
  return permissions_.Get(index);
}
inline ::QuoteProto::UserPermissionItem* UserPermissionInfo::mutable_permissions(int index) {
  return permissions_.Mutable(index);
}
inline ::QuoteProto::UserPermissionItem* UserPermissionInfo::add_permissions() {
  return permissions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserPermissionItem >&
UserPermissionInfo::permissions() const {
  return permissions_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserPermissionItem >*
UserPermissionInfo::mutable_permissions() {
  return &permissions_;
}

// -------------------------------------------------------------------

// StockBase

// optional float rate = 1;
inline bool StockBase::has_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockBase::set_has_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockBase::clear_has_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockBase::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float StockBase::rate() const {
  return rate_;
}
inline void StockBase::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional uint32 last_pice = 2;
inline bool StockBase::has_last_pice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockBase::set_has_last_pice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockBase::clear_has_last_pice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockBase::clear_last_pice() {
  last_pice_ = 0u;
  clear_has_last_pice();
}
inline ::google::protobuf::uint32 StockBase::last_pice() const {
  return last_pice_;
}
inline void StockBase::set_last_pice(::google::protobuf::uint32 value) {
  set_has_last_pice();
  last_pice_ = value;
}

// optional float ratio = 4;
inline bool StockBase::has_ratio() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockBase::set_has_ratio() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockBase::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockBase::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline float StockBase::ratio() const {
  return ratio_;
}
inline void StockBase::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
}

// optional float pbv = 5;
inline bool StockBase::has_pbv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockBase::set_has_pbv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockBase::clear_has_pbv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockBase::clear_pbv() {
  pbv_ = 0;
  clear_has_pbv();
}
inline float StockBase::pbv() const {
  return pbv_;
}
inline void StockBase::set_pbv(float value) {
  set_has_pbv();
  pbv_ = value;
}

// optional uint32 trading_day = 6;
inline bool StockBase::has_trading_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockBase::set_has_trading_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockBase::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockBase::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 StockBase::trading_day() const {
  return trading_day_;
}
inline void StockBase::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// optional uint32 pre_close_price = 7;
inline bool StockBase::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockBase::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockBase::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockBase::clear_pre_close_price() {
  pre_close_price_ = 0u;
  clear_has_pre_close_price();
}
inline ::google::protobuf::uint32 StockBase::pre_close_price() const {
  return pre_close_price_;
}
inline void StockBase::set_pre_close_price(::google::protobuf::uint32 value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}

// optional uint32 open_price = 8;
inline bool StockBase::has_open_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockBase::set_has_open_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockBase::clear_has_open_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockBase::clear_open_price() {
  open_price_ = 0u;
  clear_has_open_price();
}
inline ::google::protobuf::uint32 StockBase::open_price() const {
  return open_price_;
}
inline void StockBase::set_open_price(::google::protobuf::uint32 value) {
  set_has_open_price();
  open_price_ = value;
}

// optional uint32 highest_price = 9;
inline bool StockBase::has_highest_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockBase::set_has_highest_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockBase::clear_has_highest_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockBase::clear_highest_price() {
  highest_price_ = 0u;
  clear_has_highest_price();
}
inline ::google::protobuf::uint32 StockBase::highest_price() const {
  return highest_price_;
}
inline void StockBase::set_highest_price(::google::protobuf::uint32 value) {
  set_has_highest_price();
  highest_price_ = value;
}

// optional uint32 lowest_price = 10;
inline bool StockBase::has_lowest_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockBase::set_has_lowest_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockBase::clear_has_lowest_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockBase::clear_lowest_price() {
  lowest_price_ = 0u;
  clear_has_lowest_price();
}
inline ::google::protobuf::uint32 StockBase::lowest_price() const {
  return lowest_price_;
}
inline void StockBase::set_lowest_price(::google::protobuf::uint32 value) {
  set_has_lowest_price();
  lowest_price_ = value;
}

// optional uint64 volume = 11;
inline bool StockBase::has_volume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockBase::set_has_volume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockBase::clear_has_volume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockBase::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 StockBase::volume() const {
  return volume_;
}
inline void StockBase::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint64 cur_volume = 12;
inline bool StockBase::has_cur_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockBase::set_has_cur_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockBase::clear_has_cur_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockBase::clear_cur_volume() {
  cur_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_volume();
}
inline ::google::protobuf::uint64 StockBase::cur_volume() const {
  return cur_volume_;
}
inline void StockBase::set_cur_volume(::google::protobuf::uint64 value) {
  set_has_cur_volume();
  cur_volume_ = value;
}

// optional float turnover_rate = 13;
inline bool StockBase::has_turnover_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockBase::set_has_turnover_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockBase::clear_has_turnover_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockBase::clear_turnover_rate() {
  turnover_rate_ = 0;
  clear_has_turnover_rate();
}
inline float StockBase::turnover_rate() const {
  return turnover_rate_;
}
inline void StockBase::set_turnover_rate(float value) {
  set_has_turnover_rate();
  turnover_rate_ = value;
}

// optional float pes = 14;
inline bool StockBase::has_pes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockBase::set_has_pes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockBase::clear_has_pes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockBase::clear_pes() {
  pes_ = 0;
  clear_has_pes();
}
inline float StockBase::pes() const {
  return pes_;
}
inline void StockBase::set_pes(float value) {
  set_has_pes();
  pes_ = value;
}

// optional uint64 turnover = 15;
inline bool StockBase::has_turnover() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockBase::set_has_turnover() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockBase::clear_has_turnover() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockBase::clear_turnover() {
  turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::uint64 StockBase::turnover() const {
  return turnover_;
}
inline void StockBase::set_turnover(::google::protobuf::uint64 value) {
  set_has_turnover();
  turnover_ = value;
}

// optional uint32 avg_price = 16;
inline bool StockBase::has_avg_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockBase::set_has_avg_price() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockBase::clear_has_avg_price() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockBase::clear_avg_price() {
  avg_price_ = 0u;
  clear_has_avg_price();
}
inline ::google::protobuf::uint32 StockBase::avg_price() const {
  return avg_price_;
}
inline void StockBase::set_avg_price(::google::protobuf::uint32 value) {
  set_has_avg_price();
  avg_price_ = value;
}

// optional uint32 update_time = 17;
inline bool StockBase::has_update_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockBase::set_has_update_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockBase::clear_has_update_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockBase::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 StockBase::update_time() const {
  return update_time_;
}
inline void StockBase::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// optional float committee = 18;
inline bool StockBase::has_committee() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockBase::set_has_committee() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockBase::clear_has_committee() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockBase::clear_committee() {
  committee_ = 0;
  clear_has_committee();
}
inline float StockBase::committee() const {
  return committee_;
}
inline void StockBase::set_committee(float value) {
  set_has_committee();
  committee_ = value;
}

// optional uint64 cir_stock = 19;
inline bool StockBase::has_cir_stock() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StockBase::set_has_cir_stock() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StockBase::clear_has_cir_stock() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StockBase::clear_cir_stock() {
  cir_stock_ = GOOGLE_ULONGLONG(0);
  clear_has_cir_stock();
}
inline ::google::protobuf::uint64 StockBase::cir_stock() const {
  return cir_stock_;
}
inline void StockBase::set_cir_stock(::google::protobuf::uint64 value) {
  set_has_cir_stock();
  cir_stock_ = value;
}

// optional uint64 tot_stock = 20;
inline bool StockBase::has_tot_stock() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StockBase::set_has_tot_stock() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StockBase::clear_has_tot_stock() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StockBase::clear_tot_stock() {
  tot_stock_ = GOOGLE_ULONGLONG(0);
  clear_has_tot_stock();
}
inline ::google::protobuf::uint64 StockBase::tot_stock() const {
  return tot_stock_;
}
inline void StockBase::set_tot_stock(::google::protobuf::uint64 value) {
  set_has_tot_stock();
  tot_stock_ = value;
}

// optional uint64 cir_value = 21;
inline bool StockBase::has_cir_value() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StockBase::set_has_cir_value() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StockBase::clear_has_cir_value() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StockBase::clear_cir_value() {
  cir_value_ = GOOGLE_ULONGLONG(0);
  clear_has_cir_value();
}
inline ::google::protobuf::uint64 StockBase::cir_value() const {
  return cir_value_;
}
inline void StockBase::set_cir_value(::google::protobuf::uint64 value) {
  set_has_cir_value();
  cir_value_ = value;
}

// optional uint64 tot_value = 22;
inline bool StockBase::has_tot_value() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void StockBase::set_has_tot_value() {
  _has_bits_[0] |= 0x00100000u;
}
inline void StockBase::clear_has_tot_value() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void StockBase::clear_tot_value() {
  tot_value_ = GOOGLE_ULONGLONG(0);
  clear_has_tot_value();
}
inline ::google::protobuf::uint64 StockBase::tot_value() const {
  return tot_value_;
}
inline void StockBase::set_tot_value(::google::protobuf::uint64 value) {
  set_has_tot_value();
  tot_value_ = value;
}

// optional uint64 np_volume = 23;
inline bool StockBase::has_np_volume() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void StockBase::set_has_np_volume() {
  _has_bits_[0] |= 0x00200000u;
}
inline void StockBase::clear_has_np_volume() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void StockBase::clear_np_volume() {
  np_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_np_volume();
}
inline ::google::protobuf::uint64 StockBase::np_volume() const {
  return np_volume_;
}
inline void StockBase::set_np_volume(::google::protobuf::uint64 value) {
  set_has_np_volume();
  np_volume_ = value;
}

// optional uint64 wp_volume = 24;
inline bool StockBase::has_wp_volume() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void StockBase::set_has_wp_volume() {
  _has_bits_[0] |= 0x00400000u;
}
inline void StockBase::clear_has_wp_volume() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void StockBase::clear_wp_volume() {
  wp_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_wp_volume();
}
inline ::google::protobuf::uint64 StockBase::wp_volume() const {
  return wp_volume_;
}
inline void StockBase::set_wp_volume(::google::protobuf::uint64 value) {
  set_has_wp_volume();
  wp_volume_ = value;
}

// optional uint32 trade_status = 25;
inline bool StockBase::has_trade_status() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void StockBase::set_has_trade_status() {
  _has_bits_[0] |= 0x00800000u;
}
inline void StockBase::clear_has_trade_status() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void StockBase::clear_trade_status() {
  trade_status_ = 0u;
  clear_has_trade_status();
}
inline ::google::protobuf::uint32 StockBase::trade_status() const {
  return trade_status_;
}
inline void StockBase::set_trade_status(::google::protobuf::uint32 value) {
  set_has_trade_status();
  trade_status_ = value;
}

// optional int64 buy_sell_buy = 26;
inline bool StockBase::has_buy_sell_buy() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void StockBase::set_has_buy_sell_buy() {
  _has_bits_[0] |= 0x01000000u;
}
inline void StockBase::clear_has_buy_sell_buy() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void StockBase::clear_buy_sell_buy() {
  buy_sell_buy_ = GOOGLE_LONGLONG(0);
  clear_has_buy_sell_buy();
}
inline ::google::protobuf::int64 StockBase::buy_sell_buy() const {
  return buy_sell_buy_;
}
inline void StockBase::set_buy_sell_buy(::google::protobuf::int64 value) {
  set_has_buy_sell_buy();
  buy_sell_buy_ = value;
}

// optional uint64 avg_stock = 27;
inline bool StockBase::has_avg_stock() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void StockBase::set_has_avg_stock() {
  _has_bits_[0] |= 0x02000000u;
}
inline void StockBase::clear_has_avg_stock() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void StockBase::clear_avg_stock() {
  avg_stock_ = GOOGLE_ULONGLONG(0);
  clear_has_avg_stock();
}
inline ::google::protobuf::uint64 StockBase::avg_stock() const {
  return avg_stock_;
}
inline void StockBase::set_avg_stock(::google::protobuf::uint64 value) {
  set_has_avg_stock();
  avg_stock_ = value;
}

// optional uint32 rise = 28;
inline bool StockBase::has_rise() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void StockBase::set_has_rise() {
  _has_bits_[0] |= 0x04000000u;
}
inline void StockBase::clear_has_rise() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void StockBase::clear_rise() {
  rise_ = 0u;
  clear_has_rise();
}
inline ::google::protobuf::uint32 StockBase::rise() const {
  return rise_;
}
inline void StockBase::set_rise(::google::protobuf::uint32 value) {
  set_has_rise();
  rise_ = value;
}

// optional uint32 fall = 29;
inline bool StockBase::has_fall() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void StockBase::set_has_fall() {
  _has_bits_[0] |= 0x08000000u;
}
inline void StockBase::clear_has_fall() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void StockBase::clear_fall() {
  fall_ = 0u;
  clear_has_fall();
}
inline ::google::protobuf::uint32 StockBase::fall() const {
  return fall_;
}
inline void StockBase::set_fall(::google::protobuf::uint32 value) {
  set_has_fall();
  fall_ = value;
}

// optional uint32 flat = 30;
inline bool StockBase::has_flat() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void StockBase::set_has_flat() {
  _has_bits_[0] |= 0x10000000u;
}
inline void StockBase::clear_has_flat() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void StockBase::clear_flat() {
  flat_ = 0u;
  clear_has_flat();
}
inline ::google::protobuf::uint32 StockBase::flat() const {
  return flat_;
}
inline void StockBase::set_flat(::google::protobuf::uint32 value) {
  set_has_flat();
  flat_ = value;
}

// optional float ro = 32;
inline bool StockBase::has_ro() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void StockBase::set_has_ro() {
  _has_bits_[0] |= 0x20000000u;
}
inline void StockBase::clear_has_ro() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void StockBase::clear_ro() {
  ro_ = 0;
  clear_has_ro();
}
inline float StockBase::ro() const {
  return ro_;
}
inline void StockBase::set_ro(float value) {
  set_has_ro();
  ro_ = value;
}

// optional float roe = 33;
inline bool StockBase::has_roe() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void StockBase::set_has_roe() {
  _has_bits_[0] |= 0x40000000u;
}
inline void StockBase::clear_has_roe() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void StockBase::clear_roe() {
  roe_ = 0;
  clear_has_roe();
}
inline float StockBase::roe() const {
  return roe_;
}
inline void StockBase::set_roe(float value) {
  set_has_roe();
  roe_ = value;
}

// optional float profit = 34;
inline bool StockBase::has_profit() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void StockBase::set_has_profit() {
  _has_bits_[0] |= 0x80000000u;
}
inline void StockBase::clear_has_profit() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void StockBase::clear_profit() {
  profit_ = 0;
  clear_has_profit();
}
inline float StockBase::profit() const {
  return profit_;
}
inline void StockBase::set_profit(float value) {
  set_has_profit();
  profit_ = value;
}

// optional uint32 upper_limit_rice = 35;
inline bool StockBase::has_upper_limit_rice() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void StockBase::set_has_upper_limit_rice() {
  _has_bits_[1] |= 0x00000001u;
}
inline void StockBase::clear_has_upper_limit_rice() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void StockBase::clear_upper_limit_rice() {
  upper_limit_rice_ = 0u;
  clear_has_upper_limit_rice();
}
inline ::google::protobuf::uint32 StockBase::upper_limit_rice() const {
  return upper_limit_rice_;
}
inline void StockBase::set_upper_limit_rice(::google::protobuf::uint32 value) {
  set_has_upper_limit_rice();
  upper_limit_rice_ = value;
}

// optional uint32 down_limit_price = 36;
inline bool StockBase::has_down_limit_price() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void StockBase::set_has_down_limit_price() {
  _has_bits_[1] |= 0x00000002u;
}
inline void StockBase::clear_has_down_limit_price() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void StockBase::clear_down_limit_price() {
  down_limit_price_ = 0u;
  clear_has_down_limit_price();
}
inline ::google::protobuf::uint32 StockBase::down_limit_price() const {
  return down_limit_price_;
}
inline void StockBase::set_down_limit_price(::google::protobuf::uint32 value) {
  set_has_down_limit_price();
  down_limit_price_ = value;
}

// optional bool clear_sig = 37;
inline bool StockBase::has_clear_sig() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void StockBase::set_has_clear_sig() {
  _has_bits_[1] |= 0x00000004u;
}
inline void StockBase::clear_has_clear_sig() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void StockBase::clear_clear_sig() {
  clear_sig_ = false;
  clear_has_clear_sig();
}
inline bool StockBase::clear_sig() const {
  return clear_sig_;
}
inline void StockBase::set_clear_sig(bool value) {
  set_has_clear_sig();
  clear_sig_ = value;
}

// optional float ped = 38;
inline bool StockBase::has_ped() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void StockBase::set_has_ped() {
  _has_bits_[1] |= 0x00000008u;
}
inline void StockBase::clear_has_ped() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void StockBase::clear_ped() {
  ped_ = 0;
  clear_has_ped();
}
inline float StockBase::ped() const {
  return ped_;
}
inline void StockBase::set_ped(float value) {
  set_has_ped();
  ped_ = value;
}

// optional uint32 buy_sell = 39;
inline bool StockBase::has_buy_sell() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void StockBase::set_has_buy_sell() {
  _has_bits_[1] |= 0x00000010u;
}
inline void StockBase::clear_has_buy_sell() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void StockBase::clear_buy_sell() {
  buy_sell_ = 0u;
  clear_has_buy_sell();
}
inline ::google::protobuf::uint32 StockBase::buy_sell() const {
  return buy_sell_;
}
inline void StockBase::set_buy_sell(::google::protobuf::uint32 value) {
  set_has_buy_sell();
  buy_sell_ = value;
}

// optional float speed_rate = 42;
inline bool StockBase::has_speed_rate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void StockBase::set_has_speed_rate() {
  _has_bits_[1] |= 0x00000020u;
}
inline void StockBase::clear_has_speed_rate() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void StockBase::clear_speed_rate() {
  speed_rate_ = 0;
  clear_has_speed_rate();
}
inline float StockBase::speed_rate() const {
  return speed_rate_;
}
inline void StockBase::set_speed_rate(float value) {
  set_has_speed_rate();
  speed_rate_ = value;
}

// optional float three_rate = 43;
inline bool StockBase::has_three_rate() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void StockBase::set_has_three_rate() {
  _has_bits_[1] |= 0x00000040u;
}
inline void StockBase::clear_has_three_rate() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void StockBase::clear_three_rate() {
  three_rate_ = 0;
  clear_has_three_rate();
}
inline float StockBase::three_rate() const {
  return three_rate_;
}
inline void StockBase::set_three_rate(float value) {
  set_has_three_rate();
  three_rate_ = value;
}

// optional float three_tuv_rate = 44;
inline bool StockBase::has_three_tuv_rate() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void StockBase::set_has_three_tuv_rate() {
  _has_bits_[1] |= 0x00000080u;
}
inline void StockBase::clear_has_three_tuv_rate() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void StockBase::clear_three_tuv_rate() {
  three_tuv_rate_ = 0;
  clear_has_three_tuv_rate();
}
inline float StockBase::three_tuv_rate() const {
  return three_tuv_rate_;
}
inline void StockBase::set_three_tuv_rate(float value) {
  set_has_three_tuv_rate();
  three_tuv_rate_ = value;
}

// optional float five_tuv_rate = 45;
inline bool StockBase::has_five_tuv_rate() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void StockBase::set_has_five_tuv_rate() {
  _has_bits_[1] |= 0x00000100u;
}
inline void StockBase::clear_has_five_tuv_rate() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void StockBase::clear_five_tuv_rate() {
  five_tuv_rate_ = 0;
  clear_has_five_tuv_rate();
}
inline float StockBase::five_tuv_rate() const {
  return five_tuv_rate_;
}
inline void StockBase::set_five_tuv_rate(float value) {
  set_has_five_tuv_rate();
  five_tuv_rate_ = value;
}

// optional uint64 detail_volume = 46;
inline bool StockBase::has_detail_volume() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void StockBase::set_has_detail_volume() {
  _has_bits_[1] |= 0x00000200u;
}
inline void StockBase::clear_has_detail_volume() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void StockBase::clear_detail_volume() {
  detail_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_detail_volume();
}
inline ::google::protobuf::uint64 StockBase::detail_volume() const {
  return detail_volume_;
}
inline void StockBase::set_detail_volume(::google::protobuf::uint64 value) {
  set_has_detail_volume();
  detail_volume_ = value;
}

// optional string block_name = 47;
inline bool StockBase::has_block_name() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void StockBase::set_has_block_name() {
  _has_bits_[1] |= 0x00000400u;
}
inline void StockBase::clear_has_block_name() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void StockBase::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& StockBase::block_name() const {
  return *block_name_;
}
inline void StockBase::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void StockBase::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void StockBase::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockBase::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* StockBase::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 rise_day_num = 48;
inline bool StockBase::has_rise_day_num() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void StockBase::set_has_rise_day_num() {
  _has_bits_[1] |= 0x00000800u;
}
inline void StockBase::clear_has_rise_day_num() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void StockBase::clear_rise_day_num() {
  rise_day_num_ = 0u;
  clear_has_rise_day_num();
}
inline ::google::protobuf::uint32 StockBase::rise_day_num() const {
  return rise_day_num_;
}
inline void StockBase::set_rise_day_num(::google::protobuf::uint32 value) {
  set_has_rise_day_num();
  rise_day_num_ = value;
}

// optional float second_rate = 49;
inline bool StockBase::has_second_rate() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void StockBase::set_has_second_rate() {
  _has_bits_[1] |= 0x00001000u;
}
inline void StockBase::clear_has_second_rate() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void StockBase::clear_second_rate() {
  second_rate_ = 0;
  clear_has_second_rate();
}
inline float StockBase::second_rate() const {
  return second_rate_;
}
inline void StockBase::set_second_rate(float value) {
  set_has_second_rate();
  second_rate_ = value;
}

// optional float five_rate = 50;
inline bool StockBase::has_five_rate() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void StockBase::set_has_five_rate() {
  _has_bits_[1] |= 0x00002000u;
}
inline void StockBase::clear_has_five_rate() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void StockBase::clear_five_rate() {
  five_rate_ = 0;
  clear_has_five_rate();
}
inline float StockBase::five_rate() const {
  return five_rate_;
}
inline void StockBase::set_five_rate(float value) {
  set_has_five_rate();
  five_rate_ = value;
}

// optional uint32 limit_up = 51;
inline bool StockBase::has_limit_up() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void StockBase::set_has_limit_up() {
  _has_bits_[1] |= 0x00004000u;
}
inline void StockBase::clear_has_limit_up() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void StockBase::clear_limit_up() {
  limit_up_ = 0u;
  clear_has_limit_up();
}
inline ::google::protobuf::uint32 StockBase::limit_up() const {
  return limit_up_;
}
inline void StockBase::set_limit_up(::google::protobuf::uint32 value) {
  set_has_limit_up();
  limit_up_ = value;
}

// -------------------------------------------------------------------

// StockMmp

// required uint32 buy_price1 = 1;
inline bool StockMmp::has_buy_price1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockMmp::set_has_buy_price1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockMmp::clear_has_buy_price1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockMmp::clear_buy_price1() {
  buy_price1_ = 0u;
  clear_has_buy_price1();
}
inline ::google::protobuf::uint32 StockMmp::buy_price1() const {
  return buy_price1_;
}
inline void StockMmp::set_buy_price1(::google::protobuf::uint32 value) {
  set_has_buy_price1();
  buy_price1_ = value;
}

// required uint32 buy_price2 = 2;
inline bool StockMmp::has_buy_price2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockMmp::set_has_buy_price2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockMmp::clear_has_buy_price2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockMmp::clear_buy_price2() {
  buy_price2_ = 0u;
  clear_has_buy_price2();
}
inline ::google::protobuf::uint32 StockMmp::buy_price2() const {
  return buy_price2_;
}
inline void StockMmp::set_buy_price2(::google::protobuf::uint32 value) {
  set_has_buy_price2();
  buy_price2_ = value;
}

// required uint32 buy_price3 = 3;
inline bool StockMmp::has_buy_price3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockMmp::set_has_buy_price3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockMmp::clear_has_buy_price3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockMmp::clear_buy_price3() {
  buy_price3_ = 0u;
  clear_has_buy_price3();
}
inline ::google::protobuf::uint32 StockMmp::buy_price3() const {
  return buy_price3_;
}
inline void StockMmp::set_buy_price3(::google::protobuf::uint32 value) {
  set_has_buy_price3();
  buy_price3_ = value;
}

// required uint32 buy_price4 = 4;
inline bool StockMmp::has_buy_price4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockMmp::set_has_buy_price4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockMmp::clear_has_buy_price4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockMmp::clear_buy_price4() {
  buy_price4_ = 0u;
  clear_has_buy_price4();
}
inline ::google::protobuf::uint32 StockMmp::buy_price4() const {
  return buy_price4_;
}
inline void StockMmp::set_buy_price4(::google::protobuf::uint32 value) {
  set_has_buy_price4();
  buy_price4_ = value;
}

// required uint32 buy_price5 = 5;
inline bool StockMmp::has_buy_price5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockMmp::set_has_buy_price5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockMmp::clear_has_buy_price5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockMmp::clear_buy_price5() {
  buy_price5_ = 0u;
  clear_has_buy_price5();
}
inline ::google::protobuf::uint32 StockMmp::buy_price5() const {
  return buy_price5_;
}
inline void StockMmp::set_buy_price5(::google::protobuf::uint32 value) {
  set_has_buy_price5();
  buy_price5_ = value;
}

// required uint32 buy_volume1 = 6;
inline bool StockMmp::has_buy_volume1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockMmp::set_has_buy_volume1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockMmp::clear_has_buy_volume1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockMmp::clear_buy_volume1() {
  buy_volume1_ = 0u;
  clear_has_buy_volume1();
}
inline ::google::protobuf::uint32 StockMmp::buy_volume1() const {
  return buy_volume1_;
}
inline void StockMmp::set_buy_volume1(::google::protobuf::uint32 value) {
  set_has_buy_volume1();
  buy_volume1_ = value;
}

// required uint32 buy_volume2 = 7;
inline bool StockMmp::has_buy_volume2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockMmp::set_has_buy_volume2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockMmp::clear_has_buy_volume2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockMmp::clear_buy_volume2() {
  buy_volume2_ = 0u;
  clear_has_buy_volume2();
}
inline ::google::protobuf::uint32 StockMmp::buy_volume2() const {
  return buy_volume2_;
}
inline void StockMmp::set_buy_volume2(::google::protobuf::uint32 value) {
  set_has_buy_volume2();
  buy_volume2_ = value;
}

// required uint32 buy_volume3 = 8;
inline bool StockMmp::has_buy_volume3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockMmp::set_has_buy_volume3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockMmp::clear_has_buy_volume3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockMmp::clear_buy_volume3() {
  buy_volume3_ = 0u;
  clear_has_buy_volume3();
}
inline ::google::protobuf::uint32 StockMmp::buy_volume3() const {
  return buy_volume3_;
}
inline void StockMmp::set_buy_volume3(::google::protobuf::uint32 value) {
  set_has_buy_volume3();
  buy_volume3_ = value;
}

// required uint32 buy_volume4 = 9;
inline bool StockMmp::has_buy_volume4() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockMmp::set_has_buy_volume4() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockMmp::clear_has_buy_volume4() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockMmp::clear_buy_volume4() {
  buy_volume4_ = 0u;
  clear_has_buy_volume4();
}
inline ::google::protobuf::uint32 StockMmp::buy_volume4() const {
  return buy_volume4_;
}
inline void StockMmp::set_buy_volume4(::google::protobuf::uint32 value) {
  set_has_buy_volume4();
  buy_volume4_ = value;
}

// required uint32 buy_volume5 = 10;
inline bool StockMmp::has_buy_volume5() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockMmp::set_has_buy_volume5() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockMmp::clear_has_buy_volume5() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockMmp::clear_buy_volume5() {
  buy_volume5_ = 0u;
  clear_has_buy_volume5();
}
inline ::google::protobuf::uint32 StockMmp::buy_volume5() const {
  return buy_volume5_;
}
inline void StockMmp::set_buy_volume5(::google::protobuf::uint32 value) {
  set_has_buy_volume5();
  buy_volume5_ = value;
}

// required uint32 sell_price1 = 11;
inline bool StockMmp::has_sell_price1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockMmp::set_has_sell_price1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockMmp::clear_has_sell_price1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockMmp::clear_sell_price1() {
  sell_price1_ = 0u;
  clear_has_sell_price1();
}
inline ::google::protobuf::uint32 StockMmp::sell_price1() const {
  return sell_price1_;
}
inline void StockMmp::set_sell_price1(::google::protobuf::uint32 value) {
  set_has_sell_price1();
  sell_price1_ = value;
}

// required uint32 sell_price2 = 12;
inline bool StockMmp::has_sell_price2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockMmp::set_has_sell_price2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockMmp::clear_has_sell_price2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockMmp::clear_sell_price2() {
  sell_price2_ = 0u;
  clear_has_sell_price2();
}
inline ::google::protobuf::uint32 StockMmp::sell_price2() const {
  return sell_price2_;
}
inline void StockMmp::set_sell_price2(::google::protobuf::uint32 value) {
  set_has_sell_price2();
  sell_price2_ = value;
}

// required uint32 sell_price3 = 13;
inline bool StockMmp::has_sell_price3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockMmp::set_has_sell_price3() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockMmp::clear_has_sell_price3() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockMmp::clear_sell_price3() {
  sell_price3_ = 0u;
  clear_has_sell_price3();
}
inline ::google::protobuf::uint32 StockMmp::sell_price3() const {
  return sell_price3_;
}
inline void StockMmp::set_sell_price3(::google::protobuf::uint32 value) {
  set_has_sell_price3();
  sell_price3_ = value;
}

// required uint32 sell_price4 = 14;
inline bool StockMmp::has_sell_price4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockMmp::set_has_sell_price4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockMmp::clear_has_sell_price4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockMmp::clear_sell_price4() {
  sell_price4_ = 0u;
  clear_has_sell_price4();
}
inline ::google::protobuf::uint32 StockMmp::sell_price4() const {
  return sell_price4_;
}
inline void StockMmp::set_sell_price4(::google::protobuf::uint32 value) {
  set_has_sell_price4();
  sell_price4_ = value;
}

// required uint32 sell_price5 = 15;
inline bool StockMmp::has_sell_price5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockMmp::set_has_sell_price5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockMmp::clear_has_sell_price5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockMmp::clear_sell_price5() {
  sell_price5_ = 0u;
  clear_has_sell_price5();
}
inline ::google::protobuf::uint32 StockMmp::sell_price5() const {
  return sell_price5_;
}
inline void StockMmp::set_sell_price5(::google::protobuf::uint32 value) {
  set_has_sell_price5();
  sell_price5_ = value;
}

// required uint32 sell_volume1 = 16;
inline bool StockMmp::has_sell_volume1() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockMmp::set_has_sell_volume1() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockMmp::clear_has_sell_volume1() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockMmp::clear_sell_volume1() {
  sell_volume1_ = 0u;
  clear_has_sell_volume1();
}
inline ::google::protobuf::uint32 StockMmp::sell_volume1() const {
  return sell_volume1_;
}
inline void StockMmp::set_sell_volume1(::google::protobuf::uint32 value) {
  set_has_sell_volume1();
  sell_volume1_ = value;
}

// required uint32 sell_volume2 = 17;
inline bool StockMmp::has_sell_volume2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void StockMmp::set_has_sell_volume2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void StockMmp::clear_has_sell_volume2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void StockMmp::clear_sell_volume2() {
  sell_volume2_ = 0u;
  clear_has_sell_volume2();
}
inline ::google::protobuf::uint32 StockMmp::sell_volume2() const {
  return sell_volume2_;
}
inline void StockMmp::set_sell_volume2(::google::protobuf::uint32 value) {
  set_has_sell_volume2();
  sell_volume2_ = value;
}

// required uint32 sell_volume3 = 18;
inline bool StockMmp::has_sell_volume3() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void StockMmp::set_has_sell_volume3() {
  _has_bits_[0] |= 0x00020000u;
}
inline void StockMmp::clear_has_sell_volume3() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void StockMmp::clear_sell_volume3() {
  sell_volume3_ = 0u;
  clear_has_sell_volume3();
}
inline ::google::protobuf::uint32 StockMmp::sell_volume3() const {
  return sell_volume3_;
}
inline void StockMmp::set_sell_volume3(::google::protobuf::uint32 value) {
  set_has_sell_volume3();
  sell_volume3_ = value;
}

// required uint32 sell_volume4 = 19;
inline bool StockMmp::has_sell_volume4() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void StockMmp::set_has_sell_volume4() {
  _has_bits_[0] |= 0x00040000u;
}
inline void StockMmp::clear_has_sell_volume4() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void StockMmp::clear_sell_volume4() {
  sell_volume4_ = 0u;
  clear_has_sell_volume4();
}
inline ::google::protobuf::uint32 StockMmp::sell_volume4() const {
  return sell_volume4_;
}
inline void StockMmp::set_sell_volume4(::google::protobuf::uint32 value) {
  set_has_sell_volume4();
  sell_volume4_ = value;
}

// required uint32 sell_volume5 = 20;
inline bool StockMmp::has_sell_volume5() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void StockMmp::set_has_sell_volume5() {
  _has_bits_[0] |= 0x00080000u;
}
inline void StockMmp::clear_has_sell_volume5() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void StockMmp::clear_sell_volume5() {
  sell_volume5_ = 0u;
  clear_has_sell_volume5();
}
inline ::google::protobuf::uint32 StockMmp::sell_volume5() const {
  return sell_volume5_;
}
inline void StockMmp::set_sell_volume5(::google::protobuf::uint32 value) {
  set_has_sell_volume5();
  sell_volume5_ = value;
}

// -------------------------------------------------------------------

// StockRiseFallInfo

// optional string block_code = 1;
inline bool StockRiseFallInfo::has_block_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockRiseFallInfo::set_has_block_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockRiseFallInfo::clear_has_block_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockRiseFallInfo::clear_block_code() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    block_code_->clear();
  }
  clear_has_block_code();
}
inline const ::std::string& StockRiseFallInfo::block_code() const {
  return *block_code_;
}
inline void StockRiseFallInfo::set_block_code(const ::std::string& value) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(value);
}
inline void StockRiseFallInfo::set_block_code(const char* value) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(value);
}
inline void StockRiseFallInfo::set_block_code(const char* value, size_t size) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockRiseFallInfo::mutable_block_code() {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  return block_code_;
}
inline ::std::string* StockRiseFallInfo::release_block_code() {
  clear_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_code_;
    block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string block_name = 2;
inline bool StockRiseFallInfo::has_block_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockRiseFallInfo::set_has_block_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockRiseFallInfo::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockRiseFallInfo::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& StockRiseFallInfo::block_name() const {
  return *block_name_;
}
inline void StockRiseFallInfo::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void StockRiseFallInfo::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void StockRiseFallInfo::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockRiseFallInfo::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* StockRiseFallInfo::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 greater_seven = 3;
inline bool StockRiseFallInfo::has_greater_seven() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockRiseFallInfo::set_has_greater_seven() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockRiseFallInfo::clear_has_greater_seven() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockRiseFallInfo::clear_greater_seven() {
  greater_seven_ = 0u;
  clear_has_greater_seven();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::greater_seven() const {
  return greater_seven_;
}
inline void StockRiseFallInfo::set_greater_seven(::google::protobuf::uint32 value) {
  set_has_greater_seven();
  greater_seven_ = value;
}

// optional uint32 up_five_seven = 4;
inline bool StockRiseFallInfo::has_up_five_seven() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockRiseFallInfo::set_has_up_five_seven() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockRiseFallInfo::clear_has_up_five_seven() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockRiseFallInfo::clear_up_five_seven() {
  up_five_seven_ = 0u;
  clear_has_up_five_seven();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::up_five_seven() const {
  return up_five_seven_;
}
inline void StockRiseFallInfo::set_up_five_seven(::google::protobuf::uint32 value) {
  set_has_up_five_seven();
  up_five_seven_ = value;
}

// optional uint32 up_two_five = 5;
inline bool StockRiseFallInfo::has_up_two_five() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockRiseFallInfo::set_has_up_two_five() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockRiseFallInfo::clear_has_up_two_five() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockRiseFallInfo::clear_up_two_five() {
  up_two_five_ = 0u;
  clear_has_up_two_five();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::up_two_five() const {
  return up_two_five_;
}
inline void StockRiseFallInfo::set_up_two_five(::google::protobuf::uint32 value) {
  set_has_up_two_five();
  up_two_five_ = value;
}

// optional uint32 up_zero_two = 6;
inline bool StockRiseFallInfo::has_up_zero_two() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockRiseFallInfo::set_has_up_zero_two() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockRiseFallInfo::clear_has_up_zero_two() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockRiseFallInfo::clear_up_zero_two() {
  up_zero_two_ = 0u;
  clear_has_up_zero_two();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::up_zero_two() const {
  return up_zero_two_;
}
inline void StockRiseFallInfo::set_up_zero_two(::google::protobuf::uint32 value) {
  set_has_up_zero_two();
  up_zero_two_ = value;
}

// optional uint32 down_zero_two = 7;
inline bool StockRiseFallInfo::has_down_zero_two() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockRiseFallInfo::set_has_down_zero_two() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockRiseFallInfo::clear_has_down_zero_two() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockRiseFallInfo::clear_down_zero_two() {
  down_zero_two_ = 0u;
  clear_has_down_zero_two();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::down_zero_two() const {
  return down_zero_two_;
}
inline void StockRiseFallInfo::set_down_zero_two(::google::protobuf::uint32 value) {
  set_has_down_zero_two();
  down_zero_two_ = value;
}

// optional uint32 down_two_five = 8;
inline bool StockRiseFallInfo::has_down_two_five() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StockRiseFallInfo::set_has_down_two_five() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StockRiseFallInfo::clear_has_down_two_five() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StockRiseFallInfo::clear_down_two_five() {
  down_two_five_ = 0u;
  clear_has_down_two_five();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::down_two_five() const {
  return down_two_five_;
}
inline void StockRiseFallInfo::set_down_two_five(::google::protobuf::uint32 value) {
  set_has_down_two_five();
  down_two_five_ = value;
}

// optional uint32 down_five_seven = 9;
inline bool StockRiseFallInfo::has_down_five_seven() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StockRiseFallInfo::set_has_down_five_seven() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StockRiseFallInfo::clear_has_down_five_seven() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StockRiseFallInfo::clear_down_five_seven() {
  down_five_seven_ = 0u;
  clear_has_down_five_seven();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::down_five_seven() const {
  return down_five_seven_;
}
inline void StockRiseFallInfo::set_down_five_seven(::google::protobuf::uint32 value) {
  set_has_down_five_seven();
  down_five_seven_ = value;
}

// optional uint32 less_seven = 10;
inline bool StockRiseFallInfo::has_less_seven() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StockRiseFallInfo::set_has_less_seven() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StockRiseFallInfo::clear_has_less_seven() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StockRiseFallInfo::clear_less_seven() {
  less_seven_ = 0u;
  clear_has_less_seven();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::less_seven() const {
  return less_seven_;
}
inline void StockRiseFallInfo::set_less_seven(::google::protobuf::uint32 value) {
  set_has_less_seven();
  less_seven_ = value;
}

// optional uint32 limit_up_num = 11;
inline bool StockRiseFallInfo::has_limit_up_num() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void StockRiseFallInfo::set_has_limit_up_num() {
  _has_bits_[0] |= 0x00000400u;
}
inline void StockRiseFallInfo::clear_has_limit_up_num() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void StockRiseFallInfo::clear_limit_up_num() {
  limit_up_num_ = 0u;
  clear_has_limit_up_num();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::limit_up_num() const {
  return limit_up_num_;
}
inline void StockRiseFallInfo::set_limit_up_num(::google::protobuf::uint32 value) {
  set_has_limit_up_num();
  limit_up_num_ = value;
}

// optional uint32 up_num = 12;
inline bool StockRiseFallInfo::has_up_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void StockRiseFallInfo::set_has_up_num() {
  _has_bits_[0] |= 0x00000800u;
}
inline void StockRiseFallInfo::clear_has_up_num() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void StockRiseFallInfo::clear_up_num() {
  up_num_ = 0u;
  clear_has_up_num();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::up_num() const {
  return up_num_;
}
inline void StockRiseFallInfo::set_up_num(::google::protobuf::uint32 value) {
  set_has_up_num();
  up_num_ = value;
}

// optional uint32 limit_down_num = 13;
inline bool StockRiseFallInfo::has_limit_down_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void StockRiseFallInfo::set_has_limit_down_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void StockRiseFallInfo::clear_has_limit_down_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void StockRiseFallInfo::clear_limit_down_num() {
  limit_down_num_ = 0u;
  clear_has_limit_down_num();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::limit_down_num() const {
  return limit_down_num_;
}
inline void StockRiseFallInfo::set_limit_down_num(::google::protobuf::uint32 value) {
  set_has_limit_down_num();
  limit_down_num_ = value;
}

// optional uint32 down_num = 14;
inline bool StockRiseFallInfo::has_down_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void StockRiseFallInfo::set_has_down_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void StockRiseFallInfo::clear_has_down_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void StockRiseFallInfo::clear_down_num() {
  down_num_ = 0u;
  clear_has_down_num();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::down_num() const {
  return down_num_;
}
inline void StockRiseFallInfo::set_down_num(::google::protobuf::uint32 value) {
  set_has_down_num();
  down_num_ = value;
}

// optional uint32 flat_num = 15;
inline bool StockRiseFallInfo::has_flat_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void StockRiseFallInfo::set_has_flat_num() {
  _has_bits_[0] |= 0x00004000u;
}
inline void StockRiseFallInfo::clear_has_flat_num() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void StockRiseFallInfo::clear_flat_num() {
  flat_num_ = 0u;
  clear_has_flat_num();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::flat_num() const {
  return flat_num_;
}
inline void StockRiseFallInfo::set_flat_num(::google::protobuf::uint32 value) {
  set_has_flat_num();
  flat_num_ = value;
}

// optional uint32 stop_num = 16;
inline bool StockRiseFallInfo::has_stop_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void StockRiseFallInfo::set_has_stop_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void StockRiseFallInfo::clear_has_stop_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void StockRiseFallInfo::clear_stop_num() {
  stop_num_ = 0u;
  clear_has_stop_num();
}
inline ::google::protobuf::uint32 StockRiseFallInfo::stop_num() const {
  return stop_num_;
}
inline void StockRiseFallInfo::set_stop_num(::google::protobuf::uint32 value) {
  set_has_stop_num();
  stop_num_ = value;
}

// -------------------------------------------------------------------

// RisestStockInfo

// optional string stock_code = 1;
inline bool RisestStockInfo::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RisestStockInfo::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RisestStockInfo::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RisestStockInfo::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& RisestStockInfo::stock_code() const {
  return *stock_code_;
}
inline void RisestStockInfo::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void RisestStockInfo::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void RisestStockInfo::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RisestStockInfo::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* RisestStockInfo::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_name = 2;
inline bool RisestStockInfo::has_stock_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RisestStockInfo::set_has_stock_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RisestStockInfo::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RisestStockInfo::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& RisestStockInfo::stock_name() const {
  return *stock_name_;
}
inline void RisestStockInfo::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void RisestStockInfo::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void RisestStockInfo::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RisestStockInfo::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* RisestStockInfo::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 last_pice = 3;
inline bool RisestStockInfo::has_last_pice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RisestStockInfo::set_has_last_pice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RisestStockInfo::clear_has_last_pice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RisestStockInfo::clear_last_pice() {
  last_pice_ = 0u;
  clear_has_last_pice();
}
inline ::google::protobuf::uint32 RisestStockInfo::last_pice() const {
  return last_pice_;
}
inline void RisestStockInfo::set_last_pice(::google::protobuf::uint32 value) {
  set_has_last_pice();
  last_pice_ = value;
}

// optional uint32 pre_close_price = 4;
inline bool RisestStockInfo::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RisestStockInfo::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RisestStockInfo::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RisestStockInfo::clear_pre_close_price() {
  pre_close_price_ = 0u;
  clear_has_pre_close_price();
}
inline ::google::protobuf::uint32 RisestStockInfo::pre_close_price() const {
  return pre_close_price_;
}
inline void RisestStockInfo::set_pre_close_price(::google::protobuf::uint32 value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}

// -------------------------------------------------------------------

// StockMsg

// optional string stock_code = 1;
inline bool StockMsg::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StockMsg::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StockMsg::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StockMsg::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& StockMsg::stock_code() const {
  return *stock_code_;
}
inline void StockMsg::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void StockMsg::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void StockMsg::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockMsg::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* StockMsg::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_name = 2;
inline bool StockMsg::has_stock_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StockMsg::set_has_stock_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StockMsg::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StockMsg::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& StockMsg::stock_name() const {
  return *stock_name_;
}
inline void StockMsg::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void StockMsg::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void StockMsg::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockMsg::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* StockMsg::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_block = 3;
inline bool StockMsg::has_is_block() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StockMsg::set_has_is_block() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StockMsg::clear_has_is_block() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StockMsg::clear_is_block() {
  is_block_ = false;
  clear_has_is_block();
}
inline bool StockMsg::is_block() const {
  return is_block_;
}
inline void StockMsg::set_is_block(bool value) {
  set_has_is_block();
  is_block_ = value;
}

// optional .QuoteProto.StockBase stk_base = 4;
inline bool StockMsg::has_stk_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StockMsg::set_has_stk_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StockMsg::clear_has_stk_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StockMsg::clear_stk_base() {
  if (stk_base_ != NULL) stk_base_->::QuoteProto::StockBase::Clear();
  clear_has_stk_base();
}
inline const ::QuoteProto::StockBase& StockMsg::stk_base() const {
  return stk_base_ != NULL ? *stk_base_ : *default_instance_->stk_base_;
}
inline ::QuoteProto::StockBase* StockMsg::mutable_stk_base() {
  set_has_stk_base();
  if (stk_base_ == NULL) stk_base_ = new ::QuoteProto::StockBase;
  return stk_base_;
}
inline ::QuoteProto::StockBase* StockMsg::release_stk_base() {
  clear_has_stk_base();
  ::QuoteProto::StockBase* temp = stk_base_;
  stk_base_ = NULL;
  return temp;
}

// optional .QuoteProto.StockMmp stk_mmp = 5;
inline bool StockMsg::has_stk_mmp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StockMsg::set_has_stk_mmp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StockMsg::clear_has_stk_mmp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StockMsg::clear_stk_mmp() {
  if (stk_mmp_ != NULL) stk_mmp_->::QuoteProto::StockMmp::Clear();
  clear_has_stk_mmp();
}
inline const ::QuoteProto::StockMmp& StockMsg::stk_mmp() const {
  return stk_mmp_ != NULL ? *stk_mmp_ : *default_instance_->stk_mmp_;
}
inline ::QuoteProto::StockMmp* StockMsg::mutable_stk_mmp() {
  set_has_stk_mmp();
  if (stk_mmp_ == NULL) stk_mmp_ = new ::QuoteProto::StockMmp;
  return stk_mmp_;
}
inline ::QuoteProto::StockMmp* StockMsg::release_stk_mmp() {
  clear_has_stk_mmp();
  ::QuoteProto::StockMmp* temp = stk_mmp_;
  stk_mmp_ = NULL;
  return temp;
}

// optional string block_type = 6;
inline bool StockMsg::has_block_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StockMsg::set_has_block_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StockMsg::clear_has_block_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StockMsg::clear_block_type() {
  if (block_type_ != &::google::protobuf::internal::kEmptyString) {
    block_type_->clear();
  }
  clear_has_block_type();
}
inline const ::std::string& StockMsg::block_type() const {
  return *block_type_;
}
inline void StockMsg::set_block_type(const ::std::string& value) {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  block_type_->assign(value);
}
inline void StockMsg::set_block_type(const char* value) {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  block_type_->assign(value);
}
inline void StockMsg::set_block_type(const char* value, size_t size) {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  block_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StockMsg::mutable_block_type() {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  return block_type_;
}
inline ::std::string* StockMsg::release_block_type() {
  clear_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_type_;
    block_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .QuoteProto.RisestStockInfo risest_stock = 7;
inline bool StockMsg::has_risest_stock() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StockMsg::set_has_risest_stock() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StockMsg::clear_has_risest_stock() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StockMsg::clear_risest_stock() {
  if (risest_stock_ != NULL) risest_stock_->::QuoteProto::RisestStockInfo::Clear();
  clear_has_risest_stock();
}
inline const ::QuoteProto::RisestStockInfo& StockMsg::risest_stock() const {
  return risest_stock_ != NULL ? *risest_stock_ : *default_instance_->risest_stock_;
}
inline ::QuoteProto::RisestStockInfo* StockMsg::mutable_risest_stock() {
  set_has_risest_stock();
  if (risest_stock_ == NULL) risest_stock_ = new ::QuoteProto::RisestStockInfo;
  return risest_stock_;
}
inline ::QuoteProto::RisestStockInfo* StockMsg::release_risest_stock() {
  clear_has_risest_stock();
  ::QuoteProto::RisestStockInfo* temp = risest_stock_;
  risest_stock_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BlockMsg

// optional string block_code = 1;
inline bool BlockMsg::has_block_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockMsg::set_has_block_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockMsg::clear_has_block_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockMsg::clear_block_code() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    block_code_->clear();
  }
  clear_has_block_code();
}
inline const ::std::string& BlockMsg::block_code() const {
  return *block_code_;
}
inline void BlockMsg::set_block_code(const ::std::string& value) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(value);
}
inline void BlockMsg::set_block_code(const char* value) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(value);
}
inline void BlockMsg::set_block_code(const char* value, size_t size) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockMsg::mutable_block_code() {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  return block_code_;
}
inline ::std::string* BlockMsg::release_block_code() {
  clear_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_code_;
    block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string block_name = 2;
inline bool BlockMsg::has_block_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockMsg::set_has_block_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockMsg::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockMsg::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& BlockMsg::block_name() const {
  return *block_name_;
}
inline void BlockMsg::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void BlockMsg::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void BlockMsg::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockMsg::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* BlockMsg::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 pre_close_price = 3;
inline bool BlockMsg::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockMsg::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockMsg::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockMsg::clear_pre_close_price() {
  pre_close_price_ = 0u;
  clear_has_pre_close_price();
}
inline ::google::protobuf::uint32 BlockMsg::pre_close_price() const {
  return pre_close_price_;
}
inline void BlockMsg::set_pre_close_price(::google::protobuf::uint32 value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}

// optional uint32 open_price = 4;
inline bool BlockMsg::has_open_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockMsg::set_has_open_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockMsg::clear_has_open_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockMsg::clear_open_price() {
  open_price_ = 0u;
  clear_has_open_price();
}
inline ::google::protobuf::uint32 BlockMsg::open_price() const {
  return open_price_;
}
inline void BlockMsg::set_open_price(::google::protobuf::uint32 value) {
  set_has_open_price();
  open_price_ = value;
}

// optional uint32 highest_price = 5;
inline bool BlockMsg::has_highest_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BlockMsg::set_has_highest_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BlockMsg::clear_has_highest_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BlockMsg::clear_highest_price() {
  highest_price_ = 0u;
  clear_has_highest_price();
}
inline ::google::protobuf::uint32 BlockMsg::highest_price() const {
  return highest_price_;
}
inline void BlockMsg::set_highest_price(::google::protobuf::uint32 value) {
  set_has_highest_price();
  highest_price_ = value;
}

// optional uint32 lowest_price = 6;
inline bool BlockMsg::has_lowest_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BlockMsg::set_has_lowest_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BlockMsg::clear_has_lowest_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BlockMsg::clear_lowest_price() {
  lowest_price_ = 0u;
  clear_has_lowest_price();
}
inline ::google::protobuf::uint32 BlockMsg::lowest_price() const {
  return lowest_price_;
}
inline void BlockMsg::set_lowest_price(::google::protobuf::uint32 value) {
  set_has_lowest_price();
  lowest_price_ = value;
}

// optional uint32 last_pice = 7;
inline bool BlockMsg::has_last_pice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BlockMsg::set_has_last_pice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BlockMsg::clear_has_last_pice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BlockMsg::clear_last_pice() {
  last_pice_ = 0u;
  clear_has_last_pice();
}
inline ::google::protobuf::uint32 BlockMsg::last_pice() const {
  return last_pice_;
}
inline void BlockMsg::set_last_pice(::google::protobuf::uint32 value) {
  set_has_last_pice();
  last_pice_ = value;
}

// optional uint64 volume = 10;
inline bool BlockMsg::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BlockMsg::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BlockMsg::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BlockMsg::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 BlockMsg::volume() const {
  return volume_;
}
inline void BlockMsg::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint64 turnover = 11;
inline bool BlockMsg::has_turnover() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BlockMsg::set_has_turnover() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BlockMsg::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BlockMsg::clear_turnover() {
  turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::uint64 BlockMsg::turnover() const {
  return turnover_;
}
inline void BlockMsg::set_turnover(::google::protobuf::uint64 value) {
  set_has_turnover();
  turnover_ = value;
}

// optional uint32 update_time = 12;
inline bool BlockMsg::has_update_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BlockMsg::set_has_update_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BlockMsg::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BlockMsg::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 BlockMsg::update_time() const {
  return update_time_;
}
inline void BlockMsg::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// optional uint64 cir_stock = 13;
inline bool BlockMsg::has_cir_stock() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BlockMsg::set_has_cir_stock() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BlockMsg::clear_has_cir_stock() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BlockMsg::clear_cir_stock() {
  cir_stock_ = GOOGLE_ULONGLONG(0);
  clear_has_cir_stock();
}
inline ::google::protobuf::uint64 BlockMsg::cir_stock() const {
  return cir_stock_;
}
inline void BlockMsg::set_cir_stock(::google::protobuf::uint64 value) {
  set_has_cir_stock();
  cir_stock_ = value;
}

// optional uint64 tot_stock = 14;
inline bool BlockMsg::has_tot_stock() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BlockMsg::set_has_tot_stock() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BlockMsg::clear_has_tot_stock() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BlockMsg::clear_tot_stock() {
  tot_stock_ = GOOGLE_ULONGLONG(0);
  clear_has_tot_stock();
}
inline ::google::protobuf::uint64 BlockMsg::tot_stock() const {
  return tot_stock_;
}
inline void BlockMsg::set_tot_stock(::google::protobuf::uint64 value) {
  set_has_tot_stock();
  tot_stock_ = value;
}

// optional uint64 cir_value = 15;
inline bool BlockMsg::has_cir_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BlockMsg::set_has_cir_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BlockMsg::clear_has_cir_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BlockMsg::clear_cir_value() {
  cir_value_ = GOOGLE_ULONGLONG(0);
  clear_has_cir_value();
}
inline ::google::protobuf::uint64 BlockMsg::cir_value() const {
  return cir_value_;
}
inline void BlockMsg::set_cir_value(::google::protobuf::uint64 value) {
  set_has_cir_value();
  cir_value_ = value;
}

// optional uint64 tot_value = 16;
inline bool BlockMsg::has_tot_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BlockMsg::set_has_tot_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BlockMsg::clear_has_tot_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BlockMsg::clear_tot_value() {
  tot_value_ = GOOGLE_ULONGLONG(0);
  clear_has_tot_value();
}
inline ::google::protobuf::uint64 BlockMsg::tot_value() const {
  return tot_value_;
}
inline void BlockMsg::set_tot_value(::google::protobuf::uint64 value) {
  set_has_tot_value();
  tot_value_ = value;
}

// optional uint64 avg_stock = 17;
inline bool BlockMsg::has_avg_stock() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BlockMsg::set_has_avg_stock() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BlockMsg::clear_has_avg_stock() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BlockMsg::clear_avg_stock() {
  avg_stock_ = GOOGLE_ULONGLONG(0);
  clear_has_avg_stock();
}
inline ::google::protobuf::uint64 BlockMsg::avg_stock() const {
  return avg_stock_;
}
inline void BlockMsg::set_avg_stock(::google::protobuf::uint64 value) {
  set_has_avg_stock();
  avg_stock_ = value;
}

// optional float turnover_rate = 18;
inline bool BlockMsg::has_turnover_rate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BlockMsg::set_has_turnover_rate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BlockMsg::clear_has_turnover_rate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BlockMsg::clear_turnover_rate() {
  turnover_rate_ = 0;
  clear_has_turnover_rate();
}
inline float BlockMsg::turnover_rate() const {
  return turnover_rate_;
}
inline void BlockMsg::set_turnover_rate(float value) {
  set_has_turnover_rate();
  turnover_rate_ = value;
}

// optional uint64 np_volume = 19;
inline bool BlockMsg::has_np_volume() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BlockMsg::set_has_np_volume() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BlockMsg::clear_has_np_volume() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BlockMsg::clear_np_volume() {
  np_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_np_volume();
}
inline ::google::protobuf::uint64 BlockMsg::np_volume() const {
  return np_volume_;
}
inline void BlockMsg::set_np_volume(::google::protobuf::uint64 value) {
  set_has_np_volume();
  np_volume_ = value;
}

// optional uint64 wp_volume = 20;
inline bool BlockMsg::has_wp_volume() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BlockMsg::set_has_wp_volume() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BlockMsg::clear_has_wp_volume() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BlockMsg::clear_wp_volume() {
  wp_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_wp_volume();
}
inline ::google::protobuf::uint64 BlockMsg::wp_volume() const {
  return wp_volume_;
}
inline void BlockMsg::set_wp_volume(::google::protobuf::uint64 value) {
  set_has_wp_volume();
  wp_volume_ = value;
}

// optional uint32 rise = 21;
inline bool BlockMsg::has_rise() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BlockMsg::set_has_rise() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BlockMsg::clear_has_rise() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BlockMsg::clear_rise() {
  rise_ = 0u;
  clear_has_rise();
}
inline ::google::protobuf::uint32 BlockMsg::rise() const {
  return rise_;
}
inline void BlockMsg::set_rise(::google::protobuf::uint32 value) {
  set_has_rise();
  rise_ = value;
}

// optional uint32 fall = 22;
inline bool BlockMsg::has_fall() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BlockMsg::set_has_fall() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BlockMsg::clear_has_fall() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BlockMsg::clear_fall() {
  fall_ = 0u;
  clear_has_fall();
}
inline ::google::protobuf::uint32 BlockMsg::fall() const {
  return fall_;
}
inline void BlockMsg::set_fall(::google::protobuf::uint32 value) {
  set_has_fall();
  fall_ = value;
}

// optional uint32 flat = 23;
inline bool BlockMsg::has_flat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BlockMsg::set_has_flat() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BlockMsg::clear_has_flat() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BlockMsg::clear_flat() {
  flat_ = 0u;
  clear_has_flat();
}
inline ::google::protobuf::uint32 BlockMsg::flat() const {
  return flat_;
}
inline void BlockMsg::set_flat(::google::protobuf::uint32 value) {
  set_has_flat();
  flat_ = value;
}

// optional uint32 trading_day = 25;
inline bool BlockMsg::has_trading_day() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BlockMsg::set_has_trading_day() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BlockMsg::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BlockMsg::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 BlockMsg::trading_day() const {
  return trading_day_;
}
inline void BlockMsg::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// optional uint32 trade_status = 26;
inline bool BlockMsg::has_trade_status() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BlockMsg::set_has_trade_status() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BlockMsg::clear_has_trade_status() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BlockMsg::clear_trade_status() {
  trade_status_ = 0u;
  clear_has_trade_status();
}
inline ::google::protobuf::uint32 BlockMsg::trade_status() const {
  return trade_status_;
}
inline void BlockMsg::set_trade_status(::google::protobuf::uint32 value) {
  set_has_trade_status();
  trade_status_ = value;
}

// optional float speed_rate = 27;
inline bool BlockMsg::has_speed_rate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BlockMsg::set_has_speed_rate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BlockMsg::clear_has_speed_rate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BlockMsg::clear_speed_rate() {
  speed_rate_ = 0;
  clear_has_speed_rate();
}
inline float BlockMsg::speed_rate() const {
  return speed_rate_;
}
inline void BlockMsg::set_speed_rate(float value) {
  set_has_speed_rate();
  speed_rate_ = value;
}

// optional float three_rate = 28;
inline bool BlockMsg::has_three_rate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BlockMsg::set_has_three_rate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BlockMsg::clear_has_three_rate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BlockMsg::clear_three_rate() {
  three_rate_ = 0;
  clear_has_three_rate();
}
inline float BlockMsg::three_rate() const {
  return three_rate_;
}
inline void BlockMsg::set_three_rate(float value) {
  set_has_three_rate();
  three_rate_ = value;
}

// optional float three_tuv_rate = 29;
inline bool BlockMsg::has_three_tuv_rate() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BlockMsg::set_has_three_tuv_rate() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BlockMsg::clear_has_three_tuv_rate() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BlockMsg::clear_three_tuv_rate() {
  three_tuv_rate_ = 0;
  clear_has_three_tuv_rate();
}
inline float BlockMsg::three_tuv_rate() const {
  return three_tuv_rate_;
}
inline void BlockMsg::set_three_tuv_rate(float value) {
  set_has_three_tuv_rate();
  three_tuv_rate_ = value;
}

// optional float five_tuv_rate = 30;
inline bool BlockMsg::has_five_tuv_rate() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BlockMsg::set_has_five_tuv_rate() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BlockMsg::clear_has_five_tuv_rate() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BlockMsg::clear_five_tuv_rate() {
  five_tuv_rate_ = 0;
  clear_has_five_tuv_rate();
}
inline float BlockMsg::five_tuv_rate() const {
  return five_tuv_rate_;
}
inline void BlockMsg::set_five_tuv_rate(float value) {
  set_has_five_tuv_rate();
  five_tuv_rate_ = value;
}

// optional float ratio = 31;
inline bool BlockMsg::has_ratio() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BlockMsg::set_has_ratio() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BlockMsg::clear_has_ratio() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BlockMsg::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline float BlockMsg::ratio() const {
  return ratio_;
}
inline void BlockMsg::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
}

// optional uint64 cur_volume = 33;
inline bool BlockMsg::has_cur_volume() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BlockMsg::set_has_cur_volume() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BlockMsg::clear_has_cur_volume() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BlockMsg::clear_cur_volume() {
  cur_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_volume();
}
inline ::google::protobuf::uint64 BlockMsg::cur_volume() const {
  return cur_volume_;
}
inline void BlockMsg::set_cur_volume(::google::protobuf::uint64 value) {
  set_has_cur_volume();
  cur_volume_ = value;
}

// optional uint64 detail_volume = 34;
inline bool BlockMsg::has_detail_volume() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BlockMsg::set_has_detail_volume() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BlockMsg::clear_has_detail_volume() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BlockMsg::clear_detail_volume() {
  detail_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_detail_volume();
}
inline ::google::protobuf::uint64 BlockMsg::detail_volume() const {
  return detail_volume_;
}
inline void BlockMsg::set_detail_volume(::google::protobuf::uint64 value) {
  set_has_detail_volume();
  detail_volume_ = value;
}

// optional string block_type = 35;
inline bool BlockMsg::has_block_type() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BlockMsg::set_has_block_type() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BlockMsg::clear_has_block_type() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BlockMsg::clear_block_type() {
  if (block_type_ != &::google::protobuf::internal::kEmptyString) {
    block_type_->clear();
  }
  clear_has_block_type();
}
inline const ::std::string& BlockMsg::block_type() const {
  return *block_type_;
}
inline void BlockMsg::set_block_type(const ::std::string& value) {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  block_type_->assign(value);
}
inline void BlockMsg::set_block_type(const char* value) {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  block_type_->assign(value);
}
inline void BlockMsg::set_block_type(const char* value, size_t size) {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  block_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BlockMsg::mutable_block_type() {
  set_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    block_type_ = new ::std::string;
  }
  return block_type_;
}
inline ::std::string* BlockMsg::release_block_type() {
  clear_has_block_type();
  if (block_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_type_;
    block_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 rise_day_num = 36;
inline bool BlockMsg::has_rise_day_num() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BlockMsg::set_has_rise_day_num() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BlockMsg::clear_has_rise_day_num() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BlockMsg::clear_rise_day_num() {
  rise_day_num_ = 0u;
  clear_has_rise_day_num();
}
inline ::google::protobuf::uint32 BlockMsg::rise_day_num() const {
  return rise_day_num_;
}
inline void BlockMsg::set_rise_day_num(::google::protobuf::uint32 value) {
  set_has_rise_day_num();
  rise_day_num_ = value;
}

// optional float five_rate = 50;
inline bool BlockMsg::has_five_rate() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BlockMsg::set_has_five_rate() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BlockMsg::clear_has_five_rate() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BlockMsg::clear_five_rate() {
  five_rate_ = 0;
  clear_has_five_rate();
}
inline float BlockMsg::five_rate() const {
  return five_rate_;
}
inline void BlockMsg::set_five_rate(float value) {
  set_has_five_rate();
  five_rate_ = value;
}

// optional uint32 limit_up = 51;
inline bool BlockMsg::has_limit_up() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BlockMsg::set_has_limit_up() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BlockMsg::clear_has_limit_up() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BlockMsg::clear_limit_up() {
  limit_up_ = 0u;
  clear_has_limit_up();
}
inline ::google::protobuf::uint32 BlockMsg::limit_up() const {
  return limit_up_;
}
inline void BlockMsg::set_limit_up(::google::protobuf::uint32 value) {
  set_has_limit_up();
  limit_up_ = value;
}

// optional uint32 avg_price = 52;
inline bool BlockMsg::has_avg_price() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BlockMsg::set_has_avg_price() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BlockMsg::clear_has_avg_price() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BlockMsg::clear_avg_price() {
  avg_price_ = 0u;
  clear_has_avg_price();
}
inline ::google::protobuf::uint32 BlockMsg::avg_price() const {
  return avg_price_;
}
inline void BlockMsg::set_avg_price(::google::protobuf::uint32 value) {
  set_has_avg_price();
  avg_price_ = value;
}

// -------------------------------------------------------------------

// KLine

// required uint32 trading_day = 1;
inline bool KLine::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KLine::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KLine::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KLine::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 KLine::trading_day() const {
  return trading_day_;
}
inline void KLine::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// required uint32 update_time = 2;
inline bool KLine::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KLine::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KLine::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KLine::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 KLine::update_time() const {
  return update_time_;
}
inline void KLine::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// required uint32 upsert_time = 3;
inline bool KLine::has_upsert_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KLine::set_has_upsert_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KLine::clear_has_upsert_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KLine::clear_upsert_time() {
  upsert_time_ = 0u;
  clear_has_upsert_time();
}
inline ::google::protobuf::uint32 KLine::upsert_time() const {
  return upsert_time_;
}
inline void KLine::set_upsert_time(::google::protobuf::uint32 value) {
  set_has_upsert_time();
  upsert_time_ = value;
}

// required uint32 high_price = 4;
inline bool KLine::has_high_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KLine::set_has_high_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KLine::clear_has_high_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KLine::clear_high_price() {
  high_price_ = 0u;
  clear_has_high_price();
}
inline ::google::protobuf::uint32 KLine::high_price() const {
  return high_price_;
}
inline void KLine::set_high_price(::google::protobuf::uint32 value) {
  set_has_high_price();
  high_price_ = value;
}

// required uint32 open_price = 5;
inline bool KLine::has_open_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KLine::set_has_open_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KLine::clear_has_open_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KLine::clear_open_price() {
  open_price_ = 0u;
  clear_has_open_price();
}
inline ::google::protobuf::uint32 KLine::open_price() const {
  return open_price_;
}
inline void KLine::set_open_price(::google::protobuf::uint32 value) {
  set_has_open_price();
  open_price_ = value;
}

// required uint32 low_price = 6;
inline bool KLine::has_low_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KLine::set_has_low_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KLine::clear_has_low_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KLine::clear_low_price() {
  low_price_ = 0u;
  clear_has_low_price();
}
inline ::google::protobuf::uint32 KLine::low_price() const {
  return low_price_;
}
inline void KLine::set_low_price(::google::protobuf::uint32 value) {
  set_has_low_price();
  low_price_ = value;
}

// required uint32 close_price = 7;
inline bool KLine::has_close_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KLine::set_has_close_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KLine::clear_has_close_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KLine::clear_close_price() {
  close_price_ = 0u;
  clear_has_close_price();
}
inline ::google::protobuf::uint32 KLine::close_price() const {
  return close_price_;
}
inline void KLine::set_close_price(::google::protobuf::uint32 value) {
  set_has_close_price();
  close_price_ = value;
}

// required uint64 volume = 8;
inline bool KLine::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void KLine::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void KLine::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void KLine::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 KLine::volume() const {
  return volume_;
}
inline void KLine::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
}

// required uint64 turnover = 9;
inline bool KLine::has_turnover() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void KLine::set_has_turnover() {
  _has_bits_[0] |= 0x00000100u;
}
inline void KLine::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void KLine::clear_turnover() {
  turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::uint64 KLine::turnover() const {
  return turnover_;
}
inline void KLine::set_turnover(::google::protobuf::uint64 value) {
  set_has_turnover();
  turnover_ = value;
}

// required uint32 pre_close_price = 10;
inline bool KLine::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void KLine::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void KLine::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void KLine::clear_pre_close_price() {
  pre_close_price_ = 0u;
  clear_has_pre_close_price();
}
inline ::google::protobuf::uint32 KLine::pre_close_price() const {
  return pre_close_price_;
}
inline void KLine::set_pre_close_price(::google::protobuf::uint32 value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}

// required uint32 avg_price = 11;
inline bool KLine::has_avg_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void KLine::set_has_avg_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void KLine::clear_has_avg_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void KLine::clear_avg_price() {
  avg_price_ = 0u;
  clear_has_avg_price();
}
inline ::google::protobuf::uint32 KLine::avg_price() const {
  return avg_price_;
}
inline void KLine::set_avg_price(::google::protobuf::uint32 value) {
  set_has_avg_price();
  avg_price_ = value;
}

// -------------------------------------------------------------------

// Zhubi

// required uint32 trading_day = 1;
inline bool Zhubi::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Zhubi::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Zhubi::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Zhubi::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 Zhubi::trading_day() const {
  return trading_day_;
}
inline void Zhubi::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// required uint32 price = 3;
inline bool Zhubi::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Zhubi::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Zhubi::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Zhubi::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 Zhubi::price() const {
  return price_;
}
inline void Zhubi::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// required uint64 volume = 4;
inline bool Zhubi::has_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Zhubi::set_has_volume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Zhubi::clear_has_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Zhubi::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 Zhubi::volume() const {
  return volume_;
}
inline void Zhubi::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
}

// required uint32 access_way = 5;
inline bool Zhubi::has_access_way() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Zhubi::set_has_access_way() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Zhubi::clear_has_access_way() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Zhubi::clear_access_way() {
  access_way_ = 0u;
  clear_has_access_way();
}
inline ::google::protobuf::uint32 Zhubi::access_way() const {
  return access_way_;
}
inline void Zhubi::set_access_way(::google::protobuf::uint32 value) {
  set_has_access_way();
  access_way_ = value;
}

// required uint32 update_time = 6;
inline bool Zhubi::has_update_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Zhubi::set_has_update_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Zhubi::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Zhubi::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 Zhubi::update_time() const {
  return update_time_;
}
inline void Zhubi::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// required uint64 turnover = 7;
inline bool Zhubi::has_turnover() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Zhubi::set_has_turnover() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Zhubi::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Zhubi::clear_turnover() {
  turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::uint64 Zhubi::turnover() const {
  return turnover_;
}
inline void Zhubi::set_turnover(::google::protobuf::uint64 value) {
  set_has_turnover();
  turnover_ = value;
}

// -------------------------------------------------------------------

// PeriodKLine

// required uint32 kline_type = 1;
inline bool PeriodKLine::has_kline_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PeriodKLine::set_has_kline_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PeriodKLine::clear_has_kline_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PeriodKLine::clear_kline_type() {
  kline_type_ = 0u;
  clear_has_kline_type();
}
inline ::google::protobuf::uint32 PeriodKLine::kline_type() const {
  return kline_type_;
}
inline void PeriodKLine::set_kline_type(::google::protobuf::uint32 value) {
  set_has_kline_type();
  kline_type_ = value;
}

// required string stock_code = 2;
inline bool PeriodKLine::has_stock_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PeriodKLine::set_has_stock_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PeriodKLine::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PeriodKLine::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& PeriodKLine::stock_code() const {
  return *stock_code_;
}
inline void PeriodKLine::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void PeriodKLine::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void PeriodKLine::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PeriodKLine::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* PeriodKLine::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .QuoteProto.KLine kline_info = 3;
inline bool PeriodKLine::has_kline_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PeriodKLine::set_has_kline_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PeriodKLine::clear_has_kline_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PeriodKLine::clear_kline_info() {
  if (kline_info_ != NULL) kline_info_->::QuoteProto::KLine::Clear();
  clear_has_kline_info();
}
inline const ::QuoteProto::KLine& PeriodKLine::kline_info() const {
  return kline_info_ != NULL ? *kline_info_ : *default_instance_->kline_info_;
}
inline ::QuoteProto::KLine* PeriodKLine::mutable_kline_info() {
  set_has_kline_info();
  if (kline_info_ == NULL) kline_info_ = new ::QuoteProto::KLine;
  return kline_info_;
}
inline ::QuoteProto::KLine* PeriodKLine::release_kline_info() {
  clear_has_kline_info();
  ::QuoteProto::KLine* temp = kline_info_;
  kline_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UserLoginInfo

// required uint64 uid = 1;
inline bool UserLoginInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 UserLoginInfo::uid() const {
  return uid_;
}
inline void UserLoginInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// required .QuoteProto.DeviceType device_type = 2;
inline bool UserLoginInfo::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginInfo::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginInfo::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginInfo::clear_device_type() {
  device_type_ = 1;
  clear_has_device_type();
}
inline QuoteProto::DeviceType UserLoginInfo::device_type() const {
  return static_cast< QuoteProto::DeviceType >(device_type_);
}
inline void UserLoginInfo::set_device_type(QuoteProto::DeviceType value) {
  GOOGLE_DCHECK(QuoteProto::DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
}

// optional bool offline = 3;
inline bool UserLoginInfo::has_offline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginInfo::set_has_offline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginInfo::clear_has_offline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginInfo::clear_offline() {
  offline_ = false;
  clear_has_offline();
}
inline bool UserLoginInfo::offline() const {
  return offline_;
}
inline void UserLoginInfo::set_offline(bool value) {
  set_has_offline();
  offline_ = value;
}

// -------------------------------------------------------------------

// UserLoginKickInfo

// optional uint64 uid = 1;
inline bool UserLoginKickInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginKickInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginKickInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginKickInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 UserLoginKickInfo::uid() const {
  return uid_;
}
inline void UserLoginKickInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional .QuoteProto.DeviceType device_type = 2;
inline bool UserLoginKickInfo::has_device_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginKickInfo::set_has_device_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginKickInfo::clear_has_device_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginKickInfo::clear_device_type() {
  device_type_ = 1;
  clear_has_device_type();
}
inline QuoteProto::DeviceType UserLoginKickInfo::device_type() const {
  return static_cast< QuoteProto::DeviceType >(device_type_);
}
inline void UserLoginKickInfo::set_device_type(QuoteProto::DeviceType value) {
  GOOGLE_DCHECK(QuoteProto::DeviceType_IsValid(value));
  set_has_device_type();
  device_type_ = value;
}

// optional string kick_desc = 3;
inline bool UserLoginKickInfo::has_kick_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginKickInfo::set_has_kick_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginKickInfo::clear_has_kick_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginKickInfo::clear_kick_desc() {
  if (kick_desc_ != &::google::protobuf::internal::kEmptyString) {
    kick_desc_->clear();
  }
  clear_has_kick_desc();
}
inline const ::std::string& UserLoginKickInfo::kick_desc() const {
  return *kick_desc_;
}
inline void UserLoginKickInfo::set_kick_desc(const ::std::string& value) {
  set_has_kick_desc();
  if (kick_desc_ == &::google::protobuf::internal::kEmptyString) {
    kick_desc_ = new ::std::string;
  }
  kick_desc_->assign(value);
}
inline void UserLoginKickInfo::set_kick_desc(const char* value) {
  set_has_kick_desc();
  if (kick_desc_ == &::google::protobuf::internal::kEmptyString) {
    kick_desc_ = new ::std::string;
  }
  kick_desc_->assign(value);
}
inline void UserLoginKickInfo::set_kick_desc(const char* value, size_t size) {
  set_has_kick_desc();
  if (kick_desc_ == &::google::protobuf::internal::kEmptyString) {
    kick_desc_ = new ::std::string;
  }
  kick_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginKickInfo::mutable_kick_desc() {
  set_has_kick_desc();
  if (kick_desc_ == &::google::protobuf::internal::kEmptyString) {
    kick_desc_ = new ::std::string;
  }
  return kick_desc_;
}
inline ::std::string* UserLoginKickInfo::release_kick_desc() {
  clear_has_kick_desc();
  if (kick_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = kick_desc_;
    kick_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OrdFeild

// optional int64 money_input = 1;
inline bool OrdFeild::has_money_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrdFeild::set_has_money_input() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrdFeild::clear_has_money_input() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrdFeild::clear_money_input() {
  money_input_ = GOOGLE_LONGLONG(0);
  clear_has_money_input();
}
inline ::google::protobuf::int64 OrdFeild::money_input() const {
  return money_input_;
}
inline void OrdFeild::set_money_input(::google::protobuf::int64 value) {
  set_has_money_input();
  money_input_ = value;
}

// optional int64 money_output = 2;
inline bool OrdFeild::has_money_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrdFeild::set_has_money_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrdFeild::clear_has_money_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrdFeild::clear_money_output() {
  money_output_ = GOOGLE_LONGLONG(0);
  clear_has_money_output();
}
inline ::google::protobuf::int64 OrdFeild::money_output() const {
  return money_output_;
}
inline void OrdFeild::set_money_output(::google::protobuf::int64 value) {
  set_has_money_output();
  money_output_ = value;
}

// optional int64 money_netput = 3;
inline bool OrdFeild::has_money_netput() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrdFeild::set_has_money_netput() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrdFeild::clear_has_money_netput() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrdFeild::clear_money_netput() {
  money_netput_ = GOOGLE_LONGLONG(0);
  clear_has_money_netput();
}
inline ::google::protobuf::int64 OrdFeild::money_netput() const {
  return money_netput_;
}
inline void OrdFeild::set_money_netput(::google::protobuf::int64 value) {
  set_has_money_netput();
  money_netput_ = value;
}

// optional float money_rate = 4;
inline bool OrdFeild::has_money_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrdFeild::set_has_money_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrdFeild::clear_has_money_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrdFeild::clear_money_rate() {
  money_rate_ = 0;
  clear_has_money_rate();
}
inline float OrdFeild::money_rate() const {
  return money_rate_;
}
inline void OrdFeild::set_money_rate(float value) {
  set_has_money_rate();
  money_rate_ = value;
}

// -------------------------------------------------------------------

// MoneyFeild

// optional uint32 trading_day = 1;
inline bool MoneyFeild::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoneyFeild::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoneyFeild::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoneyFeild::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 MoneyFeild::trading_day() const {
  return trading_day_;
}
inline void MoneyFeild::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// optional uint32 last_price = 2;
inline bool MoneyFeild::has_last_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoneyFeild::set_has_last_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoneyFeild::clear_has_last_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoneyFeild::clear_last_price() {
  last_price_ = 0u;
  clear_has_last_price();
}
inline ::google::protobuf::uint32 MoneyFeild::last_price() const {
  return last_price_;
}
inline void MoneyFeild::set_last_price(::google::protobuf::uint32 value) {
  set_has_last_price();
  last_price_ = value;
}

// optional uint32 pre_close_price = 3;
inline bool MoneyFeild::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoneyFeild::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoneyFeild::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoneyFeild::clear_pre_close_price() {
  pre_close_price_ = 0u;
  clear_has_pre_close_price();
}
inline ::google::protobuf::uint32 MoneyFeild::pre_close_price() const {
  return pre_close_price_;
}
inline void MoneyFeild::set_pre_close_price(::google::protobuf::uint32 value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}

// optional float rate = 4;
inline bool MoneyFeild::has_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoneyFeild::set_has_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoneyFeild::clear_has_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoneyFeild::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float MoneyFeild::rate() const {
  return rate_;
}
inline void MoneyFeild::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional uint64 auction_volume = 5;
inline bool MoneyFeild::has_auction_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoneyFeild::set_has_auction_volume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoneyFeild::clear_has_auction_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoneyFeild::clear_auction_volume() {
  auction_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_auction_volume();
}
inline ::google::protobuf::uint64 MoneyFeild::auction_volume() const {
  return auction_volume_;
}
inline void MoneyFeild::set_auction_volume(::google::protobuf::uint64 value) {
  set_has_auction_volume();
  auction_volume_ = value;
}

// optional uint64 auction_turnover = 6;
inline bool MoneyFeild::has_auction_turnover() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoneyFeild::set_has_auction_turnover() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoneyFeild::clear_has_auction_turnover() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoneyFeild::clear_auction_turnover() {
  auction_turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_auction_turnover();
}
inline ::google::protobuf::uint64 MoneyFeild::auction_turnover() const {
  return auction_turnover_;
}
inline void MoneyFeild::set_auction_turnover(::google::protobuf::uint64 value) {
  set_has_auction_turnover();
  auction_turnover_ = value;
}

// optional .QuoteProto.OrdFeild active_money = 7;
inline bool MoneyFeild::has_active_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MoneyFeild::set_has_active_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MoneyFeild::clear_has_active_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MoneyFeild::clear_active_money() {
  if (active_money_ != NULL) active_money_->::QuoteProto::OrdFeild::Clear();
  clear_has_active_money();
}
inline const ::QuoteProto::OrdFeild& MoneyFeild::active_money() const {
  return active_money_ != NULL ? *active_money_ : *default_instance_->active_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::mutable_active_money() {
  set_has_active_money();
  if (active_money_ == NULL) active_money_ = new ::QuoteProto::OrdFeild;
  return active_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::release_active_money() {
  clear_has_active_money();
  ::QuoteProto::OrdFeild* temp = active_money_;
  active_money_ = NULL;
  return temp;
}

// optional .QuoteProto.OrdFeild leader_money = 8;
inline bool MoneyFeild::has_leader_money() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MoneyFeild::set_has_leader_money() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MoneyFeild::clear_has_leader_money() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MoneyFeild::clear_leader_money() {
  if (leader_money_ != NULL) leader_money_->::QuoteProto::OrdFeild::Clear();
  clear_has_leader_money();
}
inline const ::QuoteProto::OrdFeild& MoneyFeild::leader_money() const {
  return leader_money_ != NULL ? *leader_money_ : *default_instance_->leader_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::mutable_leader_money() {
  set_has_leader_money();
  if (leader_money_ == NULL) leader_money_ = new ::QuoteProto::OrdFeild;
  return leader_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::release_leader_money() {
  clear_has_leader_money();
  ::QuoteProto::OrdFeild* temp = leader_money_;
  leader_money_ = NULL;
  return temp;
}

// optional .QuoteProto.OrdFeild maxord_money = 9;
inline bool MoneyFeild::has_maxord_money() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MoneyFeild::set_has_maxord_money() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MoneyFeild::clear_has_maxord_money() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MoneyFeild::clear_maxord_money() {
  if (maxord_money_ != NULL) maxord_money_->::QuoteProto::OrdFeild::Clear();
  clear_has_maxord_money();
}
inline const ::QuoteProto::OrdFeild& MoneyFeild::maxord_money() const {
  return maxord_money_ != NULL ? *maxord_money_ : *default_instance_->maxord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::mutable_maxord_money() {
  set_has_maxord_money();
  if (maxord_money_ == NULL) maxord_money_ = new ::QuoteProto::OrdFeild;
  return maxord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::release_maxord_money() {
  clear_has_maxord_money();
  ::QuoteProto::OrdFeild* temp = maxord_money_;
  maxord_money_ = NULL;
  return temp;
}

// optional .QuoteProto.OrdFeild bigord_money = 10;
inline bool MoneyFeild::has_bigord_money() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MoneyFeild::set_has_bigord_money() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MoneyFeild::clear_has_bigord_money() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MoneyFeild::clear_bigord_money() {
  if (bigord_money_ != NULL) bigord_money_->::QuoteProto::OrdFeild::Clear();
  clear_has_bigord_money();
}
inline const ::QuoteProto::OrdFeild& MoneyFeild::bigord_money() const {
  return bigord_money_ != NULL ? *bigord_money_ : *default_instance_->bigord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::mutable_bigord_money() {
  set_has_bigord_money();
  if (bigord_money_ == NULL) bigord_money_ = new ::QuoteProto::OrdFeild;
  return bigord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::release_bigord_money() {
  clear_has_bigord_money();
  ::QuoteProto::OrdFeild* temp = bigord_money_;
  bigord_money_ = NULL;
  return temp;
}

// optional .QuoteProto.OrdFeild midord_money = 11;
inline bool MoneyFeild::has_midord_money() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MoneyFeild::set_has_midord_money() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MoneyFeild::clear_has_midord_money() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MoneyFeild::clear_midord_money() {
  if (midord_money_ != NULL) midord_money_->::QuoteProto::OrdFeild::Clear();
  clear_has_midord_money();
}
inline const ::QuoteProto::OrdFeild& MoneyFeild::midord_money() const {
  return midord_money_ != NULL ? *midord_money_ : *default_instance_->midord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::mutable_midord_money() {
  set_has_midord_money();
  if (midord_money_ == NULL) midord_money_ = new ::QuoteProto::OrdFeild;
  return midord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::release_midord_money() {
  clear_has_midord_money();
  ::QuoteProto::OrdFeild* temp = midord_money_;
  midord_money_ = NULL;
  return temp;
}

// optional .QuoteProto.OrdFeild minord_money = 12;
inline bool MoneyFeild::has_minord_money() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MoneyFeild::set_has_minord_money() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MoneyFeild::clear_has_minord_money() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MoneyFeild::clear_minord_money() {
  if (minord_money_ != NULL) minord_money_->::QuoteProto::OrdFeild::Clear();
  clear_has_minord_money();
}
inline const ::QuoteProto::OrdFeild& MoneyFeild::minord_money() const {
  return minord_money_ != NULL ? *minord_money_ : *default_instance_->minord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::mutable_minord_money() {
  set_has_minord_money();
  if (minord_money_ == NULL) minord_money_ = new ::QuoteProto::OrdFeild;
  return minord_money_;
}
inline ::QuoteProto::OrdFeild* MoneyFeild::release_minord_money() {
  clear_has_minord_money();
  ::QuoteProto::OrdFeild* temp = minord_money_;
  minord_money_ = NULL;
  return temp;
}

// optional float avg_less_three = 13;
inline bool MoneyFeild::has_avg_less_three() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MoneyFeild::set_has_avg_less_three() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MoneyFeild::clear_has_avg_less_three() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MoneyFeild::clear_avg_less_three() {
  avg_less_three_ = 0;
  clear_has_avg_less_three();
}
inline float MoneyFeild::avg_less_three() const {
  return avg_less_three_;
}
inline void MoneyFeild::set_avg_less_three(float value) {
  set_has_avg_less_three();
  avg_less_three_ = value;
}

// optional float avg_less_five = 14;
inline bool MoneyFeild::has_avg_less_five() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MoneyFeild::set_has_avg_less_five() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MoneyFeild::clear_has_avg_less_five() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MoneyFeild::clear_avg_less_five() {
  avg_less_five_ = 0;
  clear_has_avg_less_five();
}
inline float MoneyFeild::avg_less_five() const {
  return avg_less_five_;
}
inline void MoneyFeild::set_avg_less_five(float value) {
  set_has_avg_less_five();
  avg_less_five_ = value;
}

// optional float leader_net_volume = 15;
inline bool MoneyFeild::has_leader_net_volume() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MoneyFeild::set_has_leader_net_volume() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MoneyFeild::clear_has_leader_net_volume() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MoneyFeild::clear_leader_net_volume() {
  leader_net_volume_ = 0;
  clear_has_leader_net_volume();
}
inline float MoneyFeild::leader_net_volume() const {
  return leader_net_volume_;
}
inline void MoneyFeild::set_leader_net_volume(float value) {
  set_has_leader_net_volume();
  leader_net_volume_ = value;
}

// optional int32 up_down_price = 16;
inline bool MoneyFeild::has_up_down_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MoneyFeild::set_has_up_down_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MoneyFeild::clear_has_up_down_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MoneyFeild::clear_up_down_price() {
  up_down_price_ = 0;
  clear_has_up_down_price();
}
inline ::google::protobuf::int32 MoneyFeild::up_down_price() const {
  return up_down_price_;
}
inline void MoneyFeild::set_up_down_price(::google::protobuf::int32 value) {
  set_has_up_down_price();
  up_down_price_ = value;
}

// -------------------------------------------------------------------

// MoneyMsg

// optional string stock_code = 1;
inline bool MoneyMsg::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoneyMsg::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoneyMsg::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoneyMsg::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& MoneyMsg::stock_code() const {
  return *stock_code_;
}
inline void MoneyMsg::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void MoneyMsg::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void MoneyMsg::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MoneyMsg::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* MoneyMsg::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_name = 2;
inline bool MoneyMsg::has_stock_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoneyMsg::set_has_stock_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoneyMsg::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoneyMsg::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& MoneyMsg::stock_name() const {
  return *stock_name_;
}
inline void MoneyMsg::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void MoneyMsg::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void MoneyMsg::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MoneyMsg::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* MoneyMsg::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string block_name = 3;
inline bool MoneyMsg::has_block_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoneyMsg::set_has_block_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoneyMsg::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoneyMsg::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& MoneyMsg::block_name() const {
  return *block_name_;
}
inline void MoneyMsg::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void MoneyMsg::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void MoneyMsg::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MoneyMsg::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* MoneyMsg::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_type = 4;
inline bool MoneyMsg::has_stock_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoneyMsg::set_has_stock_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoneyMsg::clear_has_stock_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoneyMsg::clear_stock_type() {
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    stock_type_->clear();
  }
  clear_has_stock_type();
}
inline const ::std::string& MoneyMsg::stock_type() const {
  return *stock_type_;
}
inline void MoneyMsg::set_stock_type(const ::std::string& value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void MoneyMsg::set_stock_type(const char* value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void MoneyMsg::set_stock_type(const char* value, size_t size) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MoneyMsg::mutable_stock_type() {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  return stock_type_;
}
inline ::std::string* MoneyMsg::release_stock_type() {
  clear_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_type_;
    stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .QuoteProto.MoneyFeild money_one_day = 5;
inline bool MoneyMsg::has_money_one_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MoneyMsg::set_has_money_one_day() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MoneyMsg::clear_has_money_one_day() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MoneyMsg::clear_money_one_day() {
  if (money_one_day_ != NULL) money_one_day_->::QuoteProto::MoneyFeild::Clear();
  clear_has_money_one_day();
}
inline const ::QuoteProto::MoneyFeild& MoneyMsg::money_one_day() const {
  return money_one_day_ != NULL ? *money_one_day_ : *default_instance_->money_one_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::mutable_money_one_day() {
  set_has_money_one_day();
  if (money_one_day_ == NULL) money_one_day_ = new ::QuoteProto::MoneyFeild;
  return money_one_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::release_money_one_day() {
  clear_has_money_one_day();
  ::QuoteProto::MoneyFeild* temp = money_one_day_;
  money_one_day_ = NULL;
  return temp;
}

// optional .QuoteProto.MoneyFeild money_three_day = 6;
inline bool MoneyMsg::has_money_three_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MoneyMsg::set_has_money_three_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MoneyMsg::clear_has_money_three_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MoneyMsg::clear_money_three_day() {
  if (money_three_day_ != NULL) money_three_day_->::QuoteProto::MoneyFeild::Clear();
  clear_has_money_three_day();
}
inline const ::QuoteProto::MoneyFeild& MoneyMsg::money_three_day() const {
  return money_three_day_ != NULL ? *money_three_day_ : *default_instance_->money_three_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::mutable_money_three_day() {
  set_has_money_three_day();
  if (money_three_day_ == NULL) money_three_day_ = new ::QuoteProto::MoneyFeild;
  return money_three_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::release_money_three_day() {
  clear_has_money_three_day();
  ::QuoteProto::MoneyFeild* temp = money_three_day_;
  money_three_day_ = NULL;
  return temp;
}

// optional .QuoteProto.MoneyFeild money_five_day = 7;
inline bool MoneyMsg::has_money_five_day() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MoneyMsg::set_has_money_five_day() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MoneyMsg::clear_has_money_five_day() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MoneyMsg::clear_money_five_day() {
  if (money_five_day_ != NULL) money_five_day_->::QuoteProto::MoneyFeild::Clear();
  clear_has_money_five_day();
}
inline const ::QuoteProto::MoneyFeild& MoneyMsg::money_five_day() const {
  return money_five_day_ != NULL ? *money_five_day_ : *default_instance_->money_five_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::mutable_money_five_day() {
  set_has_money_five_day();
  if (money_five_day_ == NULL) money_five_day_ = new ::QuoteProto::MoneyFeild;
  return money_five_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::release_money_five_day() {
  clear_has_money_five_day();
  ::QuoteProto::MoneyFeild* temp = money_five_day_;
  money_five_day_ = NULL;
  return temp;
}

// optional .QuoteProto.MoneyFeild money_ten_day = 8;
inline bool MoneyMsg::has_money_ten_day() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MoneyMsg::set_has_money_ten_day() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MoneyMsg::clear_has_money_ten_day() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MoneyMsg::clear_money_ten_day() {
  if (money_ten_day_ != NULL) money_ten_day_->::QuoteProto::MoneyFeild::Clear();
  clear_has_money_ten_day();
}
inline const ::QuoteProto::MoneyFeild& MoneyMsg::money_ten_day() const {
  return money_ten_day_ != NULL ? *money_ten_day_ : *default_instance_->money_ten_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::mutable_money_ten_day() {
  set_has_money_ten_day();
  if (money_ten_day_ == NULL) money_ten_day_ = new ::QuoteProto::MoneyFeild;
  return money_ten_day_;
}
inline ::QuoteProto::MoneyFeild* MoneyMsg::release_money_ten_day() {
  clear_has_money_ten_day();
  ::QuoteProto::MoneyFeild* temp = money_ten_day_;
  money_ten_day_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// FundAbnormalMsg

// optional string stock_code = 1;
inline bool FundAbnormalMsg::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FundAbnormalMsg::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FundAbnormalMsg::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FundAbnormalMsg::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& FundAbnormalMsg::stock_code() const {
  return *stock_code_;
}
inline void FundAbnormalMsg::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void FundAbnormalMsg::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void FundAbnormalMsg::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FundAbnormalMsg::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* FundAbnormalMsg::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_name = 2;
inline bool FundAbnormalMsg::has_stock_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FundAbnormalMsg::set_has_stock_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FundAbnormalMsg::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FundAbnormalMsg::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& FundAbnormalMsg::stock_name() const {
  return *stock_name_;
}
inline void FundAbnormalMsg::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void FundAbnormalMsg::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void FundAbnormalMsg::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FundAbnormalMsg::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* FundAbnormalMsg::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_type = 3;
inline bool FundAbnormalMsg::has_stock_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FundAbnormalMsg::set_has_stock_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FundAbnormalMsg::clear_has_stock_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FundAbnormalMsg::clear_stock_type() {
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    stock_type_->clear();
  }
  clear_has_stock_type();
}
inline const ::std::string& FundAbnormalMsg::stock_type() const {
  return *stock_type_;
}
inline void FundAbnormalMsg::set_stock_type(const ::std::string& value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void FundAbnormalMsg::set_stock_type(const char* value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void FundAbnormalMsg::set_stock_type(const char* value, size_t size) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FundAbnormalMsg::mutable_stock_type() {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  return stock_type_;
}
inline ::std::string* FundAbnormalMsg::release_stock_type() {
  clear_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_type_;
    stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string block_name = 4;
inline bool FundAbnormalMsg::has_block_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FundAbnormalMsg::set_has_block_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FundAbnormalMsg::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FundAbnormalMsg::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& FundAbnormalMsg::block_name() const {
  return *block_name_;
}
inline void FundAbnormalMsg::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void FundAbnormalMsg::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void FundAbnormalMsg::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FundAbnormalMsg::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* FundAbnormalMsg::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float rate = 5;
inline bool FundAbnormalMsg::has_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FundAbnormalMsg::set_has_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FundAbnormalMsg::clear_has_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FundAbnormalMsg::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float FundAbnormalMsg::rate() const {
  return rate_;
}
inline void FundAbnormalMsg::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional float thirty_rate = 6;
inline bool FundAbnormalMsg::has_thirty_rate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FundAbnormalMsg::set_has_thirty_rate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FundAbnormalMsg::clear_has_thirty_rate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FundAbnormalMsg::clear_thirty_rate() {
  thirty_rate_ = 0;
  clear_has_thirty_rate();
}
inline float FundAbnormalMsg::thirty_rate() const {
  return thirty_rate_;
}
inline void FundAbnormalMsg::set_thirty_rate(float value) {
  set_has_thirty_rate();
  thirty_rate_ = value;
}

// optional int64 active_netput = 7;
inline bool FundAbnormalMsg::has_active_netput() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FundAbnormalMsg::set_has_active_netput() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FundAbnormalMsg::clear_has_active_netput() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FundAbnormalMsg::clear_active_netput() {
  active_netput_ = GOOGLE_LONGLONG(0);
  clear_has_active_netput();
}
inline ::google::protobuf::int64 FundAbnormalMsg::active_netput() const {
  return active_netput_;
}
inline void FundAbnormalMsg::set_active_netput(::google::protobuf::int64 value) {
  set_has_active_netput();
  active_netput_ = value;
}

// optional int64 thirty_active_netput = 8;
inline bool FundAbnormalMsg::has_thirty_active_netput() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FundAbnormalMsg::set_has_thirty_active_netput() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FundAbnormalMsg::clear_has_thirty_active_netput() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FundAbnormalMsg::clear_thirty_active_netput() {
  thirty_active_netput_ = GOOGLE_LONGLONG(0);
  clear_has_thirty_active_netput();
}
inline ::google::protobuf::int64 FundAbnormalMsg::thirty_active_netput() const {
  return thirty_active_netput_;
}
inline void FundAbnormalMsg::set_thirty_active_netput(::google::protobuf::int64 value) {
  set_has_thirty_active_netput();
  thirty_active_netput_ = value;
}

// optional int64 leader_netput = 9;
inline bool FundAbnormalMsg::has_leader_netput() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FundAbnormalMsg::set_has_leader_netput() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FundAbnormalMsg::clear_has_leader_netput() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FundAbnormalMsg::clear_leader_netput() {
  leader_netput_ = GOOGLE_LONGLONG(0);
  clear_has_leader_netput();
}
inline ::google::protobuf::int64 FundAbnormalMsg::leader_netput() const {
  return leader_netput_;
}
inline void FundAbnormalMsg::set_leader_netput(::google::protobuf::int64 value) {
  set_has_leader_netput();
  leader_netput_ = value;
}

// optional float avtive_rate = 10;
inline bool FundAbnormalMsg::has_avtive_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FundAbnormalMsg::set_has_avtive_rate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FundAbnormalMsg::clear_has_avtive_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FundAbnormalMsg::clear_avtive_rate() {
  avtive_rate_ = 0;
  clear_has_avtive_rate();
}
inline float FundAbnormalMsg::avtive_rate() const {
  return avtive_rate_;
}
inline void FundAbnormalMsg::set_avtive_rate(float value) {
  set_has_avtive_rate();
  avtive_rate_ = value;
}

// optional float leader_rate = 11;
inline bool FundAbnormalMsg::has_leader_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FundAbnormalMsg::set_has_leader_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FundAbnormalMsg::clear_has_leader_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FundAbnormalMsg::clear_leader_rate() {
  leader_rate_ = 0;
  clear_has_leader_rate();
}
inline float FundAbnormalMsg::leader_rate() const {
  return leader_rate_;
}
inline void FundAbnormalMsg::set_leader_rate(float value) {
  set_has_leader_rate();
  leader_rate_ = value;
}

// optional float turnover_rate = 12;
inline bool FundAbnormalMsg::has_turnover_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FundAbnormalMsg::set_has_turnover_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FundAbnormalMsg::clear_has_turnover_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FundAbnormalMsg::clear_turnover_rate() {
  turnover_rate_ = 0;
  clear_has_turnover_rate();
}
inline float FundAbnormalMsg::turnover_rate() const {
  return turnover_rate_;
}
inline void FundAbnormalMsg::set_turnover_rate(float value) {
  set_has_turnover_rate();
  turnover_rate_ = value;
}

// optional float ratio = 13;
inline bool FundAbnormalMsg::has_ratio() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FundAbnormalMsg::set_has_ratio() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FundAbnormalMsg::clear_has_ratio() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FundAbnormalMsg::clear_ratio() {
  ratio_ = 0;
  clear_has_ratio();
}
inline float FundAbnormalMsg::ratio() const {
  return ratio_;
}
inline void FundAbnormalMsg::set_ratio(float value) {
  set_has_ratio();
  ratio_ = value;
}

// optional uint64 cir_value = 14;
inline bool FundAbnormalMsg::has_cir_value() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FundAbnormalMsg::set_has_cir_value() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FundAbnormalMsg::clear_has_cir_value() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FundAbnormalMsg::clear_cir_value() {
  cir_value_ = GOOGLE_ULONGLONG(0);
  clear_has_cir_value();
}
inline ::google::protobuf::uint64 FundAbnormalMsg::cir_value() const {
  return cir_value_;
}
inline void FundAbnormalMsg::set_cir_value(::google::protobuf::uint64 value) {
  set_has_cir_value();
  cir_value_ = value;
}

// optional float ped = 15;
inline bool FundAbnormalMsg::has_ped() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FundAbnormalMsg::set_has_ped() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FundAbnormalMsg::clear_has_ped() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FundAbnormalMsg::clear_ped() {
  ped_ = 0;
  clear_has_ped();
}
inline float FundAbnormalMsg::ped() const {
  return ped_;
}
inline void FundAbnormalMsg::set_ped(float value) {
  set_has_ped();
  ped_ = value;
}

// optional int64 three_avtive_netput = 16;
inline bool FundAbnormalMsg::has_three_avtive_netput() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FundAbnormalMsg::set_has_three_avtive_netput() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FundAbnormalMsg::clear_has_three_avtive_netput() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FundAbnormalMsg::clear_three_avtive_netput() {
  three_avtive_netput_ = GOOGLE_LONGLONG(0);
  clear_has_three_avtive_netput();
}
inline ::google::protobuf::int64 FundAbnormalMsg::three_avtive_netput() const {
  return three_avtive_netput_;
}
inline void FundAbnormalMsg::set_three_avtive_netput(::google::protobuf::int64 value) {
  set_has_three_avtive_netput();
  three_avtive_netput_ = value;
}

// optional float three_rate = 17;
inline bool FundAbnormalMsg::has_three_rate() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void FundAbnormalMsg::set_has_three_rate() {
  _has_bits_[0] |= 0x00010000u;
}
inline void FundAbnormalMsg::clear_has_three_rate() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void FundAbnormalMsg::clear_three_rate() {
  three_rate_ = 0;
  clear_has_three_rate();
}
inline float FundAbnormalMsg::three_rate() const {
  return three_rate_;
}
inline void FundAbnormalMsg::set_three_rate(float value) {
  set_has_three_rate();
  three_rate_ = value;
}

// optional int64 five_avtive_netput = 18;
inline bool FundAbnormalMsg::has_five_avtive_netput() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void FundAbnormalMsg::set_has_five_avtive_netput() {
  _has_bits_[0] |= 0x00020000u;
}
inline void FundAbnormalMsg::clear_has_five_avtive_netput() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void FundAbnormalMsg::clear_five_avtive_netput() {
  five_avtive_netput_ = GOOGLE_LONGLONG(0);
  clear_has_five_avtive_netput();
}
inline ::google::protobuf::int64 FundAbnormalMsg::five_avtive_netput() const {
  return five_avtive_netput_;
}
inline void FundAbnormalMsg::set_five_avtive_netput(::google::protobuf::int64 value) {
  set_has_five_avtive_netput();
  five_avtive_netput_ = value;
}

// optional float five_rate = 19;
inline bool FundAbnormalMsg::has_five_rate() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void FundAbnormalMsg::set_has_five_rate() {
  _has_bits_[0] |= 0x00040000u;
}
inline void FundAbnormalMsg::clear_has_five_rate() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void FundAbnormalMsg::clear_five_rate() {
  five_rate_ = 0;
  clear_has_five_rate();
}
inline float FundAbnormalMsg::five_rate() const {
  return five_rate_;
}
inline void FundAbnormalMsg::set_five_rate(float value) {
  set_has_five_rate();
  five_rate_ = value;
}

// optional uint32 last_pice = 20;
inline bool FundAbnormalMsg::has_last_pice() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void FundAbnormalMsg::set_has_last_pice() {
  _has_bits_[0] |= 0x00080000u;
}
inline void FundAbnormalMsg::clear_has_last_pice() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void FundAbnormalMsg::clear_last_pice() {
  last_pice_ = 0u;
  clear_has_last_pice();
}
inline ::google::protobuf::uint32 FundAbnormalMsg::last_pice() const {
  return last_pice_;
}
inline void FundAbnormalMsg::set_last_pice(::google::protobuf::uint32 value) {
  set_has_last_pice();
  last_pice_ = value;
}

// -------------------------------------------------------------------

// BidMsg

// optional string stock_code = 1;
inline bool BidMsg::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidMsg::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidMsg::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidMsg::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& BidMsg::stock_code() const {
  return *stock_code_;
}
inline void BidMsg::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void BidMsg::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void BidMsg::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidMsg::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* BidMsg::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_type = 2;
inline bool BidMsg::has_stock_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidMsg::set_has_stock_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidMsg::clear_has_stock_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidMsg::clear_stock_type() {
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    stock_type_->clear();
  }
  clear_has_stock_type();
}
inline const ::std::string& BidMsg::stock_type() const {
  return *stock_type_;
}
inline void BidMsg::set_stock_type(const ::std::string& value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void BidMsg::set_stock_type(const char* value) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(value);
}
inline void BidMsg::set_stock_type(const char* value, size_t size) {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  stock_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidMsg::mutable_stock_type() {
  set_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    stock_type_ = new ::std::string;
  }
  return stock_type_;
}
inline ::std::string* BidMsg::release_stock_type() {
  clear_has_stock_type();
  if (stock_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_type_;
    stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_name = 3;
inline bool BidMsg::has_stock_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidMsg::set_has_stock_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidMsg::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidMsg::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& BidMsg::stock_name() const {
  return *stock_name_;
}
inline void BidMsg::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void BidMsg::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void BidMsg::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidMsg::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* BidMsg::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 trading_day = 4;
inline bool BidMsg::has_trading_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidMsg::set_has_trading_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidMsg::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidMsg::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 BidMsg::trading_day() const {
  return trading_day_;
}
inline void BidMsg::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// optional float bidding_rise = 5;
inline bool BidMsg::has_bidding_rise() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidMsg::set_has_bidding_rise() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidMsg::clear_has_bidding_rise() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidMsg::clear_bidding_rise() {
  bidding_rise_ = 0;
  clear_has_bidding_rise();
}
inline float BidMsg::bidding_rise() const {
  return bidding_rise_;
}
inline void BidMsg::set_bidding_rise(float value) {
  set_has_bidding_rise();
  bidding_rise_ = value;
}

// optional uint64 main_funds = 6;
inline bool BidMsg::has_main_funds() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BidMsg::set_has_main_funds() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BidMsg::clear_has_main_funds() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BidMsg::clear_main_funds() {
  main_funds_ = GOOGLE_ULONGLONG(0);
  clear_has_main_funds();
}
inline ::google::protobuf::uint64 BidMsg::main_funds() const {
  return main_funds_;
}
inline void BidMsg::set_main_funds(::google::protobuf::uint64 value) {
  set_has_main_funds();
  main_funds_ = value;
}

// optional int64 bidding_quantity_than = 7;
inline bool BidMsg::has_bidding_quantity_than() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BidMsg::set_has_bidding_quantity_than() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BidMsg::clear_has_bidding_quantity_than() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BidMsg::clear_bidding_quantity_than() {
  bidding_quantity_than_ = GOOGLE_LONGLONG(0);
  clear_has_bidding_quantity_than();
}
inline ::google::protobuf::int64 BidMsg::bidding_quantity_than() const {
  return bidding_quantity_than_;
}
inline void BidMsg::set_bidding_quantity_than(::google::protobuf::int64 value) {
  set_has_bidding_quantity_than();
  bidding_quantity_than_ = value;
}

// optional string plate = 8;
inline bool BidMsg::has_plate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BidMsg::set_has_plate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BidMsg::clear_has_plate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BidMsg::clear_plate() {
  if (plate_ != &::google::protobuf::internal::kEmptyString) {
    plate_->clear();
  }
  clear_has_plate();
}
inline const ::std::string& BidMsg::plate() const {
  return *plate_;
}
inline void BidMsg::set_plate(const ::std::string& value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
}
inline void BidMsg::set_plate(const char* value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
}
inline void BidMsg::set_plate(const char* value, size_t size) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  plate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidMsg::mutable_plate() {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  return plate_;
}
inline ::std::string* BidMsg::release_plate() {
  clear_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plate_;
    plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 bidding_volume = 9;
inline bool BidMsg::has_bidding_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BidMsg::set_has_bidding_volume() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BidMsg::clear_has_bidding_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BidMsg::clear_bidding_volume() {
  bidding_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_bidding_volume();
}
inline ::google::protobuf::uint64 BidMsg::bidding_volume() const {
  return bidding_volume_;
}
inline void BidMsg::set_bidding_volume(::google::protobuf::uint64 value) {
  set_has_bidding_volume();
  bidding_volume_ = value;
}

// optional uint64 bidding_turnover = 10;
inline bool BidMsg::has_bidding_turnover() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BidMsg::set_has_bidding_turnover() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BidMsg::clear_has_bidding_turnover() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BidMsg::clear_bidding_turnover() {
  bidding_turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_bidding_turnover();
}
inline ::google::protobuf::uint64 BidMsg::bidding_turnover() const {
  return bidding_turnover_;
}
inline void BidMsg::set_bidding_turnover(::google::protobuf::uint64 value) {
  set_has_bidding_turnover();
  bidding_turnover_ = value;
}

// optional uint32 bidding_price = 11;
inline bool BidMsg::has_bidding_price() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BidMsg::set_has_bidding_price() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BidMsg::clear_has_bidding_price() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BidMsg::clear_bidding_price() {
  bidding_price_ = 0u;
  clear_has_bidding_price();
}
inline ::google::protobuf::uint32 BidMsg::bidding_price() const {
  return bidding_price_;
}
inline void BidMsg::set_bidding_price(::google::protobuf::uint32 value) {
  set_has_bidding_price();
  bidding_price_ = value;
}

// optional uint64 bidding_volume1 = 12;
inline bool BidMsg::has_bidding_volume1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BidMsg::set_has_bidding_volume1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BidMsg::clear_has_bidding_volume1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BidMsg::clear_bidding_volume1() {
  bidding_volume1_ = GOOGLE_ULONGLONG(0);
  clear_has_bidding_volume1();
}
inline ::google::protobuf::uint64 BidMsg::bidding_volume1() const {
  return bidding_volume1_;
}
inline void BidMsg::set_bidding_volume1(::google::protobuf::uint64 value) {
  set_has_bidding_volume1();
  bidding_volume1_ = value;
}

// optional uint64 current_value = 13;
inline bool BidMsg::has_current_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BidMsg::set_has_current_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BidMsg::clear_has_current_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BidMsg::clear_current_value() {
  current_value_ = GOOGLE_ULONGLONG(0);
  clear_has_current_value();
}
inline ::google::protobuf::uint64 BidMsg::current_value() const {
  return current_value_;
}
inline void BidMsg::set_current_value(::google::protobuf::uint64 value) {
  set_has_current_value();
  current_value_ = value;
}

// optional float yesterday_rate = 14;
inline bool BidMsg::has_yesterday_rate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BidMsg::set_has_yesterday_rate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BidMsg::clear_has_yesterday_rate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BidMsg::clear_yesterday_rate() {
  yesterday_rate_ = 0;
  clear_has_yesterday_rate();
}
inline float BidMsg::yesterday_rate() const {
  return yesterday_rate_;
}
inline void BidMsg::set_yesterday_rate(float value) {
  set_has_yesterday_rate();
  yesterday_rate_ = value;
}

// optional uint32 trade_status = 15;
inline bool BidMsg::has_trade_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BidMsg::set_has_trade_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BidMsg::clear_has_trade_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BidMsg::clear_trade_status() {
  trade_status_ = 0u;
  clear_has_trade_status();
}
inline ::google::protobuf::uint32 BidMsg::trade_status() const {
  return trade_status_;
}
inline void BidMsg::set_trade_status(::google::protobuf::uint32 value) {
  set_has_trade_status();
  trade_status_ = value;
}

// optional uint32 update_time = 16;
inline bool BidMsg::has_update_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BidMsg::set_has_update_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BidMsg::clear_has_update_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BidMsg::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 BidMsg::update_time() const {
  return update_time_;
}
inline void BidMsg::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// -------------------------------------------------------------------

// BidBlockMsg

// optional string block_code = 1;
inline bool BidBlockMsg::has_block_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidBlockMsg::set_has_block_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidBlockMsg::clear_has_block_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidBlockMsg::clear_block_code() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    block_code_->clear();
  }
  clear_has_block_code();
}
inline const ::std::string& BidBlockMsg::block_code() const {
  return *block_code_;
}
inline void BidBlockMsg::set_block_code(const ::std::string& value) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(value);
}
inline void BidBlockMsg::set_block_code(const char* value) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(value);
}
inline void BidBlockMsg::set_block_code(const char* value, size_t size) {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  block_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidBlockMsg::mutable_block_code() {
  set_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    block_code_ = new ::std::string;
  }
  return block_code_;
}
inline ::std::string* BidBlockMsg::release_block_code() {
  clear_has_block_code();
  if (block_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_code_;
    block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string block_name = 2;
inline bool BidBlockMsg::has_block_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidBlockMsg::set_has_block_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidBlockMsg::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidBlockMsg::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& BidBlockMsg::block_name() const {
  return *block_name_;
}
inline void BidBlockMsg::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void BidBlockMsg::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void BidBlockMsg::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidBlockMsg::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* BidBlockMsg::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float rate = 3;
inline bool BidBlockMsg::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidBlockMsg::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidBlockMsg::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidBlockMsg::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float BidBlockMsg::rate() const {
  return rate_;
}
inline void BidBlockMsg::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional uint32 update_time_sec = 4;
inline bool BidBlockMsg::has_update_time_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidBlockMsg::set_has_update_time_sec() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidBlockMsg::clear_has_update_time_sec() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidBlockMsg::clear_update_time_sec() {
  update_time_sec_ = 0u;
  clear_has_update_time_sec();
}
inline ::google::protobuf::uint32 BidBlockMsg::update_time_sec() const {
  return update_time_sec_;
}
inline void BidBlockMsg::set_update_time_sec(::google::protobuf::uint32 value) {
  set_has_update_time_sec();
  update_time_sec_ = value;
}

// -------------------------------------------------------------------

// BidClientMsg

// optional .QuoteProto.BidMsg base_info = 1;
inline bool BidClientMsg::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BidClientMsg::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BidClientMsg::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BidClientMsg::clear_base_info() {
  if (base_info_ != NULL) base_info_->::QuoteProto::BidMsg::Clear();
  clear_has_base_info();
}
inline const ::QuoteProto::BidMsg& BidClientMsg::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::QuoteProto::BidMsg* BidClientMsg::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::QuoteProto::BidMsg;
  return base_info_;
}
inline ::QuoteProto::BidMsg* BidClientMsg::release_base_info() {
  clear_has_base_info();
  ::QuoteProto::BidMsg* temp = base_info_;
  base_info_ = NULL;
  return temp;
}

// optional uint32 last_pice = 2;
inline bool BidClientMsg::has_last_pice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BidClientMsg::set_has_last_pice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BidClientMsg::clear_has_last_pice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BidClientMsg::clear_last_pice() {
  last_pice_ = 0u;
  clear_has_last_pice();
}
inline ::google::protobuf::uint32 BidClientMsg::last_pice() const {
  return last_pice_;
}
inline void BidClientMsg::set_last_pice(::google::protobuf::uint32 value) {
  set_has_last_pice();
  last_pice_ = value;
}

// optional float rate = 3;
inline bool BidClientMsg::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BidClientMsg::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BidClientMsg::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BidClientMsg::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float BidClientMsg::rate() const {
  return rate_;
}
inline void BidClientMsg::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional uint32 pre_close_price = 4;
inline bool BidClientMsg::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BidClientMsg::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BidClientMsg::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BidClientMsg::clear_pre_close_price() {
  pre_close_price_ = 0u;
  clear_has_pre_close_price();
}
inline ::google::protobuf::uint32 BidClientMsg::pre_close_price() const {
  return pre_close_price_;
}
inline void BidClientMsg::set_pre_close_price(::google::protobuf::uint32 value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}

// optional uint64 upsert_time = 5;
inline bool BidClientMsg::has_upsert_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BidClientMsg::set_has_upsert_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BidClientMsg::clear_has_upsert_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BidClientMsg::clear_upsert_time() {
  upsert_time_ = GOOGLE_ULONGLONG(0);
  clear_has_upsert_time();
}
inline ::google::protobuf::uint64 BidClientMsg::upsert_time() const {
  return upsert_time_;
}
inline void BidClientMsg::set_upsert_time(::google::protobuf::uint64 value) {
  set_has_upsert_time();
  upsert_time_ = value;
}

// -------------------------------------------------------------------

// BlockFundAbnormalItem

// optional .QuoteProto.StockMsg block_info = 1;
inline bool BlockFundAbnormalItem::has_block_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockFundAbnormalItem::set_has_block_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockFundAbnormalItem::clear_has_block_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockFundAbnormalItem::clear_block_info() {
  if (block_info_ != NULL) block_info_->::QuoteProto::StockMsg::Clear();
  clear_has_block_info();
}
inline const ::QuoteProto::StockMsg& BlockFundAbnormalItem::block_info() const {
  return block_info_ != NULL ? *block_info_ : *default_instance_->block_info_;
}
inline ::QuoteProto::StockMsg* BlockFundAbnormalItem::mutable_block_info() {
  set_has_block_info();
  if (block_info_ == NULL) block_info_ = new ::QuoteProto::StockMsg;
  return block_info_;
}
inline ::QuoteProto::StockMsg* BlockFundAbnormalItem::release_block_info() {
  clear_has_block_info();
  ::QuoteProto::StockMsg* temp = block_info_;
  block_info_ = NULL;
  return temp;
}

// repeated .QuoteProto.StockMsg stk = 2;
inline int BlockFundAbnormalItem::stk_size() const {
  return stk_.size();
}
inline void BlockFundAbnormalItem::clear_stk() {
  stk_.Clear();
}
inline const ::QuoteProto::StockMsg& BlockFundAbnormalItem::stk(int index) const {
  return stk_.Get(index);
}
inline ::QuoteProto::StockMsg* BlockFundAbnormalItem::mutable_stk(int index) {
  return stk_.Mutable(index);
}
inline ::QuoteProto::StockMsg* BlockFundAbnormalItem::add_stk() {
  return stk_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::StockMsg >&
BlockFundAbnormalItem::stk() const {
  return stk_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::StockMsg >*
BlockFundAbnormalItem::mutable_stk() {
  return &stk_;
}

// -------------------------------------------------------------------

// RiseFallMonitorNumMsg

// optional int32 real_time_num = 1;
inline bool RiseFallMonitorNumMsg::has_real_time_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_real_time_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RiseFallMonitorNumMsg::clear_has_real_time_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RiseFallMonitorNumMsg::clear_real_time_num() {
  real_time_num_ = 0;
  clear_has_real_time_num();
}
inline ::google::protobuf::int32 RiseFallMonitorNumMsg::real_time_num() const {
  return real_time_num_;
}
inline void RiseFallMonitorNumMsg::set_real_time_num(::google::protobuf::int32 value) {
  set_has_real_time_num();
  real_time_num_ = value;
}

// optional uint32 natural_num = 2;
inline bool RiseFallMonitorNumMsg::has_natural_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_natural_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RiseFallMonitorNumMsg::clear_has_natural_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RiseFallMonitorNumMsg::clear_natural_num() {
  natural_num_ = 0u;
  clear_has_natural_num();
}
inline ::google::protobuf::uint32 RiseFallMonitorNumMsg::natural_num() const {
  return natural_num_;
}
inline void RiseFallMonitorNumMsg::set_natural_num(::google::protobuf::uint32 value) {
  set_has_natural_num();
  natural_num_ = value;
}

// optional uint32 continuous_num = 3;
inline bool RiseFallMonitorNumMsg::has_continuous_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_continuous_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RiseFallMonitorNumMsg::clear_has_continuous_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RiseFallMonitorNumMsg::clear_continuous_num() {
  continuous_num_ = 0u;
  clear_has_continuous_num();
}
inline ::google::protobuf::uint32 RiseFallMonitorNumMsg::continuous_num() const {
  return continuous_num_;
}
inline void RiseFallMonitorNumMsg::set_continuous_num(::google::protobuf::uint32 value) {
  set_has_continuous_num();
  continuous_num_ = value;
}

// optional uint32 aword_plate = 4;
inline bool RiseFallMonitorNumMsg::has_aword_plate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_aword_plate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RiseFallMonitorNumMsg::clear_has_aword_plate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RiseFallMonitorNumMsg::clear_aword_plate() {
  aword_plate_ = 0u;
  clear_has_aword_plate();
}
inline ::google::protobuf::uint32 RiseFallMonitorNumMsg::aword_plate() const {
  return aword_plate_;
}
inline void RiseFallMonitorNumMsg::set_aword_plate(::google::protobuf::uint32 value) {
  set_has_aword_plate();
  aword_plate_ = value;
}

// optional float sealing_plate_rate = 5;
inline bool RiseFallMonitorNumMsg::has_sealing_plate_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_sealing_plate_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RiseFallMonitorNumMsg::clear_has_sealing_plate_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RiseFallMonitorNumMsg::clear_sealing_plate_rate() {
  sealing_plate_rate_ = 0;
  clear_has_sealing_plate_rate();
}
inline float RiseFallMonitorNumMsg::sealing_plate_rate() const {
  return sealing_plate_rate_;
}
inline void RiseFallMonitorNumMsg::set_sealing_plate_rate(float value) {
  set_has_sealing_plate_rate();
  sealing_plate_rate_ = value;
}

// optional uint32 fried_plate = 6;
inline bool RiseFallMonitorNumMsg::has_fried_plate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_fried_plate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RiseFallMonitorNumMsg::clear_has_fried_plate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RiseFallMonitorNumMsg::clear_fried_plate() {
  fried_plate_ = 0u;
  clear_has_fried_plate();
}
inline ::google::protobuf::uint32 RiseFallMonitorNumMsg::fried_plate() const {
  return fried_plate_;
}
inline void RiseFallMonitorNumMsg::set_fried_plate(::google::protobuf::uint32 value) {
  set_has_fried_plate();
  fried_plate_ = value;
}

// optional float yeaterday_limit_rate = 7;
inline bool RiseFallMonitorNumMsg::has_yeaterday_limit_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_yeaterday_limit_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RiseFallMonitorNumMsg::clear_has_yeaterday_limit_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RiseFallMonitorNumMsg::clear_yeaterday_limit_rate() {
  yeaterday_limit_rate_ = 0;
  clear_has_yeaterday_limit_rate();
}
inline float RiseFallMonitorNumMsg::yeaterday_limit_rate() const {
  return yeaterday_limit_rate_;
}
inline void RiseFallMonitorNumMsg::set_yeaterday_limit_rate(float value) {
  set_has_yeaterday_limit_rate();
  yeaterday_limit_rate_ = value;
}

// optional float yeaterday_high_open_rate = 8;
inline bool RiseFallMonitorNumMsg::has_yeaterday_high_open_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_yeaterday_high_open_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RiseFallMonitorNumMsg::clear_has_yeaterday_high_open_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RiseFallMonitorNumMsg::clear_yeaterday_high_open_rate() {
  yeaterday_high_open_rate_ = 0;
  clear_has_yeaterday_high_open_rate();
}
inline float RiseFallMonitorNumMsg::yeaterday_high_open_rate() const {
  return yeaterday_high_open_rate_;
}
inline void RiseFallMonitorNumMsg::set_yeaterday_high_open_rate(float value) {
  set_has_yeaterday_high_open_rate();
  yeaterday_high_open_rate_ = value;
}

// optional int32 yeaterday_profit_rate = 9;
inline bool RiseFallMonitorNumMsg::has_yeaterday_profit_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_yeaterday_profit_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RiseFallMonitorNumMsg::clear_has_yeaterday_profit_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RiseFallMonitorNumMsg::clear_yeaterday_profit_rate() {
  yeaterday_profit_rate_ = 0;
  clear_has_yeaterday_profit_rate();
}
inline ::google::protobuf::int32 RiseFallMonitorNumMsg::yeaterday_profit_rate() const {
  return yeaterday_profit_rate_;
}
inline void RiseFallMonitorNumMsg::set_yeaterday_profit_rate(::google::protobuf::int32 value) {
  set_has_yeaterday_profit_rate();
  yeaterday_profit_rate_ = value;
}

// optional float yeaterday_continuous_limit_rate = 10;
inline bool RiseFallMonitorNumMsg::has_yeaterday_continuous_limit_rate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_yeaterday_continuous_limit_rate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RiseFallMonitorNumMsg::clear_has_yeaterday_continuous_limit_rate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RiseFallMonitorNumMsg::clear_yeaterday_continuous_limit_rate() {
  yeaterday_continuous_limit_rate_ = 0;
  clear_has_yeaterday_continuous_limit_rate();
}
inline float RiseFallMonitorNumMsg::yeaterday_continuous_limit_rate() const {
  return yeaterday_continuous_limit_rate_;
}
inline void RiseFallMonitorNumMsg::set_yeaterday_continuous_limit_rate(float value) {
  set_has_yeaterday_continuous_limit_rate();
  yeaterday_continuous_limit_rate_ = value;
}

// optional float yeaterday_continuous_high_open_rate = 11;
inline bool RiseFallMonitorNumMsg::has_yeaterday_continuous_high_open_rate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_yeaterday_continuous_high_open_rate() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RiseFallMonitorNumMsg::clear_has_yeaterday_continuous_high_open_rate() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RiseFallMonitorNumMsg::clear_yeaterday_continuous_high_open_rate() {
  yeaterday_continuous_high_open_rate_ = 0;
  clear_has_yeaterday_continuous_high_open_rate();
}
inline float RiseFallMonitorNumMsg::yeaterday_continuous_high_open_rate() const {
  return yeaterday_continuous_high_open_rate_;
}
inline void RiseFallMonitorNumMsg::set_yeaterday_continuous_high_open_rate(float value) {
  set_has_yeaterday_continuous_high_open_rate();
  yeaterday_continuous_high_open_rate_ = value;
}

// optional int32 yeaterday_continuous_profit_rate = 12;
inline bool RiseFallMonitorNumMsg::has_yeaterday_continuous_profit_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_yeaterday_continuous_profit_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RiseFallMonitorNumMsg::clear_has_yeaterday_continuous_profit_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RiseFallMonitorNumMsg::clear_yeaterday_continuous_profit_rate() {
  yeaterday_continuous_profit_rate_ = 0;
  clear_has_yeaterday_continuous_profit_rate();
}
inline ::google::protobuf::int32 RiseFallMonitorNumMsg::yeaterday_continuous_profit_rate() const {
  return yeaterday_continuous_profit_rate_;
}
inline void RiseFallMonitorNumMsg::set_yeaterday_continuous_profit_rate(::google::protobuf::int32 value) {
  set_has_yeaterday_continuous_profit_rate();
  yeaterday_continuous_profit_rate_ = value;
}

// optional uint32 update_time_sec = 13;
inline bool RiseFallMonitorNumMsg::has_update_time_sec() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_update_time_sec() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RiseFallMonitorNumMsg::clear_has_update_time_sec() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RiseFallMonitorNumMsg::clear_update_time_sec() {
  update_time_sec_ = 0u;
  clear_has_update_time_sec();
}
inline ::google::protobuf::uint32 RiseFallMonitorNumMsg::update_time_sec() const {
  return update_time_sec_;
}
inline void RiseFallMonitorNumMsg::set_update_time_sec(::google::protobuf::uint32 value) {
  set_has_update_time_sec();
  update_time_sec_ = value;
}

// optional uint32 trading_day = 14;
inline bool RiseFallMonitorNumMsg::has_trading_day() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RiseFallMonitorNumMsg::set_has_trading_day() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RiseFallMonitorNumMsg::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RiseFallMonitorNumMsg::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 RiseFallMonitorNumMsg::trading_day() const {
  return trading_day_;
}
inline void RiseFallMonitorNumMsg::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// -------------------------------------------------------------------

// RateMsg

// optional uint32 message_type = 1;
inline bool RateMsg::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RateMsg::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RateMsg::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RateMsg::clear_message_type() {
  message_type_ = 0u;
  clear_has_message_type();
}
inline ::google::protobuf::uint32 RateMsg::message_type() const {
  return message_type_;
}
inline void RateMsg::set_message_type(::google::protobuf::uint32 value) {
  set_has_message_type();
  message_type_ = value;
}

// optional string security_code = 2;
inline bool RateMsg::has_security_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RateMsg::set_has_security_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RateMsg::clear_has_security_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RateMsg::clear_security_code() {
  if (security_code_ != &::google::protobuf::internal::kEmptyString) {
    security_code_->clear();
  }
  clear_has_security_code();
}
inline const ::std::string& RateMsg::security_code() const {
  return *security_code_;
}
inline void RateMsg::set_security_code(const ::std::string& value) {
  set_has_security_code();
  if (security_code_ == &::google::protobuf::internal::kEmptyString) {
    security_code_ = new ::std::string;
  }
  security_code_->assign(value);
}
inline void RateMsg::set_security_code(const char* value) {
  set_has_security_code();
  if (security_code_ == &::google::protobuf::internal::kEmptyString) {
    security_code_ = new ::std::string;
  }
  security_code_->assign(value);
}
inline void RateMsg::set_security_code(const char* value, size_t size) {
  set_has_security_code();
  if (security_code_ == &::google::protobuf::internal::kEmptyString) {
    security_code_ = new ::std::string;
  }
  security_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_security_code() {
  set_has_security_code();
  if (security_code_ == &::google::protobuf::internal::kEmptyString) {
    security_code_ = new ::std::string;
  }
  return security_code_;
}
inline ::std::string* RateMsg::release_security_code() {
  clear_has_security_code();
  if (security_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = security_code_;
    security_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string security_type = 3;
inline bool RateMsg::has_security_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RateMsg::set_has_security_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RateMsg::clear_has_security_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RateMsg::clear_security_type() {
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    security_type_->clear();
  }
  clear_has_security_type();
}
inline const ::std::string& RateMsg::security_type() const {
  return *security_type_;
}
inline void RateMsg::set_security_type(const ::std::string& value) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(value);
}
inline void RateMsg::set_security_type(const char* value) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(value);
}
inline void RateMsg::set_security_type(const char* value, size_t size) {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  security_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_security_type() {
  set_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    security_type_ = new ::std::string;
  }
  return security_type_;
}
inline ::std::string* RateMsg::release_security_type() {
  clear_has_security_type();
  if (security_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = security_type_;
    security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string security_name = 4;
inline bool RateMsg::has_security_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RateMsg::set_has_security_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RateMsg::clear_has_security_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RateMsg::clear_security_name() {
  if (security_name_ != &::google::protobuf::internal::kEmptyString) {
    security_name_->clear();
  }
  clear_has_security_name();
}
inline const ::std::string& RateMsg::security_name() const {
  return *security_name_;
}
inline void RateMsg::set_security_name(const ::std::string& value) {
  set_has_security_name();
  if (security_name_ == &::google::protobuf::internal::kEmptyString) {
    security_name_ = new ::std::string;
  }
  security_name_->assign(value);
}
inline void RateMsg::set_security_name(const char* value) {
  set_has_security_name();
  if (security_name_ == &::google::protobuf::internal::kEmptyString) {
    security_name_ = new ::std::string;
  }
  security_name_->assign(value);
}
inline void RateMsg::set_security_name(const char* value, size_t size) {
  set_has_security_name();
  if (security_name_ == &::google::protobuf::internal::kEmptyString) {
    security_name_ = new ::std::string;
  }
  security_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_security_name() {
  set_has_security_name();
  if (security_name_ == &::google::protobuf::internal::kEmptyString) {
    security_name_ = new ::std::string;
  }
  return security_name_;
}
inline ::std::string* RateMsg::release_security_name() {
  clear_has_security_name();
  if (security_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = security_name_;
    security_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float rise = 5;
inline bool RateMsg::has_rise() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RateMsg::set_has_rise() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RateMsg::clear_has_rise() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RateMsg::clear_rise() {
  rise_ = 0;
  clear_has_rise();
}
inline float RateMsg::rise() const {
  return rise_;
}
inline void RateMsg::set_rise(float value) {
  set_has_rise();
  rise_ = value;
}

// optional string plate = 6;
inline bool RateMsg::has_plate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RateMsg::set_has_plate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RateMsg::clear_has_plate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RateMsg::clear_plate() {
  if (plate_ != &::google::protobuf::internal::kEmptyString) {
    plate_->clear();
  }
  clear_has_plate();
}
inline const ::std::string& RateMsg::plate() const {
  return *plate_;
}
inline void RateMsg::set_plate(const ::std::string& value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
}
inline void RateMsg::set_plate(const char* value) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  plate_->assign(value);
}
inline void RateMsg::set_plate(const char* value, size_t size) {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  plate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_plate() {
  set_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    plate_ = new ::std::string;
  }
  return plate_;
}
inline ::std::string* RateMsg::release_plate() {
  clear_has_plate();
  if (plate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plate_;
    plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 up_limit_rate_time = 7;
inline bool RateMsg::has_up_limit_rate_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RateMsg::set_has_up_limit_rate_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RateMsg::clear_has_up_limit_rate_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RateMsg::clear_up_limit_rate_time() {
  up_limit_rate_time_ = 0u;
  clear_has_up_limit_rate_time();
}
inline ::google::protobuf::uint32 RateMsg::up_limit_rate_time() const {
  return up_limit_rate_time_;
}
inline void RateMsg::set_up_limit_rate_time(::google::protobuf::uint32 value) {
  set_has_up_limit_rate_time();
  up_limit_rate_time_ = value;
}

// optional string continuous_up_limit_rate = 8;
inline bool RateMsg::has_continuous_up_limit_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RateMsg::set_has_continuous_up_limit_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RateMsg::clear_has_continuous_up_limit_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RateMsg::clear_continuous_up_limit_rate() {
  if (continuous_up_limit_rate_ != &::google::protobuf::internal::kEmptyString) {
    continuous_up_limit_rate_->clear();
  }
  clear_has_continuous_up_limit_rate();
}
inline const ::std::string& RateMsg::continuous_up_limit_rate() const {
  return *continuous_up_limit_rate_;
}
inline void RateMsg::set_continuous_up_limit_rate(const ::std::string& value) {
  set_has_continuous_up_limit_rate();
  if (continuous_up_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_up_limit_rate_ = new ::std::string;
  }
  continuous_up_limit_rate_->assign(value);
}
inline void RateMsg::set_continuous_up_limit_rate(const char* value) {
  set_has_continuous_up_limit_rate();
  if (continuous_up_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_up_limit_rate_ = new ::std::string;
  }
  continuous_up_limit_rate_->assign(value);
}
inline void RateMsg::set_continuous_up_limit_rate(const char* value, size_t size) {
  set_has_continuous_up_limit_rate();
  if (continuous_up_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_up_limit_rate_ = new ::std::string;
  }
  continuous_up_limit_rate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_continuous_up_limit_rate() {
  set_has_continuous_up_limit_rate();
  if (continuous_up_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_up_limit_rate_ = new ::std::string;
  }
  return continuous_up_limit_rate_;
}
inline ::std::string* RateMsg::release_continuous_up_limit_rate() {
  clear_has_continuous_up_limit_rate();
  if (continuous_up_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = continuous_up_limit_rate_;
    continuous_up_limit_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string continuous_lower_limit_rate = 9;
inline bool RateMsg::has_continuous_lower_limit_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RateMsg::set_has_continuous_lower_limit_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RateMsg::clear_has_continuous_lower_limit_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RateMsg::clear_continuous_lower_limit_rate() {
  if (continuous_lower_limit_rate_ != &::google::protobuf::internal::kEmptyString) {
    continuous_lower_limit_rate_->clear();
  }
  clear_has_continuous_lower_limit_rate();
}
inline const ::std::string& RateMsg::continuous_lower_limit_rate() const {
  return *continuous_lower_limit_rate_;
}
inline void RateMsg::set_continuous_lower_limit_rate(const ::std::string& value) {
  set_has_continuous_lower_limit_rate();
  if (continuous_lower_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_lower_limit_rate_ = new ::std::string;
  }
  continuous_lower_limit_rate_->assign(value);
}
inline void RateMsg::set_continuous_lower_limit_rate(const char* value) {
  set_has_continuous_lower_limit_rate();
  if (continuous_lower_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_lower_limit_rate_ = new ::std::string;
  }
  continuous_lower_limit_rate_->assign(value);
}
inline void RateMsg::set_continuous_lower_limit_rate(const char* value, size_t size) {
  set_has_continuous_lower_limit_rate();
  if (continuous_lower_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_lower_limit_rate_ = new ::std::string;
  }
  continuous_lower_limit_rate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_continuous_lower_limit_rate() {
  set_has_continuous_lower_limit_rate();
  if (continuous_lower_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    continuous_lower_limit_rate_ = new ::std::string;
  }
  return continuous_lower_limit_rate_;
}
inline ::std::string* RateMsg::release_continuous_lower_limit_rate() {
  clear_has_continuous_lower_limit_rate();
  if (continuous_lower_limit_rate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = continuous_lower_limit_rate_;
    continuous_lower_limit_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 up_limit_volume = 10;
inline bool RateMsg::has_up_limit_volume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RateMsg::set_has_up_limit_volume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RateMsg::clear_has_up_limit_volume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RateMsg::clear_up_limit_volume() {
  up_limit_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_up_limit_volume();
}
inline ::google::protobuf::uint64 RateMsg::up_limit_volume() const {
  return up_limit_volume_;
}
inline void RateMsg::set_up_limit_volume(::google::protobuf::uint64 value) {
  set_has_up_limit_volume();
  up_limit_volume_ = value;
}

// optional uint64 lower_limit_volume = 11;
inline bool RateMsg::has_lower_limit_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RateMsg::set_has_lower_limit_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RateMsg::clear_has_lower_limit_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RateMsg::clear_lower_limit_volume() {
  lower_limit_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_lower_limit_volume();
}
inline ::google::protobuf::uint64 RateMsg::lower_limit_volume() const {
  return lower_limit_volume_;
}
inline void RateMsg::set_lower_limit_volume(::google::protobuf::uint64 value) {
  set_has_lower_limit_volume();
  lower_limit_volume_ = value;
}

// optional uint32 lower_limit_rate_time = 12;
inline bool RateMsg::has_lower_limit_rate_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RateMsg::set_has_lower_limit_rate_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RateMsg::clear_has_lower_limit_rate_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RateMsg::clear_lower_limit_rate_time() {
  lower_limit_rate_time_ = 0u;
  clear_has_lower_limit_rate_time();
}
inline ::google::protobuf::uint32 RateMsg::lower_limit_rate_time() const {
  return lower_limit_rate_time_;
}
inline void RateMsg::set_lower_limit_rate_time(::google::protobuf::uint32 value) {
  set_has_lower_limit_rate_time();
  lower_limit_rate_time_ = value;
}

// optional uint32 fried_time = 13;
inline bool RateMsg::has_fried_time() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RateMsg::set_has_fried_time() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RateMsg::clear_has_fried_time() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RateMsg::clear_fried_time() {
  fried_time_ = 0u;
  clear_has_fried_time();
}
inline ::google::protobuf::uint32 RateMsg::fried_time() const {
  return fried_time_;
}
inline void RateMsg::set_fried_time(::google::protobuf::uint32 value) {
  set_has_fried_time();
  fried_time_ = value;
}

// optional uint32 fried_num = 14;
inline bool RateMsg::has_fried_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RateMsg::set_has_fried_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RateMsg::clear_has_fried_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RateMsg::clear_fried_num() {
  fried_num_ = 0u;
  clear_has_fried_num();
}
inline ::google::protobuf::uint32 RateMsg::fried_num() const {
  return fried_num_;
}
inline void RateMsg::set_fried_num(::google::protobuf::uint32 value) {
  set_has_fried_num();
  fried_num_ = value;
}

// optional int64 main_funds = 15;
inline bool RateMsg::has_main_funds() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RateMsg::set_has_main_funds() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RateMsg::clear_has_main_funds() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RateMsg::clear_main_funds() {
  main_funds_ = GOOGLE_LONGLONG(0);
  clear_has_main_funds();
}
inline ::google::protobuf::int64 RateMsg::main_funds() const {
  return main_funds_;
}
inline void RateMsg::set_main_funds(::google::protobuf::int64 value) {
  set_has_main_funds();
  main_funds_ = value;
}

// optional uint32 to_up_limit_time = 16;
inline bool RateMsg::has_to_up_limit_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RateMsg::set_has_to_up_limit_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RateMsg::clear_has_to_up_limit_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RateMsg::clear_to_up_limit_time() {
  to_up_limit_time_ = 0u;
  clear_has_to_up_limit_time();
}
inline ::google::protobuf::uint32 RateMsg::to_up_limit_time() const {
  return to_up_limit_time_;
}
inline void RateMsg::set_to_up_limit_time(::google::protobuf::uint32 value) {
  set_has_to_up_limit_time();
  to_up_limit_time_ = value;
}

// optional uint32 to_lower_limit_time = 17;
inline bool RateMsg::has_to_lower_limit_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RateMsg::set_has_to_lower_limit_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RateMsg::clear_has_to_lower_limit_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RateMsg::clear_to_lower_limit_time() {
  to_lower_limit_time_ = 0u;
  clear_has_to_lower_limit_time();
}
inline ::google::protobuf::uint32 RateMsg::to_lower_limit_time() const {
  return to_lower_limit_time_;
}
inline void RateMsg::set_to_lower_limit_time(::google::protobuf::uint32 value) {
  set_has_to_lower_limit_time();
  to_lower_limit_time_ = value;
}

// optional string history_continuous = 18;
inline bool RateMsg::has_history_continuous() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RateMsg::set_has_history_continuous() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RateMsg::clear_has_history_continuous() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RateMsg::clear_history_continuous() {
  if (history_continuous_ != &::google::protobuf::internal::kEmptyString) {
    history_continuous_->clear();
  }
  clear_has_history_continuous();
}
inline const ::std::string& RateMsg::history_continuous() const {
  return *history_continuous_;
}
inline void RateMsg::set_history_continuous(const ::std::string& value) {
  set_has_history_continuous();
  if (history_continuous_ == &::google::protobuf::internal::kEmptyString) {
    history_continuous_ = new ::std::string;
  }
  history_continuous_->assign(value);
}
inline void RateMsg::set_history_continuous(const char* value) {
  set_has_history_continuous();
  if (history_continuous_ == &::google::protobuf::internal::kEmptyString) {
    history_continuous_ = new ::std::string;
  }
  history_continuous_->assign(value);
}
inline void RateMsg::set_history_continuous(const char* value, size_t size) {
  set_has_history_continuous();
  if (history_continuous_ == &::google::protobuf::internal::kEmptyString) {
    history_continuous_ = new ::std::string;
  }
  history_continuous_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RateMsg::mutable_history_continuous() {
  set_has_history_continuous();
  if (history_continuous_ == &::google::protobuf::internal::kEmptyString) {
    history_continuous_ = new ::std::string;
  }
  return history_continuous_;
}
inline ::std::string* RateMsg::release_history_continuous() {
  clear_has_history_continuous();
  if (history_continuous_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = history_continuous_;
    history_continuous_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 update_time_sec = 19;
inline bool RateMsg::has_update_time_sec() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RateMsg::set_has_update_time_sec() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RateMsg::clear_has_update_time_sec() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RateMsg::clear_update_time_sec() {
  update_time_sec_ = 0u;
  clear_has_update_time_sec();
}
inline ::google::protobuf::uint32 RateMsg::update_time_sec() const {
  return update_time_sec_;
}
inline void RateMsg::set_update_time_sec(::google::protobuf::uint32 value) {
  set_has_update_time_sec();
  update_time_sec_ = value;
}

// optional uint32 tradingday = 20;
inline bool RateMsg::has_tradingday() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RateMsg::set_has_tradingday() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RateMsg::clear_has_tradingday() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RateMsg::clear_tradingday() {
  tradingday_ = 0u;
  clear_has_tradingday();
}
inline ::google::protobuf::uint32 RateMsg::tradingday() const {
  return tradingday_;
}
inline void RateMsg::set_tradingday(::google::protobuf::uint32 value) {
  set_has_tradingday();
  tradingday_ = value;
}

// optional uint32 last_price = 21;
inline bool RateMsg::has_last_price() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RateMsg::set_has_last_price() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RateMsg::clear_has_last_price() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RateMsg::clear_last_price() {
  last_price_ = 0u;
  clear_has_last_price();
}
inline ::google::protobuf::uint32 RateMsg::last_price() const {
  return last_price_;
}
inline void RateMsg::set_last_price(::google::protobuf::uint32 value) {
  set_has_last_price();
  last_price_ = value;
}

// -------------------------------------------------------------------

// ShortMotionMsg

// optional uint32 index = 1;
inline bool ShortMotionMsg::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShortMotionMsg::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShortMotionMsg::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShortMotionMsg::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 ShortMotionMsg::index() const {
  return index_;
}
inline void ShortMotionMsg::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional .QuoteProto.ShortMotionType short_type = 2;
inline bool ShortMotionMsg::has_short_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShortMotionMsg::set_has_short_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShortMotionMsg::clear_has_short_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShortMotionMsg::clear_short_type() {
  short_type_ = 0;
  clear_has_short_type();
}
inline QuoteProto::ShortMotionType ShortMotionMsg::short_type() const {
  return static_cast< QuoteProto::ShortMotionType >(short_type_);
}
inline void ShortMotionMsg::set_short_type(QuoteProto::ShortMotionType value) {
  GOOGLE_DCHECK(QuoteProto::ShortMotionType_IsValid(value));
  set_has_short_type();
  short_type_ = value;
}

// optional string stock_code = 3;
inline bool ShortMotionMsg::has_stock_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShortMotionMsg::set_has_stock_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShortMotionMsg::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShortMotionMsg::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& ShortMotionMsg::stock_code() const {
  return *stock_code_;
}
inline void ShortMotionMsg::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void ShortMotionMsg::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void ShortMotionMsg::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShortMotionMsg::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* ShortMotionMsg::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string stock_name = 4;
inline bool ShortMotionMsg::has_stock_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShortMotionMsg::set_has_stock_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShortMotionMsg::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShortMotionMsg::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& ShortMotionMsg::stock_name() const {
  return *stock_name_;
}
inline void ShortMotionMsg::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void ShortMotionMsg::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void ShortMotionMsg::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShortMotionMsg::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* ShortMotionMsg::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 update_time_sec = 5;
inline bool ShortMotionMsg::has_update_time_sec() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShortMotionMsg::set_has_update_time_sec() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShortMotionMsg::clear_has_update_time_sec() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShortMotionMsg::clear_update_time_sec() {
  update_time_sec_ = 0u;
  clear_has_update_time_sec();
}
inline ::google::protobuf::uint32 ShortMotionMsg::update_time_sec() const {
  return update_time_sec_;
}
inline void ShortMotionMsg::set_update_time_sec(::google::protobuf::uint32 value) {
  set_has_update_time_sec();
  update_time_sec_ = value;
}

// optional uint64 detail_vol = 6;
inline bool ShortMotionMsg::has_detail_vol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShortMotionMsg::set_has_detail_vol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShortMotionMsg::clear_has_detail_vol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShortMotionMsg::clear_detail_vol() {
  detail_vol_ = GOOGLE_ULONGLONG(0);
  clear_has_detail_vol();
}
inline ::google::protobuf::uint64 ShortMotionMsg::detail_vol() const {
  return detail_vol_;
}
inline void ShortMotionMsg::set_detail_vol(::google::protobuf::uint64 value) {
  set_has_detail_vol();
  detail_vol_ = value;
}

// optional float rate = 7;
inline bool ShortMotionMsg::has_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShortMotionMsg::set_has_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShortMotionMsg::clear_has_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShortMotionMsg::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float ShortMotionMsg::rate() const {
  return rate_;
}
inline void ShortMotionMsg::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// optional int32 last_price = 8;
inline bool ShortMotionMsg::has_last_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShortMotionMsg::set_has_last_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShortMotionMsg::clear_has_last_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShortMotionMsg::clear_last_price() {
  last_price_ = 0;
  clear_has_last_price();
}
inline ::google::protobuf::int32 ShortMotionMsg::last_price() const {
  return last_price_;
}
inline void ShortMotionMsg::set_last_price(::google::protobuf::int32 value) {
  set_has_last_price();
  last_price_ = value;
}

// optional int32 buy_volume = 9;
inline bool ShortMotionMsg::has_buy_volume() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShortMotionMsg::set_has_buy_volume() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShortMotionMsg::clear_has_buy_volume() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShortMotionMsg::clear_buy_volume() {
  buy_volume_ = 0;
  clear_has_buy_volume();
}
inline ::google::protobuf::int32 ShortMotionMsg::buy_volume() const {
  return buy_volume_;
}
inline void ShortMotionMsg::set_buy_volume(::google::protobuf::int32 value) {
  set_has_buy_volume();
  buy_volume_ = value;
}

// optional int32 buy_volume1 = 10;
inline bool ShortMotionMsg::has_buy_volume1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShortMotionMsg::set_has_buy_volume1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShortMotionMsg::clear_has_buy_volume1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShortMotionMsg::clear_buy_volume1() {
  buy_volume1_ = 0;
  clear_has_buy_volume1();
}
inline ::google::protobuf::int32 ShortMotionMsg::buy_volume1() const {
  return buy_volume1_;
}
inline void ShortMotionMsg::set_buy_volume1(::google::protobuf::int32 value) {
  set_has_buy_volume1();
  buy_volume1_ = value;
}

// optional int32 sell_volume = 11;
inline bool ShortMotionMsg::has_sell_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShortMotionMsg::set_has_sell_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShortMotionMsg::clear_has_sell_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShortMotionMsg::clear_sell_volume() {
  sell_volume_ = 0;
  clear_has_sell_volume();
}
inline ::google::protobuf::int32 ShortMotionMsg::sell_volume() const {
  return sell_volume_;
}
inline void ShortMotionMsg::set_sell_volume(::google::protobuf::int32 value) {
  set_has_sell_volume();
  sell_volume_ = value;
}

// optional int32 sell_volume1 = 12;
inline bool ShortMotionMsg::has_sell_volume1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShortMotionMsg::set_has_sell_volume1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShortMotionMsg::clear_has_sell_volume1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShortMotionMsg::clear_sell_volume1() {
  sell_volume1_ = 0;
  clear_has_sell_volume1();
}
inline ::google::protobuf::int32 ShortMotionMsg::sell_volume1() const {
  return sell_volume1_;
}
inline void ShortMotionMsg::set_sell_volume1(::google::protobuf::int32 value) {
  set_has_sell_volume1();
  sell_volume1_ = value;
}

// -------------------------------------------------------------------

// FenJia

// optional uint32 trading_day = 1;
inline bool FenJia::has_trading_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FenJia::set_has_trading_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FenJia::clear_has_trading_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FenJia::clear_trading_day() {
  trading_day_ = 0u;
  clear_has_trading_day();
}
inline ::google::protobuf::uint32 FenJia::trading_day() const {
  return trading_day_;
}
inline void FenJia::set_trading_day(::google::protobuf::uint32 value) {
  set_has_trading_day();
  trading_day_ = value;
}

// optional uint32 price = 3;
inline bool FenJia::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FenJia::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FenJia::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FenJia::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 FenJia::price() const {
  return price_;
}
inline void FenJia::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
}

// optional uint64 buy_volume = 4;
inline bool FenJia::has_buy_volume() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FenJia::set_has_buy_volume() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FenJia::clear_has_buy_volume() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FenJia::clear_buy_volume() {
  buy_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_buy_volume();
}
inline ::google::protobuf::uint64 FenJia::buy_volume() const {
  return buy_volume_;
}
inline void FenJia::set_buy_volume(::google::protobuf::uint64 value) {
  set_has_buy_volume();
  buy_volume_ = value;
}

// optional uint64 sell_volume = 5;
inline bool FenJia::has_sell_volume() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FenJia::set_has_sell_volume() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FenJia::clear_has_sell_volume() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FenJia::clear_sell_volume() {
  sell_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_sell_volume();
}
inline ::google::protobuf::uint64 FenJia::sell_volume() const {
  return sell_volume_;
}
inline void FenJia::set_sell_volume(::google::protobuf::uint64 value) {
  set_has_sell_volume();
  sell_volume_ = value;
}

// -------------------------------------------------------------------

// MidAbnormalMsg

// required .QuoteProto.MidAbnormalType abnormal_type = 1;
inline bool MidAbnormalMsg::has_abnormal_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MidAbnormalMsg::set_has_abnormal_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MidAbnormalMsg::clear_has_abnormal_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MidAbnormalMsg::clear_abnormal_type() {
  abnormal_type_ = 0;
  clear_has_abnormal_type();
}
inline QuoteProto::MidAbnormalType MidAbnormalMsg::abnormal_type() const {
  return static_cast< QuoteProto::MidAbnormalType >(abnormal_type_);
}
inline void MidAbnormalMsg::set_abnormal_type(QuoteProto::MidAbnormalType value) {
  GOOGLE_DCHECK(QuoteProto::MidAbnormalType_IsValid(value));
  set_has_abnormal_type();
  abnormal_type_ = value;
}

// required string stock_code = 2;
inline bool MidAbnormalMsg::has_stock_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MidAbnormalMsg::set_has_stock_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MidAbnormalMsg::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MidAbnormalMsg::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& MidAbnormalMsg::stock_code() const {
  return *stock_code_;
}
inline void MidAbnormalMsg::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void MidAbnormalMsg::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void MidAbnormalMsg::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MidAbnormalMsg::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* MidAbnormalMsg::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string stock_name = 3;
inline bool MidAbnormalMsg::has_stock_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MidAbnormalMsg::set_has_stock_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MidAbnormalMsg::clear_has_stock_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MidAbnormalMsg::clear_stock_name() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    stock_name_->clear();
  }
  clear_has_stock_name();
}
inline const ::std::string& MidAbnormalMsg::stock_name() const {
  return *stock_name_;
}
inline void MidAbnormalMsg::set_stock_name(const ::std::string& value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void MidAbnormalMsg::set_stock_name(const char* value) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(value);
}
inline void MidAbnormalMsg::set_stock_name(const char* value, size_t size) {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  stock_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MidAbnormalMsg::mutable_stock_name() {
  set_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    stock_name_ = new ::std::string;
  }
  return stock_name_;
}
inline ::std::string* MidAbnormalMsg::release_stock_name() {
  clear_has_stock_name();
  if (stock_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_name_;
    stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 update_time = 4;
inline bool MidAbnormalMsg::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MidAbnormalMsg::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MidAbnormalMsg::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MidAbnormalMsg::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 MidAbnormalMsg::update_time() const {
  return update_time_;
}
inline void MidAbnormalMsg::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// required float rate = 5;
inline bool MidAbnormalMsg::has_rate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MidAbnormalMsg::set_has_rate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MidAbnormalMsg::clear_has_rate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MidAbnormalMsg::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline float MidAbnormalMsg::rate() const {
  return rate_;
}
inline void MidAbnormalMsg::set_rate(float value) {
  set_has_rate();
  rate_ = value;
}

// required uint32 last_price = 6;
inline bool MidAbnormalMsg::has_last_price() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MidAbnormalMsg::set_has_last_price() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MidAbnormalMsg::clear_has_last_price() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MidAbnormalMsg::clear_last_price() {
  last_price_ = 0u;
  clear_has_last_price();
}
inline ::google::protobuf::uint32 MidAbnormalMsg::last_price() const {
  return last_price_;
}
inline void MidAbnormalMsg::set_last_price(::google::protobuf::uint32 value) {
  set_has_last_price();
  last_price_ = value;
}

// required uint64 turnover = 7;
inline bool MidAbnormalMsg::has_turnover() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MidAbnormalMsg::set_has_turnover() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MidAbnormalMsg::clear_has_turnover() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MidAbnormalMsg::clear_turnover() {
  turnover_ = GOOGLE_ULONGLONG(0);
  clear_has_turnover();
}
inline ::google::protobuf::uint64 MidAbnormalMsg::turnover() const {
  return turnover_;
}
inline void MidAbnormalMsg::set_turnover(::google::protobuf::uint64 value) {
  set_has_turnover();
  turnover_ = value;
}

// required uint64 volume = 8;
inline bool MidAbnormalMsg::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MidAbnormalMsg::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MidAbnormalMsg::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MidAbnormalMsg::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 MidAbnormalMsg::volume() const {
  return volume_;
}
inline void MidAbnormalMsg::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
}

// required float real_time_rate = 9;
inline bool MidAbnormalMsg::has_real_time_rate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MidAbnormalMsg::set_has_real_time_rate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MidAbnormalMsg::clear_has_real_time_rate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MidAbnormalMsg::clear_real_time_rate() {
  real_time_rate_ = 0;
  clear_has_real_time_rate();
}
inline float MidAbnormalMsg::real_time_rate() const {
  return real_time_rate_;
}
inline void MidAbnormalMsg::set_real_time_rate(float value) {
  set_has_real_time_rate();
  real_time_rate_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::Markets>() {
  return QuoteProto::Markets_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::QuoteInfoStatus>() {
  return QuoteProto::QuoteInfoStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::QuoteFilterFlag>() {
  return QuoteProto::QuoteFilterFlag_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::DeviceType>() {
  return QuoteProto::DeviceType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::SvrType>() {
  return QuoteProto::SvrType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::FundAbnormalType>() {
  return QuoteProto::FundAbnormalType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::UserPermissionType>() {
  return QuoteProto::UserPermissionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::KlineType>() {
  return QuoteProto::KlineType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::emZhubiType>() {
  return QuoteProto::emZhubiType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::RFMonitorType>() {
  return QuoteProto::RFMonitorType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::ShortMotionType>() {
  return QuoteProto::ShortMotionType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::ShortMotionClientType>() {
  return QuoteProto::ShortMotionClientType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::MidAbnormalType>() {
  return QuoteProto::MidAbnormalType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_5fmessage_2eproto__INCLUDED
