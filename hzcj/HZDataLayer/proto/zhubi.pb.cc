// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zhubi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* GetZhubiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetZhubiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetZhubiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetZhubiResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFenJiaRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFenJiaRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFenJiaResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFenJiaResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zhubi_2eproto() {
  protobuf_AddDesc_zhubi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zhubi.proto");
  GOOGLE_CHECK(file != NULL);
  GetZhubiRequest_descriptor_ = file->message_type(0);
  static const int GetZhubiRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, zb_type_),
  };
  GetZhubiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetZhubiRequest_descriptor_,
      GetZhubiRequest::default_instance_,
      GetZhubiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetZhubiRequest));
  GetZhubiResponse_descriptor_ = file->message_type(1);
  static const int GetZhubiResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, zhubi_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, zb_type_),
  };
  GetZhubiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetZhubiResponse_descriptor_,
      GetZhubiResponse::default_instance_,
      GetZhubiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhubiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetZhubiResponse));
  GetFenJiaRequest_descriptor_ = file->message_type(2);
  static const int GetFenJiaRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaRequest, count_),
  };
  GetFenJiaRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFenJiaRequest_descriptor_,
      GetFenJiaRequest::default_instance_,
      GetFenJiaRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFenJiaRequest));
  GetFenJiaResponse_descriptor_ = file->message_type(3);
  static const int GetFenJiaResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, fenjia_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, max_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, pre_close_price_),
  };
  GetFenJiaResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFenJiaResponse_descriptor_,
      GetFenJiaResponse::default_instance_,
      GetFenJiaResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFenJiaResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFenJiaResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zhubi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetZhubiRequest_descriptor_, &GetZhubiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetZhubiResponse_descriptor_, &GetZhubiResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFenJiaRequest_descriptor_, &GetFenJiaRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFenJiaResponse_descriptor_, &GetFenJiaResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zhubi_2eproto() {
  delete GetZhubiRequest::default_instance_;
  delete GetZhubiRequest_reflection_;
  delete GetZhubiResponse::default_instance_;
  delete GetZhubiResponse_reflection_;
  delete GetFenJiaRequest::default_instance_;
  delete GetFenJiaRequest_reflection_;
  delete GetFenJiaResponse::default_instance_;
  delete GetFenJiaResponse_reflection_;
}

void protobuf_AddDesc_zhubi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013zhubi.proto\022\nQuoteProto\032\016ret_base.prot"
    "o\032\024public_message.proto\"\204\001\n\017GetZhubiRequ"
    "est\022\022\n\nstock_code\030\001 \002(\t\022\023\n\013update_time\030\002"
    " \002(\005\022\r\n\005count\030\003 \002(\r\022\017\n\007is_desc\030\004 \002(\010\022(\n\007"
    "zb_type\030\005 \001(\0162\027.QuoteProto.emZhubiType\"\252"
    "\001\n\020GetZhubiResponse\022\034\n\003ret\030\001 \002(\0132\017.Quote"
    "Proto.Ret\022\023\n\013total_count\030\002 \001(\r\022%\n\nzhubi_"
    "info\030\003 \003(\0132\021.QuoteProto.Zhubi\022\022\n\nstock_c"
    "ode\030\004 \001(\t\022(\n\007zb_type\030\005 \001(\0162\027.QuoteProto."
    "emZhubiType\"D\n\020GetFenJiaRequest\022\022\n\nstock"
    "_code\030\001 \002(\t\022\r\n\005index\030\002 \002(\005\022\r\n\005count\030\003 \002("
    "\r\"\300\001\n\021GetFenJiaResponse\022\034\n\003ret\030\001 \002(\0132\017.Q"
    "uoteProto.Ret\022\023\n\013total_count\030\002 \001(\r\022\'\n\013fe"
    "njia_info\030\003 \003(\0132\022.QuoteProto.FenJia\022\022\n\ns"
    "tock_code\030\004 \001(\t\022\016\n\006volume\030\005 \001(\004\022\022\n\nmax_v"
    "olume\030\006 \001(\004\022\027\n\017pre_close_price\030\007 \001(\001", 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zhubi.proto", &protobuf_RegisterTypes);
  GetZhubiRequest::default_instance_ = new GetZhubiRequest();
  GetZhubiResponse::default_instance_ = new GetZhubiResponse();
  GetFenJiaRequest::default_instance_ = new GetFenJiaRequest();
  GetFenJiaResponse::default_instance_ = new GetFenJiaResponse();
  GetZhubiRequest::default_instance_->InitAsDefaultInstance();
  GetZhubiResponse::default_instance_->InitAsDefaultInstance();
  GetFenJiaRequest::default_instance_->InitAsDefaultInstance();
  GetFenJiaResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zhubi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zhubi_2eproto {
  StaticDescriptorInitializer_zhubi_2eproto() {
    protobuf_AddDesc_zhubi_2eproto();
  }
} static_descriptor_initializer_zhubi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GetZhubiRequest::kStockCodeFieldNumber;
const int GetZhubiRequest::kUpdateTimeFieldNumber;
const int GetZhubiRequest::kCountFieldNumber;
const int GetZhubiRequest::kIsDescFieldNumber;
const int GetZhubiRequest::kZbTypeFieldNumber;
#endif  // !_MSC_VER

GetZhubiRequest::GetZhubiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetZhubiRequest::InitAsDefaultInstance() {
}

GetZhubiRequest::GetZhubiRequest(const GetZhubiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetZhubiRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_ = 0;
  count_ = 0u;
  is_desc_ = false;
  zb_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetZhubiRequest::~GetZhubiRequest() {
  SharedDtor();
}

void GetZhubiRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void GetZhubiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetZhubiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetZhubiRequest_descriptor_;
}

const GetZhubiRequest& GetZhubiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhubi_2eproto();  return *default_instance_;
}

GetZhubiRequest* GetZhubiRequest::default_instance_ = NULL;

GetZhubiRequest* GetZhubiRequest::New() const {
  return new GetZhubiRequest;
}

void GetZhubiRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    update_time_ = 0;
    count_ = 0u;
    is_desc_ = false;
    zb_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetZhubiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }
      
      // required int32 update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zb_type;
        break;
      }
      
      // optional .QuoteProto.emZhubiType zb_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zb_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::emZhubiType_IsValid(value)) {
            set_zb_type(static_cast< QuoteProto::emZhubiType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetZhubiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // required int32 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->update_time(), output);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_desc(), output);
  }
  
  // optional .QuoteProto.emZhubiType zb_type = 5;
  if (has_zb_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->zb_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetZhubiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // required int32 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->update_time(), target);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_desc(), target);
  }
  
  // optional .QuoteProto.emZhubiType zb_type = 5;
  if (has_zb_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->zb_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetZhubiRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required int32 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_time());
    }
    
    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // required bool is_desc = 4;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // optional .QuoteProto.emZhubiType zb_type = 5;
    if (has_zb_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zb_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetZhubiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetZhubiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetZhubiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetZhubiRequest::MergeFrom(const GetZhubiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_zb_type()) {
      set_zb_type(from.zb_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetZhubiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetZhubiRequest::CopyFrom(const GetZhubiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetZhubiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GetZhubiRequest::Swap(GetZhubiRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(update_time_, other->update_time_);
    std::swap(count_, other->count_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(zb_type_, other->zb_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetZhubiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetZhubiRequest_descriptor_;
  metadata.reflection = GetZhubiRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetZhubiResponse::kRetFieldNumber;
const int GetZhubiResponse::kTotalCountFieldNumber;
const int GetZhubiResponse::kZhubiInfoFieldNumber;
const int GetZhubiResponse::kStockCodeFieldNumber;
const int GetZhubiResponse::kZbTypeFieldNumber;
#endif  // !_MSC_VER

GetZhubiResponse::GetZhubiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetZhubiResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetZhubiResponse::GetZhubiResponse(const GetZhubiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetZhubiResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_count_ = 0u;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zb_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetZhubiResponse::~GetZhubiResponse() {
  SharedDtor();
}

void GetZhubiResponse::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetZhubiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetZhubiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetZhubiResponse_descriptor_;
}

const GetZhubiResponse& GetZhubiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhubi_2eproto();  return *default_instance_;
}

GetZhubiResponse* GetZhubiResponse::default_instance_ = NULL;

GetZhubiResponse* GetZhubiResponse::New() const {
  return new GetZhubiResponse;
}

void GetZhubiResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_count_ = 0u;
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    zb_type_ = 1;
  }
  zhubi_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetZhubiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }
      
      // optional uint32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zhubi_info;
        break;
      }
      
      // repeated .QuoteProto.Zhubi zhubi_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zhubi_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhubi_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zhubi_info;
        if (input->ExpectTag(34)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zb_type;
        break;
      }
      
      // optional .QuoteProto.emZhubiType zb_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zb_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::emZhubiType_IsValid(value)) {
            set_zb_type(static_cast< QuoteProto::emZhubiType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetZhubiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }
  
  // repeated .QuoteProto.Zhubi zhubi_info = 3;
  for (int i = 0; i < this->zhubi_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zhubi_info(i), output);
  }
  
  // optional string stock_code = 4;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stock_code(), output);
  }
  
  // optional .QuoteProto.emZhubiType zb_type = 5;
  if (has_zb_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->zb_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetZhubiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }
  
  // repeated .QuoteProto.Zhubi zhubi_info = 3;
  for (int i = 0; i < this->zhubi_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zhubi_info(i), target);
  }
  
  // optional string stock_code = 4;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stock_code(), target);
  }
  
  // optional .QuoteProto.emZhubiType zb_type = 5;
  if (has_zb_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->zb_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetZhubiResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
    // optional string stock_code = 4;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional .QuoteProto.emZhubiType zb_type = 5;
    if (has_zb_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->zb_type());
    }
    
  }
  // repeated .QuoteProto.Zhubi zhubi_info = 3;
  total_size += 1 * this->zhubi_info_size();
  for (int i = 0; i < this->zhubi_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhubi_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetZhubiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetZhubiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetZhubiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetZhubiResponse::MergeFrom(const GetZhubiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhubi_info_.MergeFrom(from.zhubi_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_zb_type()) {
      set_zb_type(from.zb_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetZhubiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetZhubiResponse::CopyFrom(const GetZhubiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetZhubiResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < zhubi_info_size(); i++) {
    if (!this->zhubi_info(i).IsInitialized()) return false;
  }
  return true;
}

void GetZhubiResponse::Swap(GetZhubiResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(total_count_, other->total_count_);
    zhubi_info_.Swap(&other->zhubi_info_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(zb_type_, other->zb_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetZhubiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetZhubiResponse_descriptor_;
  metadata.reflection = GetZhubiResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFenJiaRequest::kStockCodeFieldNumber;
const int GetFenJiaRequest::kIndexFieldNumber;
const int GetFenJiaRequest::kCountFieldNumber;
#endif  // !_MSC_VER

GetFenJiaRequest::GetFenJiaRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFenJiaRequest::InitAsDefaultInstance() {
}

GetFenJiaRequest::GetFenJiaRequest(const GetFenJiaRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFenJiaRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFenJiaRequest::~GetFenJiaRequest() {
  SharedDtor();
}

void GetFenJiaRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void GetFenJiaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFenJiaRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFenJiaRequest_descriptor_;
}

const GetFenJiaRequest& GetFenJiaRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhubi_2eproto();  return *default_instance_;
}

GetFenJiaRequest* GetFenJiaRequest::default_instance_ = NULL;

GetFenJiaRequest* GetFenJiaRequest::New() const {
  return new GetFenJiaRequest;
}

void GetFenJiaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    index_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFenJiaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }
      
      // required uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFenJiaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFenJiaRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // required uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFenJiaRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFenJiaRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFenJiaRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFenJiaRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFenJiaRequest::MergeFrom(const GetFenJiaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFenJiaRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFenJiaRequest::CopyFrom(const GetFenJiaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFenJiaRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GetFenJiaRequest::Swap(GetFenJiaRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFenJiaRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFenJiaRequest_descriptor_;
  metadata.reflection = GetFenJiaRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFenJiaResponse::kRetFieldNumber;
const int GetFenJiaResponse::kTotalCountFieldNumber;
const int GetFenJiaResponse::kFenjiaInfoFieldNumber;
const int GetFenJiaResponse::kStockCodeFieldNumber;
const int GetFenJiaResponse::kVolumeFieldNumber;
const int GetFenJiaResponse::kMaxVolumeFieldNumber;
const int GetFenJiaResponse::kPreClosePriceFieldNumber;
#endif  // !_MSC_VER

GetFenJiaResponse::GetFenJiaResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFenJiaResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetFenJiaResponse::GetFenJiaResponse(const GetFenJiaResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFenJiaResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_count_ = 0u;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = GOOGLE_ULONGLONG(0);
  max_volume_ = GOOGLE_ULONGLONG(0);
  pre_close_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFenJiaResponse::~GetFenJiaResponse() {
  SharedDtor();
}

void GetFenJiaResponse::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetFenJiaResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFenJiaResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFenJiaResponse_descriptor_;
}

const GetFenJiaResponse& GetFenJiaResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhubi_2eproto();  return *default_instance_;
}

GetFenJiaResponse* GetFenJiaResponse::default_instance_ = NULL;

GetFenJiaResponse* GetFenJiaResponse::New() const {
  return new GetFenJiaResponse;
}

void GetFenJiaResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_count_ = 0u;
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    volume_ = GOOGLE_ULONGLONG(0);
    max_volume_ = GOOGLE_ULONGLONG(0);
    pre_close_price_ = 0;
  }
  fenjia_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFenJiaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_count;
        break;
      }
      
      // optional uint32 total_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fenjia_info;
        break;
      }
      
      // repeated .QuoteProto.FenJia fenjia_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fenjia_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fenjia_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fenjia_info;
        if (input->ExpectTag(34)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_volume;
        break;
      }
      
      // optional uint64 volume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_volume;
        break;
      }
      
      // optional uint64 max_volume = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_volume_)));
          set_has_max_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_pre_close_price;
        break;
      }
      
      // optional double pre_close_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFenJiaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional uint32 total_count = 2;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_count(), output);
  }
  
  // repeated .QuoteProto.FenJia fenjia_info = 3;
  for (int i = 0; i < this->fenjia_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fenjia_info(i), output);
  }
  
  // optional string stock_code = 4;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stock_code(), output);
  }
  
  // optional uint64 volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->volume(), output);
  }
  
  // optional uint64 max_volume = 6;
  if (has_max_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->max_volume(), output);
  }
  
  // optional double pre_close_price = 7;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pre_close_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFenJiaResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional uint32 total_count = 2;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_count(), target);
  }
  
  // repeated .QuoteProto.FenJia fenjia_info = 3;
  for (int i = 0; i < this->fenjia_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fenjia_info(i), target);
  }
  
  // optional string stock_code = 4;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stock_code(), target);
  }
  
  // optional uint64 volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->volume(), target);
  }
  
  // optional uint64 max_volume = 6;
  if (has_max_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->max_volume(), target);
  }
  
  // optional double pre_close_price = 7;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pre_close_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFenJiaResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional uint32 total_count = 2;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
    // optional string stock_code = 4;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional uint64 volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }
    
    // optional uint64 max_volume = 6;
    if (has_max_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_volume());
    }
    
    // optional double pre_close_price = 7;
    if (has_pre_close_price()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .QuoteProto.FenJia fenjia_info = 3;
  total_size += 1 * this->fenjia_info_size();
  for (int i = 0; i < this->fenjia_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fenjia_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFenJiaResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFenJiaResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFenJiaResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFenJiaResponse::MergeFrom(const GetFenJiaResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  fenjia_info_.MergeFrom(from.fenjia_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_max_volume()) {
      set_max_volume(from.max_volume());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFenJiaResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFenJiaResponse::CopyFrom(const GetFenJiaResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFenJiaResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void GetFenJiaResponse::Swap(GetFenJiaResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(total_count_, other->total_count_);
    fenjia_info_.Swap(&other->fenjia_info_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(volume_, other->volume_);
    std::swap(max_volume_, other->max_volume_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFenJiaResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFenJiaResponse_descriptor_;
  metadata.reflection = GetFenJiaResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
