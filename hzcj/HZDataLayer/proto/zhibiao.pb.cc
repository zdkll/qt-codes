// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zhibiao.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* DotResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DotResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetZhibiaoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetZhibiaoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetZhibiaoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetZhibiaoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ZhibiaoType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zhibiao_2eproto() {
  protobuf_AddDesc_zhibiao_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zhibiao.proto");
  GOOGLE_CHECK(file != NULL);
  DotResult_descriptor_ = file->message_type(0);
  static const int DotResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotResult, upserttime_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotResult, stype_),
  };
  DotResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DotResult_descriptor_,
      DotResult::default_instance_,
      DotResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DotResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DotResult));
  ColumnResult_descriptor_ = file->message_type(1);
  static const int ColumnResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnResult, color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnResult, upserttime_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnResult, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnResult, low_),
  };
  ColumnResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnResult_descriptor_,
      ColumnResult::default_instance_,
      ColumnResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnResult));
  GetZhibiaoRequest_descriptor_ = file->message_type(2);
  static const int GetZhibiaoRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoRequest, ztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoRequest, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoRequest, end_time_),
  };
  GetZhibiaoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetZhibiaoRequest_descriptor_,
      GetZhibiaoRequest::default_instance_,
      GetZhibiaoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetZhibiaoRequest));
  GetZhibiaoResponse_descriptor_ = file->message_type(3);
  static const int GetZhibiaoResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoResponse, ztype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoResponse, dot_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoResponse, col_info_),
  };
  GetZhibiaoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetZhibiaoResponse_descriptor_,
      GetZhibiaoResponse::default_instance_,
      GetZhibiaoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetZhibiaoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetZhibiaoResponse));
  ZhibiaoType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zhibiao_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DotResult_descriptor_, &DotResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnResult_descriptor_, &ColumnResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetZhibiaoRequest_descriptor_, &GetZhibiaoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetZhibiaoResponse_descriptor_, &GetZhibiaoResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zhibiao_2eproto() {
  delete DotResult::default_instance_;
  delete DotResult_reflection_;
  delete ColumnResult::default_instance_;
  delete ColumnResult_reflection_;
  delete GetZhibiaoRequest::default_instance_;
  delete GetZhibiaoRequest_reflection_;
  delete GetZhibiaoResponse::default_instance_;
  delete GetZhibiaoResponse_reflection_;
}

void protobuf_AddDesc_zhibiao_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rzhibiao.proto\022\nQuoteProto\032\016ret_base.pr"
    "oto\032\024public_message.proto\"3\n\tDotResult\022\027"
    "\n\017upserttime_time\030\001 \002(\005\022\r\n\005stype\030\002 \002(\005\"V"
    "\n\014ColumnResult\022\022\n\ncolor_type\030\001 \002(\005\022\027\n\017up"
    "serttime_time\030\002 \002(\005\022\014\n\004high\030\003 \002(\005\022\013\n\003low"
    "\030\004 \001(\005\"u\n\021GetZhibiaoRequest\022\022\n\nstock_cod"
    "e\030\001 \002(\t\022&\n\005ztype\030\002 \002(\0162\027.QuoteProto.Zhib"
    "iaoType\022\022\n\nstart_time\030\003 \002(\005\022\020\n\010end_time\030"
    "\004 \002(\005\"\257\001\n\022GetZhibiaoResponse\022\034\n\003ret\030\001 \002("
    "\0132\017.QuoteProto.Ret\022&\n\005ztype\030\002 \002(\0162\027.Quot"
    "eProto.ZhibiaoType\022\'\n\010dot_info\030\003 \003(\0132\025.Q"
    "uoteProto.DotResult\022*\n\010col_info\030\004 \003(\0132\030."
    "QuoteProto.ColumnResult*z\n\013ZhibiaoType\022\010"
    "\n\004JDCJ\020\001\022\010\n\004CMFB\020\002\022\010\n\004QSGD\020\003\022\010\n\004HLQJ\020\004\022\010"
    "\n\004ZJKP\020\005\022\010\n\004CPTX\020\006\022\007\n\003HPM\020\007\022\010\n\004XQQX\020\010\022\010\n"
    "\004DQKJ\020\t\022\010\n\004DBGJ\020\n\022\010\n\004DBDJ\020\013", 627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zhibiao.proto", &protobuf_RegisterTypes);
  DotResult::default_instance_ = new DotResult();
  ColumnResult::default_instance_ = new ColumnResult();
  GetZhibiaoRequest::default_instance_ = new GetZhibiaoRequest();
  GetZhibiaoResponse::default_instance_ = new GetZhibiaoResponse();
  DotResult::default_instance_->InitAsDefaultInstance();
  ColumnResult::default_instance_->InitAsDefaultInstance();
  GetZhibiaoRequest::default_instance_->InitAsDefaultInstance();
  GetZhibiaoResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zhibiao_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zhibiao_2eproto {
  StaticDescriptorInitializer_zhibiao_2eproto() {
    protobuf_AddDesc_zhibiao_2eproto();
  }
} static_descriptor_initializer_zhibiao_2eproto_;

const ::google::protobuf::EnumDescriptor* ZhibiaoType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhibiaoType_descriptor_;
}
bool ZhibiaoType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DotResult::kUpserttimeTimeFieldNumber;
const int DotResult::kStypeFieldNumber;
#endif  // !_MSC_VER

DotResult::DotResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DotResult::InitAsDefaultInstance() {
}

DotResult::DotResult(const DotResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DotResult::SharedCtor() {
  _cached_size_ = 0;
  upserttime_time_ = 0;
  stype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotResult::~DotResult() {
  SharedDtor();
}

void DotResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DotResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DotResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DotResult_descriptor_;
}

const DotResult& DotResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhibiao_2eproto();  return *default_instance_;
}

DotResult* DotResult::default_instance_ = NULL;

DotResult* DotResult::New() const {
  return new DotResult;
}

void DotResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    upserttime_time_ = 0;
    stype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DotResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 upserttime_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upserttime_time_)));
          set_has_upserttime_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stype;
        break;
      }
      
      // required int32 stype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stype_)));
          set_has_stype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 upserttime_time = 1;
  if (has_upserttime_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upserttime_time(), output);
  }
  
  // required int32 stype = 2;
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DotResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 upserttime_time = 1;
  if (has_upserttime_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upserttime_time(), target);
  }
  
  // required int32 stype = 2;
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DotResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 upserttime_time = 1;
    if (has_upserttime_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upserttime_time());
    }
    
    // required int32 stype = 2;
    if (has_stype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DotResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DotResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DotResult::MergeFrom(const DotResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upserttime_time()) {
      set_upserttime_time(from.upserttime_time());
    }
    if (from.has_stype()) {
      set_stype(from.stype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DotResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DotResult::CopyFrom(const DotResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DotResult::Swap(DotResult* other) {
  if (other != this) {
    std::swap(upserttime_time_, other->upserttime_time_);
    std::swap(stype_, other->stype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DotResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DotResult_descriptor_;
  metadata.reflection = DotResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnResult::kColorTypeFieldNumber;
const int ColumnResult::kUpserttimeTimeFieldNumber;
const int ColumnResult::kHighFieldNumber;
const int ColumnResult::kLowFieldNumber;
#endif  // !_MSC_VER

ColumnResult::ColumnResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnResult::InitAsDefaultInstance() {
}

ColumnResult::ColumnResult(const ColumnResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnResult::SharedCtor() {
  _cached_size_ = 0;
  color_type_ = 0;
  upserttime_time_ = 0;
  high_ = 0;
  low_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnResult::~ColumnResult() {
  SharedDtor();
}

void ColumnResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnResult_descriptor_;
}

const ColumnResult& ColumnResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhibiao_2eproto();  return *default_instance_;
}

ColumnResult* ColumnResult::default_instance_ = NULL;

ColumnResult* ColumnResult::New() const {
  return new ColumnResult;
}

void ColumnResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_type_ = 0;
    upserttime_time_ = 0;
    high_ = 0;
    low_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 color_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_type_)));
          set_has_color_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upserttime_time;
        break;
      }
      
      // required int32 upserttime_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upserttime_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upserttime_time_)));
          set_has_upserttime_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_high;
        break;
      }
      
      // required int32 high = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_low;
        break;
      }
      
      // optional int32 low = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 color_type = 1;
  if (has_color_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color_type(), output);
  }
  
  // required int32 upserttime_time = 2;
  if (has_upserttime_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upserttime_time(), output);
  }
  
  // required int32 high = 3;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->high(), output);
  }
  
  // optional int32 low = 4;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->low(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 color_type = 1;
  if (has_color_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color_type(), target);
  }
  
  // required int32 upserttime_time = 2;
  if (has_upserttime_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upserttime_time(), target);
  }
  
  // required int32 high = 3;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->high(), target);
  }
  
  // optional int32 low = 4;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->low(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 color_type = 1;
    if (has_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color_type());
    }
    
    // required int32 upserttime_time = 2;
    if (has_upserttime_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upserttime_time());
    }
    
    // required int32 high = 3;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->high());
    }
    
    // optional int32 low = 4;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->low());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnResult::MergeFrom(const ColumnResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color_type()) {
      set_color_type(from.color_type());
    }
    if (from.has_upserttime_time()) {
      set_upserttime_time(from.upserttime_time());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
    if (from.has_low()) {
      set_low(from.low());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnResult::CopyFrom(const ColumnResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ColumnResult::Swap(ColumnResult* other) {
  if (other != this) {
    std::swap(color_type_, other->color_type_);
    std::swap(upserttime_time_, other->upserttime_time_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnResult_descriptor_;
  metadata.reflection = ColumnResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetZhibiaoRequest::kStockCodeFieldNumber;
const int GetZhibiaoRequest::kZtypeFieldNumber;
const int GetZhibiaoRequest::kStartTimeFieldNumber;
const int GetZhibiaoRequest::kEndTimeFieldNumber;
#endif  // !_MSC_VER

GetZhibiaoRequest::GetZhibiaoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetZhibiaoRequest::InitAsDefaultInstance() {
}

GetZhibiaoRequest::GetZhibiaoRequest(const GetZhibiaoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetZhibiaoRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ztype_ = 1;
  start_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetZhibiaoRequest::~GetZhibiaoRequest() {
  SharedDtor();
}

void GetZhibiaoRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void GetZhibiaoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetZhibiaoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetZhibiaoRequest_descriptor_;
}

const GetZhibiaoRequest& GetZhibiaoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhibiao_2eproto();  return *default_instance_;
}

GetZhibiaoRequest* GetZhibiaoRequest::default_instance_ = NULL;

GetZhibiaoRequest* GetZhibiaoRequest::New() const {
  return new GetZhibiaoRequest;
}

void GetZhibiaoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    ztype_ = 1;
    start_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetZhibiaoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ztype;
        break;
      }
      
      // required .QuoteProto.ZhibiaoType ztype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ztype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::ZhibiaoType_IsValid(value)) {
            set_ztype(static_cast< QuoteProto::ZhibiaoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }
      
      // required int32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }
      
      // required int32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetZhibiaoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // required .QuoteProto.ZhibiaoType ztype = 2;
  if (has_ztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ztype(), output);
  }
  
  // required int32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_time(), output);
  }
  
  // required int32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetZhibiaoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // required .QuoteProto.ZhibiaoType ztype = 2;
  if (has_ztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ztype(), target);
  }
  
  // required int32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_time(), target);
  }
  
  // required int32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetZhibiaoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required .QuoteProto.ZhibiaoType ztype = 2;
    if (has_ztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ztype());
    }
    
    // required int32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }
    
    // required int32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetZhibiaoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetZhibiaoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetZhibiaoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetZhibiaoRequest::MergeFrom(const GetZhibiaoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_ztype()) {
      set_ztype(from.ztype());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetZhibiaoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetZhibiaoRequest::CopyFrom(const GetZhibiaoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetZhibiaoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GetZhibiaoRequest::Swap(GetZhibiaoRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(ztype_, other->ztype_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetZhibiaoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetZhibiaoRequest_descriptor_;
  metadata.reflection = GetZhibiaoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetZhibiaoResponse::kRetFieldNumber;
const int GetZhibiaoResponse::kZtypeFieldNumber;
const int GetZhibiaoResponse::kDotInfoFieldNumber;
const int GetZhibiaoResponse::kColInfoFieldNumber;
#endif  // !_MSC_VER

GetZhibiaoResponse::GetZhibiaoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetZhibiaoResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetZhibiaoResponse::GetZhibiaoResponse(const GetZhibiaoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetZhibiaoResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ztype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetZhibiaoResponse::~GetZhibiaoResponse() {
  SharedDtor();
}

void GetZhibiaoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetZhibiaoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetZhibiaoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetZhibiaoResponse_descriptor_;
}

const GetZhibiaoResponse& GetZhibiaoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zhibiao_2eproto();  return *default_instance_;
}

GetZhibiaoResponse* GetZhibiaoResponse::default_instance_ = NULL;

GetZhibiaoResponse* GetZhibiaoResponse::New() const {
  return new GetZhibiaoResponse;
}

void GetZhibiaoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    ztype_ = 1;
  }
  dot_info_.Clear();
  col_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetZhibiaoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ztype;
        break;
      }
      
      // required .QuoteProto.ZhibiaoType ztype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ztype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::ZhibiaoType_IsValid(value)) {
            set_ztype(static_cast< QuoteProto::ZhibiaoType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dot_info;
        break;
      }
      
      // repeated .QuoteProto.DotResult dot_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dot_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dot_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dot_info;
        if (input->ExpectTag(34)) goto parse_col_info;
        break;
      }
      
      // repeated .QuoteProto.ColumnResult col_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_col_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_col_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_col_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetZhibiaoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // required .QuoteProto.ZhibiaoType ztype = 2;
  if (has_ztype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ztype(), output);
  }
  
  // repeated .QuoteProto.DotResult dot_info = 3;
  for (int i = 0; i < this->dot_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dot_info(i), output);
  }
  
  // repeated .QuoteProto.ColumnResult col_info = 4;
  for (int i = 0; i < this->col_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->col_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetZhibiaoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // required .QuoteProto.ZhibiaoType ztype = 2;
  if (has_ztype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ztype(), target);
  }
  
  // repeated .QuoteProto.DotResult dot_info = 3;
  for (int i = 0; i < this->dot_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dot_info(i), target);
  }
  
  // repeated .QuoteProto.ColumnResult col_info = 4;
  for (int i = 0; i < this->col_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->col_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetZhibiaoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // required .QuoteProto.ZhibiaoType ztype = 2;
    if (has_ztype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ztype());
    }
    
  }
  // repeated .QuoteProto.DotResult dot_info = 3;
  total_size += 1 * this->dot_info_size();
  for (int i = 0; i < this->dot_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dot_info(i));
  }
  
  // repeated .QuoteProto.ColumnResult col_info = 4;
  total_size += 1 * this->col_info_size();
  for (int i = 0; i < this->col_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->col_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetZhibiaoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetZhibiaoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetZhibiaoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetZhibiaoResponse::MergeFrom(const GetZhibiaoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  dot_info_.MergeFrom(from.dot_info_);
  col_info_.MergeFrom(from.col_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_ztype()) {
      set_ztype(from.ztype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetZhibiaoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetZhibiaoResponse::CopyFrom(const GetZhibiaoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetZhibiaoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < dot_info_size(); i++) {
    if (!this->dot_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < col_info_size(); i++) {
    if (!this->col_info(i).IsInitialized()) return false;
  }
  return true;
}

void GetZhibiaoResponse::Swap(GetZhibiaoResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(ztype_, other->ztype_);
    dot_info_.Swap(&other->dot_info_);
    col_info_.Swap(&other->col_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetZhibiaoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetZhibiaoResponse_descriptor_;
  metadata.reflection = GetZhibiaoResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
