// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zhubi.proto

#ifndef PROTOBUF_zhubi_2eproto__INCLUDED
#define PROTOBUF_zhubi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ret_base.pb.h"
#include "public_message.pb.h"
// @@protoc_insertion_point(includes)

namespace QuoteProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zhubi_2eproto();
void protobuf_AssignDesc_zhubi_2eproto();
void protobuf_ShutdownFile_zhubi_2eproto();

class GetZhubiRequest;
class GetZhubiResponse;
class GetFenJiaRequest;
class GetFenJiaResponse;

// ===================================================================

class GetZhubiRequest : public ::google::protobuf::Message {
 public:
  GetZhubiRequest();
  virtual ~GetZhubiRequest();
  
  GetZhubiRequest(const GetZhubiRequest& from);
  
  inline GetZhubiRequest& operator=(const GetZhubiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetZhubiRequest& default_instance();
  
  void Swap(GetZhubiRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetZhubiRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetZhubiRequest& from);
  void MergeFrom(const GetZhubiRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // required int32 update_time = 2;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google::protobuf::int32 update_time() const;
  inline void set_update_time(::google::protobuf::int32 value);
  
  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // required bool is_desc = 4;
  inline bool has_is_desc() const;
  inline void clear_is_desc();
  static const int kIsDescFieldNumber = 4;
  inline bool is_desc() const;
  inline void set_is_desc(bool value);
  
  // optional .QuoteProto.emZhubiType zb_type = 5;
  inline bool has_zb_type() const;
  inline void clear_zb_type();
  static const int kZbTypeFieldNumber = 5;
  inline QuoteProto::emZhubiType zb_type() const;
  inline void set_zb_type(QuoteProto::emZhubiType value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.GetZhubiRequest)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_is_desc();
  inline void clear_has_is_desc();
  inline void set_has_zb_type();
  inline void clear_has_zb_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::google::protobuf::int32 update_time_;
  ::google::protobuf::uint32 count_;
  bool is_desc_;
  int zb_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_zhubi_2eproto();
  friend void protobuf_AssignDesc_zhubi_2eproto();
  friend void protobuf_ShutdownFile_zhubi_2eproto();
  
  void InitAsDefaultInstance();
  static GetZhubiRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetZhubiResponse : public ::google::protobuf::Message {
 public:
  GetZhubiResponse();
  virtual ~GetZhubiResponse();
  
  GetZhubiResponse(const GetZhubiResponse& from);
  
  inline GetZhubiResponse& operator=(const GetZhubiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetZhubiResponse& default_instance();
  
  void Swap(GetZhubiResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetZhubiResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetZhubiResponse& from);
  void MergeFrom(const GetZhubiResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QuoteProto.Ret ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline const ::QuoteProto::Ret& ret() const;
  inline ::QuoteProto::Ret* mutable_ret();
  inline ::QuoteProto::Ret* release_ret();
  
  // optional uint32 total_count = 2;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::uint32 total_count() const;
  inline void set_total_count(::google::protobuf::uint32 value);
  
  // repeated .QuoteProto.Zhubi zhubi_info = 3;
  inline int zhubi_info_size() const;
  inline void clear_zhubi_info();
  static const int kZhubiInfoFieldNumber = 3;
  inline const ::QuoteProto::Zhubi& zhubi_info(int index) const;
  inline ::QuoteProto::Zhubi* mutable_zhubi_info(int index);
  inline ::QuoteProto::Zhubi* add_zhubi_info();
  inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::Zhubi >&
      zhubi_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::Zhubi >*
      mutable_zhubi_info();
  
  // optional string stock_code = 4;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 4;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional .QuoteProto.emZhubiType zb_type = 5;
  inline bool has_zb_type() const;
  inline void clear_zb_type();
  static const int kZbTypeFieldNumber = 5;
  inline QuoteProto::emZhubiType zb_type() const;
  inline void set_zb_type(QuoteProto::emZhubiType value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.GetZhubiResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_zb_type();
  inline void clear_has_zb_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::Ret* ret_;
  ::google::protobuf::RepeatedPtrField< ::QuoteProto::Zhubi > zhubi_info_;
  ::google::protobuf::uint32 total_count_;
  int zb_type_;
  ::std::string* stock_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_zhubi_2eproto();
  friend void protobuf_AssignDesc_zhubi_2eproto();
  friend void protobuf_ShutdownFile_zhubi_2eproto();
  
  void InitAsDefaultInstance();
  static GetZhubiResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetFenJiaRequest : public ::google::protobuf::Message {
 public:
  GetFenJiaRequest();
  virtual ~GetFenJiaRequest();
  
  GetFenJiaRequest(const GetFenJiaRequest& from);
  
  inline GetFenJiaRequest& operator=(const GetFenJiaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFenJiaRequest& default_instance();
  
  void Swap(GetFenJiaRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetFenJiaRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFenJiaRequest& from);
  void MergeFrom(const GetFenJiaRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string stock_code = 1;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 1;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.GetFenJiaRequest)
 private:
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_count();
  inline void clear_has_count();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* stock_code_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint32 count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_zhubi_2eproto();
  friend void protobuf_AssignDesc_zhubi_2eproto();
  friend void protobuf_ShutdownFile_zhubi_2eproto();
  
  void InitAsDefaultInstance();
  static GetFenJiaRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetFenJiaResponse : public ::google::protobuf::Message {
 public:
  GetFenJiaResponse();
  virtual ~GetFenJiaResponse();
  
  GetFenJiaResponse(const GetFenJiaResponse& from);
  
  inline GetFenJiaResponse& operator=(const GetFenJiaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetFenJiaResponse& default_instance();
  
  void Swap(GetFenJiaResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetFenJiaResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetFenJiaResponse& from);
  void MergeFrom(const GetFenJiaResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QuoteProto.Ret ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline const ::QuoteProto::Ret& ret() const;
  inline ::QuoteProto::Ret* mutable_ret();
  inline ::QuoteProto::Ret* release_ret();
  
  // optional uint32 total_count = 2;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::uint32 total_count() const;
  inline void set_total_count(::google::protobuf::uint32 value);
  
  // repeated .QuoteProto.FenJia fenjia_info = 3;
  inline int fenjia_info_size() const;
  inline void clear_fenjia_info();
  static const int kFenjiaInfoFieldNumber = 3;
  inline const ::QuoteProto::FenJia& fenjia_info(int index) const;
  inline ::QuoteProto::FenJia* mutable_fenjia_info(int index);
  inline ::QuoteProto::FenJia* add_fenjia_info();
  inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::FenJia >&
      fenjia_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::FenJia >*
      mutable_fenjia_info();
  
  // optional string stock_code = 4;
  inline bool has_stock_code() const;
  inline void clear_stock_code();
  static const int kStockCodeFieldNumber = 4;
  inline const ::std::string& stock_code() const;
  inline void set_stock_code(const ::std::string& value);
  inline void set_stock_code(const char* value);
  inline void set_stock_code(const char* value, size_t size);
  inline ::std::string* mutable_stock_code();
  inline ::std::string* release_stock_code();
  
  // optional uint64 volume = 5;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 5;
  inline ::google::protobuf::uint64 volume() const;
  inline void set_volume(::google::protobuf::uint64 value);
  
  // optional uint64 max_volume = 6;
  inline bool has_max_volume() const;
  inline void clear_max_volume();
  static const int kMaxVolumeFieldNumber = 6;
  inline ::google::protobuf::uint64 max_volume() const;
  inline void set_max_volume(::google::protobuf::uint64 value);
  
  // optional double pre_close_price = 7;
  inline bool has_pre_close_price() const;
  inline void clear_pre_close_price();
  static const int kPreClosePriceFieldNumber = 7;
  inline double pre_close_price() const;
  inline void set_pre_close_price(double value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.GetFenJiaResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_stock_code();
  inline void clear_has_stock_code();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_max_volume();
  inline void clear_has_max_volume();
  inline void set_has_pre_close_price();
  inline void clear_has_pre_close_price();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::Ret* ret_;
  ::google::protobuf::RepeatedPtrField< ::QuoteProto::FenJia > fenjia_info_;
  ::std::string* stock_code_;
  ::google::protobuf::uint64 volume_;
  ::google::protobuf::uint64 max_volume_;
  double pre_close_price_;
  ::google::protobuf::uint32 total_count_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_zhubi_2eproto();
  friend void protobuf_AssignDesc_zhubi_2eproto();
  friend void protobuf_ShutdownFile_zhubi_2eproto();
  
  void InitAsDefaultInstance();
  static GetFenJiaResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// GetZhubiRequest

// required string stock_code = 1;
inline bool GetZhubiRequest::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetZhubiRequest::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetZhubiRequest::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetZhubiRequest::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& GetZhubiRequest::stock_code() const {
  return *stock_code_;
}
inline void GetZhubiRequest::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetZhubiRequest::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetZhubiRequest::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetZhubiRequest::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* GetZhubiRequest::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 update_time = 2;
inline bool GetZhubiRequest::has_update_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetZhubiRequest::set_has_update_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetZhubiRequest::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetZhubiRequest::clear_update_time() {
  update_time_ = 0;
  clear_has_update_time();
}
inline ::google::protobuf::int32 GetZhubiRequest::update_time() const {
  return update_time_;
}
inline void GetZhubiRequest::set_update_time(::google::protobuf::int32 value) {
  set_has_update_time();
  update_time_ = value;
}

// required uint32 count = 3;
inline bool GetZhubiRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetZhubiRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetZhubiRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetZhubiRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetZhubiRequest::count() const {
  return count_;
}
inline void GetZhubiRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required bool is_desc = 4;
inline bool GetZhubiRequest::has_is_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetZhubiRequest::set_has_is_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetZhubiRequest::clear_has_is_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetZhubiRequest::clear_is_desc() {
  is_desc_ = false;
  clear_has_is_desc();
}
inline bool GetZhubiRequest::is_desc() const {
  return is_desc_;
}
inline void GetZhubiRequest::set_is_desc(bool value) {
  set_has_is_desc();
  is_desc_ = value;
}

// optional .QuoteProto.emZhubiType zb_type = 5;
inline bool GetZhubiRequest::has_zb_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetZhubiRequest::set_has_zb_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetZhubiRequest::clear_has_zb_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetZhubiRequest::clear_zb_type() {
  zb_type_ = 1;
  clear_has_zb_type();
}
inline QuoteProto::emZhubiType GetZhubiRequest::zb_type() const {
  return static_cast< QuoteProto::emZhubiType >(zb_type_);
}
inline void GetZhubiRequest::set_zb_type(QuoteProto::emZhubiType value) {
  GOOGLE_DCHECK(QuoteProto::emZhubiType_IsValid(value));
  set_has_zb_type();
  zb_type_ = value;
}

// -------------------------------------------------------------------

// GetZhubiResponse

// required .QuoteProto.Ret ret = 1;
inline bool GetZhubiResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetZhubiResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetZhubiResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetZhubiResponse::clear_ret() {
  if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
  clear_has_ret();
}
inline const ::QuoteProto::Ret& GetZhubiResponse::ret() const {
  return ret_ != NULL ? *ret_ : *default_instance_->ret_;
}
inline ::QuoteProto::Ret* GetZhubiResponse::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) ret_ = new ::QuoteProto::Ret;
  return ret_;
}
inline ::QuoteProto::Ret* GetZhubiResponse::release_ret() {
  clear_has_ret();
  ::QuoteProto::Ret* temp = ret_;
  ret_ = NULL;
  return temp;
}

// optional uint32 total_count = 2;
inline bool GetZhubiResponse::has_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetZhubiResponse::set_has_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetZhubiResponse::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetZhubiResponse::clear_total_count() {
  total_count_ = 0u;
  clear_has_total_count();
}
inline ::google::protobuf::uint32 GetZhubiResponse::total_count() const {
  return total_count_;
}
inline void GetZhubiResponse::set_total_count(::google::protobuf::uint32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .QuoteProto.Zhubi zhubi_info = 3;
inline int GetZhubiResponse::zhubi_info_size() const {
  return zhubi_info_.size();
}
inline void GetZhubiResponse::clear_zhubi_info() {
  zhubi_info_.Clear();
}
inline const ::QuoteProto::Zhubi& GetZhubiResponse::zhubi_info(int index) const {
  return zhubi_info_.Get(index);
}
inline ::QuoteProto::Zhubi* GetZhubiResponse::mutable_zhubi_info(int index) {
  return zhubi_info_.Mutable(index);
}
inline ::QuoteProto::Zhubi* GetZhubiResponse::add_zhubi_info() {
  return zhubi_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::Zhubi >&
GetZhubiResponse::zhubi_info() const {
  return zhubi_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::Zhubi >*
GetZhubiResponse::mutable_zhubi_info() {
  return &zhubi_info_;
}

// optional string stock_code = 4;
inline bool GetZhubiResponse::has_stock_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetZhubiResponse::set_has_stock_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetZhubiResponse::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetZhubiResponse::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& GetZhubiResponse::stock_code() const {
  return *stock_code_;
}
inline void GetZhubiResponse::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetZhubiResponse::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetZhubiResponse::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetZhubiResponse::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* GetZhubiResponse::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .QuoteProto.emZhubiType zb_type = 5;
inline bool GetZhubiResponse::has_zb_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetZhubiResponse::set_has_zb_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetZhubiResponse::clear_has_zb_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetZhubiResponse::clear_zb_type() {
  zb_type_ = 1;
  clear_has_zb_type();
}
inline QuoteProto::emZhubiType GetZhubiResponse::zb_type() const {
  return static_cast< QuoteProto::emZhubiType >(zb_type_);
}
inline void GetZhubiResponse::set_zb_type(QuoteProto::emZhubiType value) {
  GOOGLE_DCHECK(QuoteProto::emZhubiType_IsValid(value));
  set_has_zb_type();
  zb_type_ = value;
}

// -------------------------------------------------------------------

// GetFenJiaRequest

// required string stock_code = 1;
inline bool GetFenJiaRequest::has_stock_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFenJiaRequest::set_has_stock_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFenJiaRequest::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFenJiaRequest::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& GetFenJiaRequest::stock_code() const {
  return *stock_code_;
}
inline void GetFenJiaRequest::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetFenJiaRequest::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetFenJiaRequest::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFenJiaRequest::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* GetFenJiaRequest::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 index = 2;
inline bool GetFenJiaRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFenJiaRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetFenJiaRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetFenJiaRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GetFenJiaRequest::index() const {
  return index_;
}
inline void GetFenJiaRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// required uint32 count = 3;
inline bool GetFenJiaRequest::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetFenJiaRequest::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetFenJiaRequest::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetFenJiaRequest::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GetFenJiaRequest::count() const {
  return count_;
}
inline void GetFenJiaRequest::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GetFenJiaResponse

// required .QuoteProto.Ret ret = 1;
inline bool GetFenJiaResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetFenJiaResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetFenJiaResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetFenJiaResponse::clear_ret() {
  if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
  clear_has_ret();
}
inline const ::QuoteProto::Ret& GetFenJiaResponse::ret() const {
  return ret_ != NULL ? *ret_ : *default_instance_->ret_;
}
inline ::QuoteProto::Ret* GetFenJiaResponse::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) ret_ = new ::QuoteProto::Ret;
  return ret_;
}
inline ::QuoteProto::Ret* GetFenJiaResponse::release_ret() {
  clear_has_ret();
  ::QuoteProto::Ret* temp = ret_;
  ret_ = NULL;
  return temp;
}

// optional uint32 total_count = 2;
inline bool GetFenJiaResponse::has_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetFenJiaResponse::set_has_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetFenJiaResponse::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetFenJiaResponse::clear_total_count() {
  total_count_ = 0u;
  clear_has_total_count();
}
inline ::google::protobuf::uint32 GetFenJiaResponse::total_count() const {
  return total_count_;
}
inline void GetFenJiaResponse::set_total_count(::google::protobuf::uint32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .QuoteProto.FenJia fenjia_info = 3;
inline int GetFenJiaResponse::fenjia_info_size() const {
  return fenjia_info_.size();
}
inline void GetFenJiaResponse::clear_fenjia_info() {
  fenjia_info_.Clear();
}
inline const ::QuoteProto::FenJia& GetFenJiaResponse::fenjia_info(int index) const {
  return fenjia_info_.Get(index);
}
inline ::QuoteProto::FenJia* GetFenJiaResponse::mutable_fenjia_info(int index) {
  return fenjia_info_.Mutable(index);
}
inline ::QuoteProto::FenJia* GetFenJiaResponse::add_fenjia_info() {
  return fenjia_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::FenJia >&
GetFenJiaResponse::fenjia_info() const {
  return fenjia_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::FenJia >*
GetFenJiaResponse::mutable_fenjia_info() {
  return &fenjia_info_;
}

// optional string stock_code = 4;
inline bool GetFenJiaResponse::has_stock_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetFenJiaResponse::set_has_stock_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetFenJiaResponse::clear_has_stock_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetFenJiaResponse::clear_stock_code() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    stock_code_->clear();
  }
  clear_has_stock_code();
}
inline const ::std::string& GetFenJiaResponse::stock_code() const {
  return *stock_code_;
}
inline void GetFenJiaResponse::set_stock_code(const ::std::string& value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetFenJiaResponse::set_stock_code(const char* value) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(value);
}
inline void GetFenJiaResponse::set_stock_code(const char* value, size_t size) {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  stock_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetFenJiaResponse::mutable_stock_code() {
  set_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    stock_code_ = new ::std::string;
  }
  return stock_code_;
}
inline ::std::string* GetFenJiaResponse::release_stock_code() {
  clear_has_stock_code();
  if (stock_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stock_code_;
    stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 volume = 5;
inline bool GetFenJiaResponse::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetFenJiaResponse::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetFenJiaResponse::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetFenJiaResponse::clear_volume() {
  volume_ = GOOGLE_ULONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::uint64 GetFenJiaResponse::volume() const {
  return volume_;
}
inline void GetFenJiaResponse::set_volume(::google::protobuf::uint64 value) {
  set_has_volume();
  volume_ = value;
}

// optional uint64 max_volume = 6;
inline bool GetFenJiaResponse::has_max_volume() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetFenJiaResponse::set_has_max_volume() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetFenJiaResponse::clear_has_max_volume() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetFenJiaResponse::clear_max_volume() {
  max_volume_ = GOOGLE_ULONGLONG(0);
  clear_has_max_volume();
}
inline ::google::protobuf::uint64 GetFenJiaResponse::max_volume() const {
  return max_volume_;
}
inline void GetFenJiaResponse::set_max_volume(::google::protobuf::uint64 value) {
  set_has_max_volume();
  max_volume_ = value;
}

// optional double pre_close_price = 7;
inline bool GetFenJiaResponse::has_pre_close_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetFenJiaResponse::set_has_pre_close_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetFenJiaResponse::clear_has_pre_close_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetFenJiaResponse::clear_pre_close_price() {
  pre_close_price_ = 0;
  clear_has_pre_close_price();
}
inline double GetFenJiaResponse::pre_close_price() const {
  return pre_close_price_;
}
inline void GetFenJiaResponse::set_pre_close_price(double value) {
  set_has_pre_close_price();
  pre_close_price_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zhubi_2eproto__INCLUDED
