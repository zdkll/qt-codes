// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mid_abnormal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* MidAbnormalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidAbnormalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MidAbnormalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidAbnormalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchMidAbnormalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchMidAbnormalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchMidAbnormalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchMidAbnormalResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mid_5fabnormal_2eproto() {
  protobuf_AddDesc_mid_5fabnormal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mid_abnormal.proto");
  GOOGLE_CHECK(file != NULL);
  MidAbnormalRequest_descriptor_ = file->message_type(0);
  static const int MidAbnormalRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, direction_),
  };
  MidAbnormalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MidAbnormalRequest_descriptor_,
      MidAbnormalRequest::default_instance_,
      MidAbnormalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MidAbnormalRequest));
  MidAbnormalResponse_descriptor_ = file->message_type(1);
  static const int MidAbnormalResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalResponse, ab_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalResponse, total_count_),
  };
  MidAbnormalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MidAbnormalResponse_descriptor_,
      MidAbnormalResponse::default_instance_,
      MidAbnormalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MidAbnormalResponse));
  BatchMidAbnormalRequest_descriptor_ = file->message_type(2);
  static const int BatchMidAbnormalRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalRequest, stock_codes_),
  };
  BatchMidAbnormalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchMidAbnormalRequest_descriptor_,
      BatchMidAbnormalRequest::default_instance_,
      BatchMidAbnormalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchMidAbnormalRequest));
  BatchMidAbnormalResponse_descriptor_ = file->message_type(3);
  static const int BatchMidAbnormalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalResponse, ab_infos_),
  };
  BatchMidAbnormalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchMidAbnormalResponse_descriptor_,
      BatchMidAbnormalResponse::default_instance_,
      BatchMidAbnormalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchMidAbnormalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchMidAbnormalResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mid_5fabnormal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MidAbnormalRequest_descriptor_, &MidAbnormalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MidAbnormalResponse_descriptor_, &MidAbnormalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchMidAbnormalRequest_descriptor_, &BatchMidAbnormalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchMidAbnormalResponse_descriptor_, &BatchMidAbnormalResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mid_5fabnormal_2eproto() {
  delete MidAbnormalRequest::default_instance_;
  delete MidAbnormalRequest_reflection_;
  delete MidAbnormalResponse::default_instance_;
  delete MidAbnormalResponse_reflection_;
  delete BatchMidAbnormalRequest::default_instance_;
  delete BatchMidAbnormalRequest_reflection_;
  delete BatchMidAbnormalResponse::default_instance_;
  delete BatchMidAbnormalResponse_reflection_;
}

void protobuf_AddDesc_mid_5fabnormal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022mid_abnormal.proto\022\nQuoteProto\032\016ret_ba"
    "se.proto\032\024public_message.proto\"g\n\022MidAbn"
    "ormalRequest\022\014\n\004type\030\001 \002(\r\022\022\n\nstock_code"
    "\030\002 \002(\t\022\r\n\005index\030\003 \002(\005\022\r\n\005count\030\004 \002(\r\022\021\n\t"
    "direction\030\005 \001(\r\"v\n\023MidAbnormalResponse\022\034"
    "\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022,\n\010ab_infos"
    "\030\002 \003(\0132\032.QuoteProto.MidAbnormalMsg\022\023\n\013to"
    "tal_count\030\003 \002(\r\"K\n\027BatchMidAbnormalReque"
    "st\022\014\n\004type\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022\023\n\013stock"
    "_codes\030\003 \003(\t\"f\n\030BatchMidAbnormalResponse"
    "\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022,\n\010ab_inf"
    "os\030\002 \003(\0132\032.QuoteProto.MidAbnormalMsg", 476);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mid_abnormal.proto", &protobuf_RegisterTypes);
  MidAbnormalRequest::default_instance_ = new MidAbnormalRequest();
  MidAbnormalResponse::default_instance_ = new MidAbnormalResponse();
  BatchMidAbnormalRequest::default_instance_ = new BatchMidAbnormalRequest();
  BatchMidAbnormalResponse::default_instance_ = new BatchMidAbnormalResponse();
  MidAbnormalRequest::default_instance_->InitAsDefaultInstance();
  MidAbnormalResponse::default_instance_->InitAsDefaultInstance();
  BatchMidAbnormalRequest::default_instance_->InitAsDefaultInstance();
  BatchMidAbnormalResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mid_5fabnormal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mid_5fabnormal_2eproto {
  StaticDescriptorInitializer_mid_5fabnormal_2eproto() {
    protobuf_AddDesc_mid_5fabnormal_2eproto();
  }
} static_descriptor_initializer_mid_5fabnormal_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MidAbnormalRequest::kTypeFieldNumber;
const int MidAbnormalRequest::kStockCodeFieldNumber;
const int MidAbnormalRequest::kIndexFieldNumber;
const int MidAbnormalRequest::kCountFieldNumber;
const int MidAbnormalRequest::kDirectionFieldNumber;
#endif  // !_MSC_VER

MidAbnormalRequest::MidAbnormalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MidAbnormalRequest::InitAsDefaultInstance() {
}

MidAbnormalRequest::MidAbnormalRequest(const MidAbnormalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MidAbnormalRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  count_ = 0u;
  direction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidAbnormalRequest::~MidAbnormalRequest() {
  SharedDtor();
}

void MidAbnormalRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void MidAbnormalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidAbnormalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidAbnormalRequest_descriptor_;
}

const MidAbnormalRequest& MidAbnormalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mid_5fabnormal_2eproto();  return *default_instance_;
}

MidAbnormalRequest* MidAbnormalRequest::default_instance_ = NULL;

MidAbnormalRequest* MidAbnormalRequest::New() const {
  return new MidAbnormalRequest;
}

void MidAbnormalRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    index_ = 0;
    count_ = 0u;
    direction_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MidAbnormalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        break;
      }
      
      // required string stock_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }
      
      // required uint32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }
      
      // optional uint32 direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MidAbnormalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_code(), output);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // required uint32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }
  
  // optional uint32 direction = 5;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MidAbnormalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_code(), target);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // required uint32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }
  
  // optional uint32 direction = 5;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MidAbnormalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required string stock_code = 2;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required uint32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional uint32 direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidAbnormalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MidAbnormalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MidAbnormalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MidAbnormalRequest::MergeFrom(const MidAbnormalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MidAbnormalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidAbnormalRequest::CopyFrom(const MidAbnormalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidAbnormalRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MidAbnormalRequest::Swap(MidAbnormalRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(index_, other->index_);
    std::swap(count_, other->count_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MidAbnormalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidAbnormalRequest_descriptor_;
  metadata.reflection = MidAbnormalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MidAbnormalResponse::kRetFieldNumber;
const int MidAbnormalResponse::kAbInfosFieldNumber;
const int MidAbnormalResponse::kTotalCountFieldNumber;
#endif  // !_MSC_VER

MidAbnormalResponse::MidAbnormalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MidAbnormalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

MidAbnormalResponse::MidAbnormalResponse(const MidAbnormalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MidAbnormalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidAbnormalResponse::~MidAbnormalResponse() {
  SharedDtor();
}

void MidAbnormalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void MidAbnormalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidAbnormalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidAbnormalResponse_descriptor_;
}

const MidAbnormalResponse& MidAbnormalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mid_5fabnormal_2eproto();  return *default_instance_;
}

MidAbnormalResponse* MidAbnormalResponse::default_instance_ = NULL;

MidAbnormalResponse* MidAbnormalResponse::New() const {
  return new MidAbnormalResponse;
}

void MidAbnormalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_count_ = 0u;
  }
  ab_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MidAbnormalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ab_infos;
        break;
      }
      
      // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ab_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ab_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ab_infos;
        if (input->ExpectTag(24)) goto parse_total_count;
        break;
      }
      
      // required uint32 total_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MidAbnormalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
  for (int i = 0; i < this->ab_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ab_infos(i), output);
  }
  
  // required uint32 total_count = 3;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MidAbnormalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
  for (int i = 0; i < this->ab_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ab_infos(i), target);
  }
  
  // required uint32 total_count = 3;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MidAbnormalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // required uint32 total_count = 3;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }
    
  }
  // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
  total_size += 1 * this->ab_infos_size();
  for (int i = 0; i < this->ab_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ab_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidAbnormalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MidAbnormalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MidAbnormalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MidAbnormalResponse::MergeFrom(const MidAbnormalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ab_infos_.MergeFrom(from.ab_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MidAbnormalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidAbnormalResponse::CopyFrom(const MidAbnormalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidAbnormalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < ab_infos_size(); i++) {
    if (!this->ab_infos(i).IsInitialized()) return false;
  }
  return true;
}

void MidAbnormalResponse::Swap(MidAbnormalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    ab_infos_.Swap(&other->ab_infos_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MidAbnormalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidAbnormalResponse_descriptor_;
  metadata.reflection = MidAbnormalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchMidAbnormalRequest::kTypeFieldNumber;
const int BatchMidAbnormalRequest::kCountFieldNumber;
const int BatchMidAbnormalRequest::kStockCodesFieldNumber;
#endif  // !_MSC_VER

BatchMidAbnormalRequest::BatchMidAbnormalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchMidAbnormalRequest::InitAsDefaultInstance() {
}

BatchMidAbnormalRequest::BatchMidAbnormalRequest(const BatchMidAbnormalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchMidAbnormalRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchMidAbnormalRequest::~BatchMidAbnormalRequest() {
  SharedDtor();
}

void BatchMidAbnormalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchMidAbnormalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchMidAbnormalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchMidAbnormalRequest_descriptor_;
}

const BatchMidAbnormalRequest& BatchMidAbnormalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mid_5fabnormal_2eproto();  return *default_instance_;
}

BatchMidAbnormalRequest* BatchMidAbnormalRequest::default_instance_ = NULL;

BatchMidAbnormalRequest* BatchMidAbnormalRequest::New() const {
  return new BatchMidAbnormalRequest;
}

void BatchMidAbnormalRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    count_ = 0u;
  }
  stock_codes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchMidAbnormalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_codes;
        break;
      }
      
      // repeated string stock_codes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_codes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stock_codes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_codes(0).data(), this->stock_codes(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_codes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchMidAbnormalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // repeated string stock_codes = 3;
  for (int i = 0; i < this->stock_codes_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stock_codes(i).data(), this->stock_codes(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_codes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchMidAbnormalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // repeated string stock_codes = 3;
  for (int i = 0; i < this->stock_codes_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_codes(i).data(), this->stock_codes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stock_codes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchMidAbnormalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  // repeated string stock_codes = 3;
  total_size += 1 * this->stock_codes_size();
  for (int i = 0; i < this->stock_codes_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stock_codes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchMidAbnormalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchMidAbnormalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchMidAbnormalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchMidAbnormalRequest::MergeFrom(const BatchMidAbnormalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_codes_.MergeFrom(from.stock_codes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchMidAbnormalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchMidAbnormalRequest::CopyFrom(const BatchMidAbnormalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchMidAbnormalRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BatchMidAbnormalRequest::Swap(BatchMidAbnormalRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    stock_codes_.Swap(&other->stock_codes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchMidAbnormalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchMidAbnormalRequest_descriptor_;
  metadata.reflection = BatchMidAbnormalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchMidAbnormalResponse::kRetFieldNumber;
const int BatchMidAbnormalResponse::kAbInfosFieldNumber;
#endif  // !_MSC_VER

BatchMidAbnormalResponse::BatchMidAbnormalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchMidAbnormalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchMidAbnormalResponse::BatchMidAbnormalResponse(const BatchMidAbnormalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchMidAbnormalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchMidAbnormalResponse::~BatchMidAbnormalResponse() {
  SharedDtor();
}

void BatchMidAbnormalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchMidAbnormalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchMidAbnormalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchMidAbnormalResponse_descriptor_;
}

const BatchMidAbnormalResponse& BatchMidAbnormalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mid_5fabnormal_2eproto();  return *default_instance_;
}

BatchMidAbnormalResponse* BatchMidAbnormalResponse::default_instance_ = NULL;

BatchMidAbnormalResponse* BatchMidAbnormalResponse::New() const {
  return new BatchMidAbnormalResponse;
}

void BatchMidAbnormalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  ab_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchMidAbnormalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ab_infos;
        break;
      }
      
      // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ab_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ab_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ab_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchMidAbnormalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
  for (int i = 0; i < this->ab_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ab_infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchMidAbnormalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
  for (int i = 0; i < this->ab_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ab_infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchMidAbnormalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.MidAbnormalMsg ab_infos = 2;
  total_size += 1 * this->ab_infos_size();
  for (int i = 0; i < this->ab_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ab_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchMidAbnormalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchMidAbnormalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchMidAbnormalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchMidAbnormalResponse::MergeFrom(const BatchMidAbnormalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ab_infos_.MergeFrom(from.ab_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchMidAbnormalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchMidAbnormalResponse::CopyFrom(const BatchMidAbnormalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchMidAbnormalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < ab_infos_size(); i++) {
    if (!this->ab_infos(i).IsInitialized()) return false;
  }
  return true;
}

void BatchMidAbnormalResponse::Swap(BatchMidAbnormalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    ab_infos_.Swap(&other->ab_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchMidAbnormalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchMidAbnormalResponse_descriptor_;
  metadata.reflection = BatchMidAbnormalResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
