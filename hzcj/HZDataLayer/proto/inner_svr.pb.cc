// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "inner_svr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* QuoteBaseStockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteBaseStockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuoteInfoArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuoteInfoArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockInfoArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockInfoArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyInfoArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyInfoArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* KlineInfoArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KlineInfoArray_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_inner_5fsvr_2eproto() {
  protobuf_AddDesc_inner_5fsvr_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "inner_svr.proto");
  GOOGLE_CHECK(file != NULL);
  QuoteBaseStockInfo_descriptor_ = file->message_type(0);
  static const int QuoteBaseStockInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBaseStockInfo, codes_table_),
  };
  QuoteBaseStockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuoteBaseStockInfo_descriptor_,
      QuoteBaseStockInfo::default_instance_,
      QuoteBaseStockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBaseStockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteBaseStockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuoteBaseStockInfo));
  QuoteInfoArray_descriptor_ = file->message_type(1);
  static const int QuoteInfoArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfoArray, table_),
  };
  QuoteInfoArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuoteInfoArray_descriptor_,
      QuoteInfoArray::default_instance_,
      QuoteInfoArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfoArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuoteInfoArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuoteInfoArray));
  BlockInfoArray_descriptor_ = file->message_type(2);
  static const int BlockInfoArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfoArray, table_),
  };
  BlockInfoArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockInfoArray_descriptor_,
      BlockInfoArray::default_instance_,
      BlockInfoArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfoArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockInfoArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockInfoArray));
  MoneyInfoArray_descriptor_ = file->message_type(3);
  static const int MoneyInfoArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInfoArray, table_),
  };
  MoneyInfoArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyInfoArray_descriptor_,
      MoneyInfoArray::default_instance_,
      MoneyInfoArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInfoArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInfoArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyInfoArray));
  KlineInfoArray_descriptor_ = file->message_type(4);
  static const int KlineInfoArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KlineInfoArray, table_),
  };
  KlineInfoArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KlineInfoArray_descriptor_,
      KlineInfoArray::default_instance_,
      KlineInfoArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KlineInfoArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KlineInfoArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KlineInfoArray));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_inner_5fsvr_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuoteBaseStockInfo_descriptor_, &QuoteBaseStockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuoteInfoArray_descriptor_, &QuoteInfoArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockInfoArray_descriptor_, &BlockInfoArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyInfoArray_descriptor_, &MoneyInfoArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KlineInfoArray_descriptor_, &KlineInfoArray::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_inner_5fsvr_2eproto() {
  delete QuoteBaseStockInfo::default_instance_;
  delete QuoteBaseStockInfo_reflection_;
  delete QuoteInfoArray::default_instance_;
  delete QuoteInfoArray_reflection_;
  delete BlockInfoArray::default_instance_;
  delete BlockInfoArray_reflection_;
  delete MoneyInfoArray::default_instance_;
  delete MoneyInfoArray_reflection_;
  delete KlineInfoArray::default_instance_;
  delete KlineInfoArray_reflection_;
}

void protobuf_AddDesc_inner_5fsvr_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017inner_svr.proto\022\nQuoteProto\032\024public_me"
    "ssage.proto\"E\n\022QuoteBaseStockInfo\022/\n\013cod"
    "es_table\030\001 \003(\0132\032.QuoteProto.StockCodeTab"
    "le\"5\n\016QuoteInfoArray\022#\n\005table\030\001 \003(\0132\024.Qu"
    "oteProto.StockMsg\"5\n\016BlockInfoArray\022#\n\005t"
    "able\030\001 \003(\0132\024.QuoteProto.BlockMsg\"5\n\016Mone"
    "yInfoArray\022#\n\005table\030\001 \003(\0132\024.QuoteProto.M"
    "oneyMsg\"8\n\016KlineInfoArray\022&\n\005table\030\001 \003(\013"
    "2\027.QuoteProto.PeriodKLine", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "inner_svr.proto", &protobuf_RegisterTypes);
  QuoteBaseStockInfo::default_instance_ = new QuoteBaseStockInfo();
  QuoteInfoArray::default_instance_ = new QuoteInfoArray();
  BlockInfoArray::default_instance_ = new BlockInfoArray();
  MoneyInfoArray::default_instance_ = new MoneyInfoArray();
  KlineInfoArray::default_instance_ = new KlineInfoArray();
  QuoteBaseStockInfo::default_instance_->InitAsDefaultInstance();
  QuoteInfoArray::default_instance_->InitAsDefaultInstance();
  BlockInfoArray::default_instance_->InitAsDefaultInstance();
  MoneyInfoArray::default_instance_->InitAsDefaultInstance();
  KlineInfoArray::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_inner_5fsvr_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_inner_5fsvr_2eproto {
  StaticDescriptorInitializer_inner_5fsvr_2eproto() {
    protobuf_AddDesc_inner_5fsvr_2eproto();
  }
} static_descriptor_initializer_inner_5fsvr_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int QuoteBaseStockInfo::kCodesTableFieldNumber;
#endif  // !_MSC_VER

QuoteBaseStockInfo::QuoteBaseStockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuoteBaseStockInfo::InitAsDefaultInstance() {
}

QuoteBaseStockInfo::QuoteBaseStockInfo(const QuoteBaseStockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuoteBaseStockInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuoteBaseStockInfo::~QuoteBaseStockInfo() {
  SharedDtor();
}

void QuoteBaseStockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuoteBaseStockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteBaseStockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteBaseStockInfo_descriptor_;
}

const QuoteBaseStockInfo& QuoteBaseStockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fsvr_2eproto();  return *default_instance_;
}

QuoteBaseStockInfo* QuoteBaseStockInfo::default_instance_ = NULL;

QuoteBaseStockInfo* QuoteBaseStockInfo::New() const {
  return new QuoteBaseStockInfo;
}

void QuoteBaseStockInfo::Clear() {
  codes_table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuoteBaseStockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.StockCodeTable codes_table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_codes_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_codes_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_codes_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuoteBaseStockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.StockCodeTable codes_table = 1;
  for (int i = 0; i < this->codes_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->codes_table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuoteBaseStockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.StockCodeTable codes_table = 1;
  for (int i = 0; i < this->codes_table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->codes_table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuoteBaseStockInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.StockCodeTable codes_table = 1;
  total_size += 1 * this->codes_table_size();
  for (int i = 0; i < this->codes_table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->codes_table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteBaseStockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuoteBaseStockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuoteBaseStockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuoteBaseStockInfo::MergeFrom(const QuoteBaseStockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  codes_table_.MergeFrom(from.codes_table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuoteBaseStockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteBaseStockInfo::CopyFrom(const QuoteBaseStockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteBaseStockInfo::IsInitialized() const {
  
  for (int i = 0; i < codes_table_size(); i++) {
    if (!this->codes_table(i).IsInitialized()) return false;
  }
  return true;
}

void QuoteBaseStockInfo::Swap(QuoteBaseStockInfo* other) {
  if (other != this) {
    codes_table_.Swap(&other->codes_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuoteBaseStockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteBaseStockInfo_descriptor_;
  metadata.reflection = QuoteBaseStockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuoteInfoArray::kTableFieldNumber;
#endif  // !_MSC_VER

QuoteInfoArray::QuoteInfoArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuoteInfoArray::InitAsDefaultInstance() {
}

QuoteInfoArray::QuoteInfoArray(const QuoteInfoArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuoteInfoArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuoteInfoArray::~QuoteInfoArray() {
  SharedDtor();
}

void QuoteInfoArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuoteInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuoteInfoArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteInfoArray_descriptor_;
}

const QuoteInfoArray& QuoteInfoArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fsvr_2eproto();  return *default_instance_;
}

QuoteInfoArray* QuoteInfoArray::default_instance_ = NULL;

QuoteInfoArray* QuoteInfoArray::New() const {
  return new QuoteInfoArray;
}

void QuoteInfoArray::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuoteInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.StockMsg table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuoteInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.StockMsg table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuoteInfoArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.StockMsg table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuoteInfoArray::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.StockMsg table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuoteInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuoteInfoArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuoteInfoArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuoteInfoArray::MergeFrom(const QuoteInfoArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuoteInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuoteInfoArray::CopyFrom(const QuoteInfoArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuoteInfoArray::IsInitialized() const {
  
  for (int i = 0; i < table_size(); i++) {
    if (!this->table(i).IsInitialized()) return false;
  }
  return true;
}

void QuoteInfoArray::Swap(QuoteInfoArray* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuoteInfoArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuoteInfoArray_descriptor_;
  metadata.reflection = QuoteInfoArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockInfoArray::kTableFieldNumber;
#endif  // !_MSC_VER

BlockInfoArray::BlockInfoArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockInfoArray::InitAsDefaultInstance() {
}

BlockInfoArray::BlockInfoArray(const BlockInfoArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockInfoArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockInfoArray::~BlockInfoArray() {
  SharedDtor();
}

void BlockInfoArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockInfoArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockInfoArray_descriptor_;
}

const BlockInfoArray& BlockInfoArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fsvr_2eproto();  return *default_instance_;
}

BlockInfoArray* BlockInfoArray::default_instance_ = NULL;

BlockInfoArray* BlockInfoArray::New() const {
  return new BlockInfoArray;
}

void BlockInfoArray::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.BlockMsg table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.BlockMsg table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockInfoArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.BlockMsg table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockInfoArray::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.BlockMsg table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockInfoArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockInfoArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockInfoArray::MergeFrom(const BlockInfoArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInfoArray::CopyFrom(const BlockInfoArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInfoArray::IsInitialized() const {
  
  return true;
}

void BlockInfoArray::Swap(BlockInfoArray* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockInfoArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockInfoArray_descriptor_;
  metadata.reflection = BlockInfoArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyInfoArray::kTableFieldNumber;
#endif  // !_MSC_VER

MoneyInfoArray::MoneyInfoArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyInfoArray::InitAsDefaultInstance() {
}

MoneyInfoArray::MoneyInfoArray(const MoneyInfoArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyInfoArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyInfoArray::~MoneyInfoArray() {
  SharedDtor();
}

void MoneyInfoArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyInfoArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyInfoArray_descriptor_;
}

const MoneyInfoArray& MoneyInfoArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fsvr_2eproto();  return *default_instance_;
}

MoneyInfoArray* MoneyInfoArray::default_instance_ = NULL;

MoneyInfoArray* MoneyInfoArray::New() const {
  return new MoneyInfoArray;
}

void MoneyInfoArray::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.MoneyMsg table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.MoneyMsg table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyInfoArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.MoneyMsg table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyInfoArray::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.MoneyMsg table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyInfoArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyInfoArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyInfoArray::MergeFrom(const MoneyInfoArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyInfoArray::CopyFrom(const MoneyInfoArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyInfoArray::IsInitialized() const {
  
  return true;
}

void MoneyInfoArray::Swap(MoneyInfoArray* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyInfoArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyInfoArray_descriptor_;
  metadata.reflection = MoneyInfoArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KlineInfoArray::kTableFieldNumber;
#endif  // !_MSC_VER

KlineInfoArray::KlineInfoArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KlineInfoArray::InitAsDefaultInstance() {
}

KlineInfoArray::KlineInfoArray(const KlineInfoArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KlineInfoArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KlineInfoArray::~KlineInfoArray() {
  SharedDtor();
}

void KlineInfoArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KlineInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KlineInfoArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KlineInfoArray_descriptor_;
}

const KlineInfoArray& KlineInfoArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_inner_5fsvr_2eproto();  return *default_instance_;
}

KlineInfoArray* KlineInfoArray::default_instance_ = NULL;

KlineInfoArray* KlineInfoArray::New() const {
  return new KlineInfoArray;
}

void KlineInfoArray::Clear() {
  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KlineInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.PeriodKLine table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KlineInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.PeriodKLine table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KlineInfoArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.PeriodKLine table = 1;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KlineInfoArray::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.PeriodKLine table = 1;
  total_size += 1 * this->table_size();
  for (int i = 0; i < this->table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KlineInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KlineInfoArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KlineInfoArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KlineInfoArray::MergeFrom(const KlineInfoArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  table_.MergeFrom(from.table_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KlineInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KlineInfoArray::CopyFrom(const KlineInfoArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KlineInfoArray::IsInitialized() const {
  
  for (int i = 0; i < table_size(); i++) {
    if (!this->table(i).IsInitialized()) return false;
  }
  return true;
}

void KlineInfoArray::Swap(KlineInfoArray* other) {
  if (other != this) {
    table_.Swap(&other->table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KlineInfoArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KlineInfoArray_descriptor_;
  metadata.reflection = KlineInfoArray_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
