// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "ret_base.pb.h"
#include "public_message.pb.h"
// @@protoc_insertion_point(includes)

namespace QuoteProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_2eproto();
void protobuf_AssignDesc_user_2eproto();
void protobuf_ShutdownFile_user_2eproto();

class FirstConnectRequest;
class FirstConnectResponse;
class UserLoginRequest;
class UserLoginResponse;
class UserKickMsg;
class UploadLoginInfoRequest;
class UserPermissionErrMsg;

enum LoginRetType {
  success = 0,
  device_repeat = 1
};
bool LoginRetType_IsValid(int value);
const LoginRetType LoginRetType_MIN = success;
const LoginRetType LoginRetType_MAX = device_repeat;
const int LoginRetType_ARRAYSIZE = LoginRetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoginRetType_descriptor();
inline const ::std::string& LoginRetType_Name(LoginRetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoginRetType_descriptor(), value);
}
inline bool LoginRetType_Parse(
    const ::std::string& name, LoginRetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoginRetType>(
    LoginRetType_descriptor(), name, value);
}
// ===================================================================

class FirstConnectRequest : public ::google::protobuf::Message {
 public:
  FirstConnectRequest();
  virtual ~FirstConnectRequest();
  
  FirstConnectRequest(const FirstConnectRequest& from);
  
  inline FirstConnectRequest& operator=(const FirstConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstConnectRequest& default_instance();
  
  void Swap(FirstConnectRequest* other);
  
  // implements Message ----------------------------------------------
  
  FirstConnectRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstConnectRequest& from);
  void MergeFrom(const FirstConnectRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string aeskey = 1;
  inline bool has_aeskey() const;
  inline void clear_aeskey();
  static const int kAeskeyFieldNumber = 1;
  inline const ::std::string& aeskey() const;
  inline void set_aeskey(const ::std::string& value);
  inline void set_aeskey(const char* value);
  inline void set_aeskey(const char* value, size_t size);
  inline ::std::string* mutable_aeskey();
  inline ::std::string* release_aeskey();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.FirstConnectRequest)
 private:
  inline void set_has_aeskey();
  inline void clear_has_aeskey();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* aeskey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static FirstConnectRequest* default_instance_;
};
// -------------------------------------------------------------------

class FirstConnectResponse : public ::google::protobuf::Message {
 public:
  FirstConnectResponse();
  virtual ~FirstConnectResponse();
  
  FirstConnectResponse(const FirstConnectResponse& from);
  
  inline FirstConnectResponse& operator=(const FirstConnectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstConnectResponse& default_instance();
  
  void Swap(FirstConnectResponse* other);
  
  // implements Message ----------------------------------------------
  
  FirstConnectResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstConnectResponse& from);
  void MergeFrom(const FirstConnectResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QuoteProto.Ret ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline const ::QuoteProto::Ret& ret() const;
  inline ::QuoteProto::Ret* mutable_ret();
  inline ::QuoteProto::Ret* release_ret();
  
  // optional string pubkey = 2;
  inline bool has_pubkey() const;
  inline void clear_pubkey();
  static const int kPubkeyFieldNumber = 2;
  inline const ::std::string& pubkey() const;
  inline void set_pubkey(const ::std::string& value);
  inline void set_pubkey(const char* value);
  inline void set_pubkey(const char* value, size_t size);
  inline ::std::string* mutable_pubkey();
  inline ::std::string* release_pubkey();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.FirstConnectResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_pubkey();
  inline void clear_has_pubkey();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::Ret* ret_;
  ::std::string* pubkey_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static FirstConnectResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::Message {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();
  
  UserLoginRequest(const UserLoginRequest& from);
  
  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRequest& default_instance();
  
  void Swap(UserLoginRequest* other);
  
  // implements Message ----------------------------------------------
  
  UserLoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);
  
  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string token = 3;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 3;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserLoginRequest)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_token();
  inline void clear_has_token();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 uid_;
  ::std::string* password_;
  ::std::string* token_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static UserLoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserLoginResponse : public ::google::protobuf::Message {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();
  
  UserLoginResponse(const UserLoginResponse& from);
  
  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginResponse& default_instance();
  
  void Swap(UserLoginResponse* other);
  
  // implements Message ----------------------------------------------
  
  UserLoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QuoteProto.Ret ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline const ::QuoteProto::Ret& ret() const;
  inline ::QuoteProto::Ret* mutable_ret();
  inline ::QuoteProto::Ret* release_ret();
  
  // required uint64 uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);
  
  // optional .QuoteProto.UserLoginKickInfo kick_info = 3;
  inline bool has_kick_info() const;
  inline void clear_kick_info();
  static const int kKickInfoFieldNumber = 3;
  inline const ::QuoteProto::UserLoginKickInfo& kick_info() const;
  inline ::QuoteProto::UserLoginKickInfo* mutable_kick_info();
  inline ::QuoteProto::UserLoginKickInfo* release_kick_info();
  
  // optional .QuoteProto.UserPermissionInfo permissions = 4;
  inline bool has_permissions() const;
  inline void clear_permissions();
  static const int kPermissionsFieldNumber = 4;
  inline const ::QuoteProto::UserPermissionInfo& permissions() const;
  inline ::QuoteProto::UserPermissionInfo* mutable_permissions();
  inline ::QuoteProto::UserPermissionInfo* release_permissions();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserLoginResponse)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_kick_info();
  inline void clear_has_kick_info();
  inline void set_has_permissions();
  inline void clear_has_permissions();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::Ret* ret_;
  ::google::protobuf::uint64 uid_;
  ::QuoteProto::UserLoginKickInfo* kick_info_;
  ::QuoteProto::UserPermissionInfo* permissions_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static UserLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserKickMsg : public ::google::protobuf::Message {
 public:
  UserKickMsg();
  virtual ~UserKickMsg();
  
  UserKickMsg(const UserKickMsg& from);
  
  inline UserKickMsg& operator=(const UserKickMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserKickMsg& default_instance();
  
  void Swap(UserKickMsg* other);
  
  // implements Message ----------------------------------------------
  
  UserKickMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserKickMsg& from);
  void MergeFrom(const UserKickMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QuoteProto.UserLoginKickInfo kick_info = 1;
  inline bool has_kick_info() const;
  inline void clear_kick_info();
  static const int kKickInfoFieldNumber = 1;
  inline const ::QuoteProto::UserLoginKickInfo& kick_info() const;
  inline ::QuoteProto::UserLoginKickInfo* mutable_kick_info();
  inline ::QuoteProto::UserLoginKickInfo* release_kick_info();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserKickMsg)
 private:
  inline void set_has_kick_info();
  inline void clear_has_kick_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::QuoteProto::UserLoginKickInfo* kick_info_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static UserKickMsg* default_instance_;
};
// -------------------------------------------------------------------

class UploadLoginInfoRequest : public ::google::protobuf::Message {
 public:
  UploadLoginInfoRequest();
  virtual ~UploadLoginInfoRequest();
  
  UploadLoginInfoRequest(const UploadLoginInfoRequest& from);
  
  inline UploadLoginInfoRequest& operator=(const UploadLoginInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadLoginInfoRequest& default_instance();
  
  void Swap(UploadLoginInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  UploadLoginInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadLoginInfoRequest& from);
  void MergeFrom(const UploadLoginInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .QuoteProto.UserLoginInfo login_users = 1;
  inline int login_users_size() const;
  inline void clear_login_users();
  static const int kLoginUsersFieldNumber = 1;
  inline const ::QuoteProto::UserLoginInfo& login_users(int index) const;
  inline ::QuoteProto::UserLoginInfo* mutable_login_users(int index);
  inline ::QuoteProto::UserLoginInfo* add_login_users();
  inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserLoginInfo >&
      login_users() const;
  inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserLoginInfo >*
      mutable_login_users();
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UploadLoginInfoRequest)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserLoginInfo > login_users_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static UploadLoginInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserPermissionErrMsg : public ::google::protobuf::Message {
 public:
  UserPermissionErrMsg();
  virtual ~UserPermissionErrMsg();
  
  UserPermissionErrMsg(const UserPermissionErrMsg& from);
  
  inline UserPermissionErrMsg& operator=(const UserPermissionErrMsg& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserPermissionErrMsg& default_instance();
  
  void Swap(UserPermissionErrMsg* other);
  
  // implements Message ----------------------------------------------
  
  UserPermissionErrMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserPermissionErrMsg& from);
  void MergeFrom(const UserPermissionErrMsg& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::google::protobuf::uint32 cmd() const;
  inline void set_cmd(::google::protobuf::uint32 value);
  
  // optional uint32 seq = 2;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 seq() const;
  inline void set_seq(::google::protobuf::uint32 value);
  
  // optional int32 permission_id = 3;
  inline bool has_permission_id() const;
  inline void clear_permission_id();
  static const int kPermissionIdFieldNumber = 3;
  inline ::google::protobuf::int32 permission_id() const;
  inline void set_permission_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:QuoteProto.UserPermissionErrMsg)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_seq();
  inline void clear_has_seq();
  inline void set_has_permission_id();
  inline void clear_has_permission_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 cmd_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::int32 permission_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();
  
  void InitAsDefaultInstance();
  static UserPermissionErrMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// FirstConnectRequest

// required string aeskey = 1;
inline bool FirstConnectRequest::has_aeskey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstConnectRequest::set_has_aeskey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstConnectRequest::clear_has_aeskey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstConnectRequest::clear_aeskey() {
  if (aeskey_ != &::google::protobuf::internal::kEmptyString) {
    aeskey_->clear();
  }
  clear_has_aeskey();
}
inline const ::std::string& FirstConnectRequest::aeskey() const {
  return *aeskey_;
}
inline void FirstConnectRequest::set_aeskey(const ::std::string& value) {
  set_has_aeskey();
  if (aeskey_ == &::google::protobuf::internal::kEmptyString) {
    aeskey_ = new ::std::string;
  }
  aeskey_->assign(value);
}
inline void FirstConnectRequest::set_aeskey(const char* value) {
  set_has_aeskey();
  if (aeskey_ == &::google::protobuf::internal::kEmptyString) {
    aeskey_ = new ::std::string;
  }
  aeskey_->assign(value);
}
inline void FirstConnectRequest::set_aeskey(const char* value, size_t size) {
  set_has_aeskey();
  if (aeskey_ == &::google::protobuf::internal::kEmptyString) {
    aeskey_ = new ::std::string;
  }
  aeskey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FirstConnectRequest::mutable_aeskey() {
  set_has_aeskey();
  if (aeskey_ == &::google::protobuf::internal::kEmptyString) {
    aeskey_ = new ::std::string;
  }
  return aeskey_;
}
inline ::std::string* FirstConnectRequest::release_aeskey() {
  clear_has_aeskey();
  if (aeskey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = aeskey_;
    aeskey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FirstConnectResponse

// required .QuoteProto.Ret ret = 1;
inline bool FirstConnectResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstConnectResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstConnectResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstConnectResponse::clear_ret() {
  if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
  clear_has_ret();
}
inline const ::QuoteProto::Ret& FirstConnectResponse::ret() const {
  return ret_ != NULL ? *ret_ : *default_instance_->ret_;
}
inline ::QuoteProto::Ret* FirstConnectResponse::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) ret_ = new ::QuoteProto::Ret;
  return ret_;
}
inline ::QuoteProto::Ret* FirstConnectResponse::release_ret() {
  clear_has_ret();
  ::QuoteProto::Ret* temp = ret_;
  ret_ = NULL;
  return temp;
}

// optional string pubkey = 2;
inline bool FirstConnectResponse::has_pubkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FirstConnectResponse::set_has_pubkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FirstConnectResponse::clear_has_pubkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FirstConnectResponse::clear_pubkey() {
  if (pubkey_ != &::google::protobuf::internal::kEmptyString) {
    pubkey_->clear();
  }
  clear_has_pubkey();
}
inline const ::std::string& FirstConnectResponse::pubkey() const {
  return *pubkey_;
}
inline void FirstConnectResponse::set_pubkey(const ::std::string& value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void FirstConnectResponse::set_pubkey(const char* value) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(value);
}
inline void FirstConnectResponse::set_pubkey(const char* value, size_t size) {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  pubkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FirstConnectResponse::mutable_pubkey() {
  set_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    pubkey_ = new ::std::string;
  }
  return pubkey_;
}
inline ::std::string* FirstConnectResponse::release_pubkey() {
  clear_has_pubkey();
  if (pubkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pubkey_;
    pubkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserLoginRequest

// required uint64 uid = 1;
inline bool UserLoginRequest::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginRequest::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginRequest::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginRequest::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 UserLoginRequest::uid() const {
  return uid_;
}
inline void UserLoginRequest::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string password = 2;
inline bool UserLoginRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& UserLoginRequest::password() const {
  return *password_;
}
inline void UserLoginRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserLoginRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserLoginRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* UserLoginRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string token = 3;
inline bool UserLoginRequest::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginRequest::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginRequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginRequest::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& UserLoginRequest::token() const {
  return *token_;
}
inline void UserLoginRequest::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void UserLoginRequest::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void UserLoginRequest::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserLoginRequest::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* UserLoginRequest::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserLoginResponse

// required .QuoteProto.Ret ret = 1;
inline bool UserLoginResponse::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserLoginResponse::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserLoginResponse::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserLoginResponse::clear_ret() {
  if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
  clear_has_ret();
}
inline const ::QuoteProto::Ret& UserLoginResponse::ret() const {
  return ret_ != NULL ? *ret_ : *default_instance_->ret_;
}
inline ::QuoteProto::Ret* UserLoginResponse::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) ret_ = new ::QuoteProto::Ret;
  return ret_;
}
inline ::QuoteProto::Ret* UserLoginResponse::release_ret() {
  clear_has_ret();
  ::QuoteProto::Ret* temp = ret_;
  ret_ = NULL;
  return temp;
}

// required uint64 uid = 2;
inline bool UserLoginResponse::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserLoginResponse::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserLoginResponse::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserLoginResponse::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 UserLoginResponse::uid() const {
  return uid_;
}
inline void UserLoginResponse::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional .QuoteProto.UserLoginKickInfo kick_info = 3;
inline bool UserLoginResponse::has_kick_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserLoginResponse::set_has_kick_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserLoginResponse::clear_has_kick_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserLoginResponse::clear_kick_info() {
  if (kick_info_ != NULL) kick_info_->::QuoteProto::UserLoginKickInfo::Clear();
  clear_has_kick_info();
}
inline const ::QuoteProto::UserLoginKickInfo& UserLoginResponse::kick_info() const {
  return kick_info_ != NULL ? *kick_info_ : *default_instance_->kick_info_;
}
inline ::QuoteProto::UserLoginKickInfo* UserLoginResponse::mutable_kick_info() {
  set_has_kick_info();
  if (kick_info_ == NULL) kick_info_ = new ::QuoteProto::UserLoginKickInfo;
  return kick_info_;
}
inline ::QuoteProto::UserLoginKickInfo* UserLoginResponse::release_kick_info() {
  clear_has_kick_info();
  ::QuoteProto::UserLoginKickInfo* temp = kick_info_;
  kick_info_ = NULL;
  return temp;
}

// optional .QuoteProto.UserPermissionInfo permissions = 4;
inline bool UserLoginResponse::has_permissions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserLoginResponse::set_has_permissions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserLoginResponse::clear_has_permissions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserLoginResponse::clear_permissions() {
  if (permissions_ != NULL) permissions_->::QuoteProto::UserPermissionInfo::Clear();
  clear_has_permissions();
}
inline const ::QuoteProto::UserPermissionInfo& UserLoginResponse::permissions() const {
  return permissions_ != NULL ? *permissions_ : *default_instance_->permissions_;
}
inline ::QuoteProto::UserPermissionInfo* UserLoginResponse::mutable_permissions() {
  set_has_permissions();
  if (permissions_ == NULL) permissions_ = new ::QuoteProto::UserPermissionInfo;
  return permissions_;
}
inline ::QuoteProto::UserPermissionInfo* UserLoginResponse::release_permissions() {
  clear_has_permissions();
  ::QuoteProto::UserPermissionInfo* temp = permissions_;
  permissions_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UserKickMsg

// required .QuoteProto.UserLoginKickInfo kick_info = 1;
inline bool UserKickMsg::has_kick_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserKickMsg::set_has_kick_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserKickMsg::clear_has_kick_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserKickMsg::clear_kick_info() {
  if (kick_info_ != NULL) kick_info_->::QuoteProto::UserLoginKickInfo::Clear();
  clear_has_kick_info();
}
inline const ::QuoteProto::UserLoginKickInfo& UserKickMsg::kick_info() const {
  return kick_info_ != NULL ? *kick_info_ : *default_instance_->kick_info_;
}
inline ::QuoteProto::UserLoginKickInfo* UserKickMsg::mutable_kick_info() {
  set_has_kick_info();
  if (kick_info_ == NULL) kick_info_ = new ::QuoteProto::UserLoginKickInfo;
  return kick_info_;
}
inline ::QuoteProto::UserLoginKickInfo* UserKickMsg::release_kick_info() {
  clear_has_kick_info();
  ::QuoteProto::UserLoginKickInfo* temp = kick_info_;
  kick_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// UploadLoginInfoRequest

// repeated .QuoteProto.UserLoginInfo login_users = 1;
inline int UploadLoginInfoRequest::login_users_size() const {
  return login_users_.size();
}
inline void UploadLoginInfoRequest::clear_login_users() {
  login_users_.Clear();
}
inline const ::QuoteProto::UserLoginInfo& UploadLoginInfoRequest::login_users(int index) const {
  return login_users_.Get(index);
}
inline ::QuoteProto::UserLoginInfo* UploadLoginInfoRequest::mutable_login_users(int index) {
  return login_users_.Mutable(index);
}
inline ::QuoteProto::UserLoginInfo* UploadLoginInfoRequest::add_login_users() {
  return login_users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserLoginInfo >&
UploadLoginInfoRequest::login_users() const {
  return login_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::QuoteProto::UserLoginInfo >*
UploadLoginInfoRequest::mutable_login_users() {
  return &login_users_;
}

// -------------------------------------------------------------------

// UserPermissionErrMsg

// optional uint32 cmd = 1;
inline bool UserPermissionErrMsg::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserPermissionErrMsg::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserPermissionErrMsg::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserPermissionErrMsg::clear_cmd() {
  cmd_ = 0u;
  clear_has_cmd();
}
inline ::google::protobuf::uint32 UserPermissionErrMsg::cmd() const {
  return cmd_;
}
inline void UserPermissionErrMsg::set_cmd(::google::protobuf::uint32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional uint32 seq = 2;
inline bool UserPermissionErrMsg::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserPermissionErrMsg::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserPermissionErrMsg::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserPermissionErrMsg::clear_seq() {
  seq_ = 0u;
  clear_has_seq();
}
inline ::google::protobuf::uint32 UserPermissionErrMsg::seq() const {
  return seq_;
}
inline void UserPermissionErrMsg::set_seq(::google::protobuf::uint32 value) {
  set_has_seq();
  seq_ = value;
}

// optional int32 permission_id = 3;
inline bool UserPermissionErrMsg::has_permission_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserPermissionErrMsg::set_has_permission_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserPermissionErrMsg::clear_has_permission_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserPermissionErrMsg::clear_permission_id() {
  permission_id_ = 0;
  clear_has_permission_id();
}
inline ::google::protobuf::int32 UserPermissionErrMsg::permission_id() const {
  return permission_id_;
}
inline void UserPermissionErrMsg::set_permission_id(::google::protobuf::int32 value) {
  set_has_permission_id();
  permission_id_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< QuoteProto::LoginRetType>() {
  return QuoteProto::LoginRetType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED
