// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stock_basinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* BatchGetStockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetStockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetStockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetStockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockOptionalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockOptionalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockOptionalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockOptionalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyOptionalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyOptionalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyOptionalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyOptionalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyFieldLineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyFieldLineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyFieldLineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyFieldLineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStockRiseFallInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStockRiseFallInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStockRiseFallInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStockRiseFallInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStocksOfBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStocksOfBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetStocksOfBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetStocksOfBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyAbnormalOptionalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyAbnormalOptionalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyAbnormalOptionalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyAbnormalOptionalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetMoneyAbnormalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetMoneyAbnormalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetMoneyAbnormalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetMoneyAbnormalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMoneyAbnoramlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMoneyAbnoramlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMoneyAbnoramlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMoneyAbnoramlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMoneyAbnormalPCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMoneyAbnormalPCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMoneyAbnormalPCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMoneyAbnormalPCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTimeResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FASortType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_stock_5fbasinfo_2eproto() {
  protobuf_AddDesc_stock_5fbasinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stock_basinfo.proto");
  GOOGLE_CHECK(file != NULL);
  BatchGetStockRequest_descriptor_ = file->message_type(0);
  static const int BatchGetStockRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, filter_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, sort_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, count_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, msg_mask_),
  };
  BatchGetStockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetStockRequest_descriptor_,
      BatchGetStockRequest::default_instance_,
      BatchGetStockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetStockRequest));
  BatchGetStockResponse_descriptor_ = file->message_type(1);
  static const int BatchGetStockResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockResponse, total_cnt_),
  };
  BatchGetStockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetStockResponse_descriptor_,
      BatchGetStockResponse::default_instance_,
      BatchGetStockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetStockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetStockResponse));
  StockOptionalRequest_descriptor_ = file->message_type(2);
  static const int StockOptionalRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalRequest, kline_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalRequest, msg_mask_),
  };
  StockOptionalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockOptionalRequest_descriptor_,
      StockOptionalRequest::default_instance_,
      StockOptionalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockOptionalRequest));
  StockOptionalResponse_descriptor_ = file->message_type(3);
  static const int StockOptionalResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalResponse, kline_info_),
  };
  StockOptionalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockOptionalResponse_descriptor_,
      StockOptionalResponse::default_instance_,
      StockOptionalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockOptionalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockOptionalResponse));
  MoneyOptionalRequest_descriptor_ = file->message_type(4);
  static const int MoneyOptionalRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalRequest, msg_mask_),
  };
  MoneyOptionalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyOptionalRequest_descriptor_,
      MoneyOptionalRequest::default_instance_,
      MoneyOptionalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyOptionalRequest));
  MoneyOptionalResponse_descriptor_ = file->message_type(5);
  static const int MoneyOptionalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalResponse, stk_),
  };
  MoneyOptionalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyOptionalResponse_descriptor_,
      MoneyOptionalResponse::default_instance_,
      MoneyOptionalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyOptionalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyOptionalResponse));
  BatchGetMoneyRequest_descriptor_ = file->message_type(6);
  static const int BatchGetMoneyRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, filter_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, sort_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, count_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, msg_mask_),
  };
  BatchGetMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetMoneyRequest_descriptor_,
      BatchGetMoneyRequest::default_instance_,
      BatchGetMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetMoneyRequest));
  BatchGetMoneyResponse_descriptor_ = file->message_type(7);
  static const int BatchGetMoneyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyResponse, total_cnt_),
  };
  BatchGetMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetMoneyResponse_descriptor_,
      BatchGetMoneyResponse::default_instance_,
      BatchGetMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetMoneyResponse));
  MoneyFieldLineRequest_descriptor_ = file->message_type(8);
  static const int MoneyFieldLineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineRequest, stock_code_),
  };
  MoneyFieldLineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyFieldLineRequest_descriptor_,
      MoneyFieldLineRequest::default_instance_,
      MoneyFieldLineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyFieldLineRequest));
  MoneyFieldLineResponse_descriptor_ = file->message_type(9);
  static const int MoneyFieldLineResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineResponse, stk_),
  };
  MoneyFieldLineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyFieldLineResponse_descriptor_,
      MoneyFieldLineResponse::default_instance_,
      MoneyFieldLineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFieldLineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyFieldLineResponse));
  GetStockRiseFallInfoRequest_descriptor_ = file->message_type(10);
  static const int GetStockRiseFallInfoRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoRequest, stock_code_),
  };
  GetStockRiseFallInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStockRiseFallInfoRequest_descriptor_,
      GetStockRiseFallInfoRequest::default_instance_,
      GetStockRiseFallInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStockRiseFallInfoRequest));
  GetStockRiseFallInfoResponse_descriptor_ = file->message_type(11);
  static const int GetStockRiseFallInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoResponse, info_),
  };
  GetStockRiseFallInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStockRiseFallInfoResponse_descriptor_,
      GetStockRiseFallInfoResponse::default_instance_,
      GetStockRiseFallInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStockRiseFallInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStockRiseFallInfoResponse));
  GetStocksOfBlockRequest_descriptor_ = file->message_type(12);
  static const int GetStocksOfBlockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockRequest, count_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockRequest, msg_mask_),
  };
  GetStocksOfBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStocksOfBlockRequest_descriptor_,
      GetStocksOfBlockRequest::default_instance_,
      GetStocksOfBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStocksOfBlockRequest));
  GetStocksOfBlockResponse_descriptor_ = file->message_type(13);
  static const int GetStocksOfBlockResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockResponse, total_cnt_),
  };
  GetStocksOfBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetStocksOfBlockResponse_descriptor_,
      GetStocksOfBlockResponse::default_instance_,
      GetStocksOfBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetStocksOfBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetStocksOfBlockResponse));
  MoneyAbnormalOptionalRequest_descriptor_ = file->message_type(14);
  static const int MoneyAbnormalOptionalRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalRequest, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalRequest, msg_mask_),
  };
  MoneyAbnormalOptionalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyAbnormalOptionalRequest_descriptor_,
      MoneyAbnormalOptionalRequest::default_instance_,
      MoneyAbnormalOptionalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyAbnormalOptionalRequest));
  MoneyAbnormalOptionalResponse_descriptor_ = file->message_type(15);
  static const int MoneyAbnormalOptionalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalResponse, stk_),
  };
  MoneyAbnormalOptionalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyAbnormalOptionalResponse_descriptor_,
      MoneyAbnormalOptionalResponse::default_instance_,
      MoneyAbnormalOptionalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyAbnormalOptionalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyAbnormalOptionalResponse));
  BatchGetMoneyAbnormalRequest_descriptor_ = file->message_type(16);
  static const int BatchGetMoneyAbnormalRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, sort_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, count_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, msg_mask_),
  };
  BatchGetMoneyAbnormalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetMoneyAbnormalRequest_descriptor_,
      BatchGetMoneyAbnormalRequest::default_instance_,
      BatchGetMoneyAbnormalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetMoneyAbnormalRequest));
  BatchGetMoneyAbnormalResponse_descriptor_ = file->message_type(17);
  static const int BatchGetMoneyAbnormalResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalResponse, total_cnt_),
  };
  BatchGetMoneyAbnormalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetMoneyAbnormalResponse_descriptor_,
      BatchGetMoneyAbnormalResponse::default_instance_,
      BatchGetMoneyAbnormalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetMoneyAbnormalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetMoneyAbnormalResponse));
  BlockMoneyAbnoramlRequest_descriptor_ = file->message_type(18);
  static const int BlockMoneyAbnoramlRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlRequest, block_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlRequest, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlRequest, count_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlRequest, is_desc_),
  };
  BlockMoneyAbnoramlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMoneyAbnoramlRequest_descriptor_,
      BlockMoneyAbnoramlRequest::default_instance_,
      BlockMoneyAbnoramlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMoneyAbnoramlRequest));
  BlockMoneyAbnoramlResponse_descriptor_ = file->message_type(19);
  static const int BlockMoneyAbnoramlResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlResponse, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlResponse, total_cnt_),
  };
  BlockMoneyAbnoramlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMoneyAbnoramlResponse_descriptor_,
      BlockMoneyAbnoramlResponse::default_instance_,
      BlockMoneyAbnoramlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnoramlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMoneyAbnoramlResponse));
  BlockMoneyAbnormalPCRequest_descriptor_ = file->message_type(20);
  static const int BlockMoneyAbnormalPCRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCRequest, filter_),
  };
  BlockMoneyAbnormalPCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMoneyAbnormalPCRequest_descriptor_,
      BlockMoneyAbnormalPCRequest::default_instance_,
      BlockMoneyAbnormalPCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMoneyAbnormalPCRequest));
  BlockMoneyAbnormalPCResponse_descriptor_ = file->message_type(21);
  static const int BlockMoneyAbnormalPCResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCResponse, blocks_),
  };
  BlockMoneyAbnormalPCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMoneyAbnormalPCResponse_descriptor_,
      BlockMoneyAbnormalPCResponse::default_instance_,
      BlockMoneyAbnormalPCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMoneyAbnormalPCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMoneyAbnormalPCResponse));
  GetTimeRequest_descriptor_ = file->message_type(22);
  static const int GetTimeRequest_offsets_[1] = {
  };
  GetTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTimeRequest_descriptor_,
      GetTimeRequest::default_instance_,
      GetTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTimeRequest));
  GetTimeResponse_descriptor_ = file->message_type(23);
  static const int GetTimeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResponse, cur_time_),
  };
  GetTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTimeResponse_descriptor_,
      GetTimeResponse::default_instance_,
      GetTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTimeResponse));
  SortType_descriptor_ = file->enum_type(0);
  FASortType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stock_5fbasinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetStockRequest_descriptor_, &BatchGetStockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetStockResponse_descriptor_, &BatchGetStockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockOptionalRequest_descriptor_, &StockOptionalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockOptionalResponse_descriptor_, &StockOptionalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyOptionalRequest_descriptor_, &MoneyOptionalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyOptionalResponse_descriptor_, &MoneyOptionalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetMoneyRequest_descriptor_, &BatchGetMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetMoneyResponse_descriptor_, &BatchGetMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyFieldLineRequest_descriptor_, &MoneyFieldLineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyFieldLineResponse_descriptor_, &MoneyFieldLineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStockRiseFallInfoRequest_descriptor_, &GetStockRiseFallInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStockRiseFallInfoResponse_descriptor_, &GetStockRiseFallInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStocksOfBlockRequest_descriptor_, &GetStocksOfBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetStocksOfBlockResponse_descriptor_, &GetStocksOfBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyAbnormalOptionalRequest_descriptor_, &MoneyAbnormalOptionalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyAbnormalOptionalResponse_descriptor_, &MoneyAbnormalOptionalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetMoneyAbnormalRequest_descriptor_, &BatchGetMoneyAbnormalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetMoneyAbnormalResponse_descriptor_, &BatchGetMoneyAbnormalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMoneyAbnoramlRequest_descriptor_, &BlockMoneyAbnoramlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMoneyAbnoramlResponse_descriptor_, &BlockMoneyAbnoramlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMoneyAbnormalPCRequest_descriptor_, &BlockMoneyAbnormalPCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMoneyAbnormalPCResponse_descriptor_, &BlockMoneyAbnormalPCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTimeRequest_descriptor_, &GetTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTimeResponse_descriptor_, &GetTimeResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stock_5fbasinfo_2eproto() {
  delete BatchGetStockRequest::default_instance_;
  delete BatchGetStockRequest_reflection_;
  delete BatchGetStockResponse::default_instance_;
  delete BatchGetStockResponse_reflection_;
  delete StockOptionalRequest::default_instance_;
  delete StockOptionalRequest_reflection_;
  delete StockOptionalResponse::default_instance_;
  delete StockOptionalResponse_reflection_;
  delete MoneyOptionalRequest::default_instance_;
  delete MoneyOptionalRequest_reflection_;
  delete MoneyOptionalResponse::default_instance_;
  delete MoneyOptionalResponse_reflection_;
  delete BatchGetMoneyRequest::default_instance_;
  delete BatchGetMoneyRequest_reflection_;
  delete BatchGetMoneyResponse::default_instance_;
  delete BatchGetMoneyResponse_reflection_;
  delete MoneyFieldLineRequest::default_instance_;
  delete MoneyFieldLineRequest_reflection_;
  delete MoneyFieldLineResponse::default_instance_;
  delete MoneyFieldLineResponse_reflection_;
  delete GetStockRiseFallInfoRequest::default_instance_;
  delete GetStockRiseFallInfoRequest_reflection_;
  delete GetStockRiseFallInfoResponse::default_instance_;
  delete GetStockRiseFallInfoResponse_reflection_;
  delete GetStocksOfBlockRequest::default_instance_;
  delete GetStocksOfBlockRequest_reflection_;
  delete GetStocksOfBlockResponse::default_instance_;
  delete GetStocksOfBlockResponse_reflection_;
  delete MoneyAbnormalOptionalRequest::default_instance_;
  delete MoneyAbnormalOptionalRequest_reflection_;
  delete MoneyAbnormalOptionalResponse::default_instance_;
  delete MoneyAbnormalOptionalResponse_reflection_;
  delete BatchGetMoneyAbnormalRequest::default_instance_;
  delete BatchGetMoneyAbnormalRequest_reflection_;
  delete BatchGetMoneyAbnormalResponse::default_instance_;
  delete BatchGetMoneyAbnormalResponse_reflection_;
  delete BlockMoneyAbnoramlRequest::default_instance_;
  delete BlockMoneyAbnoramlRequest_reflection_;
  delete BlockMoneyAbnoramlResponse::default_instance_;
  delete BlockMoneyAbnoramlResponse_reflection_;
  delete BlockMoneyAbnormalPCRequest::default_instance_;
  delete BlockMoneyAbnormalPCRequest_reflection_;
  delete BlockMoneyAbnormalPCResponse::default_instance_;
  delete BlockMoneyAbnormalPCResponse_reflection_;
  delete GetTimeRequest::default_instance_;
  delete GetTimeRequest_reflection_;
  delete GetTimeResponse::default_instance_;
  delete GetTimeResponse_reflection_;
}

void protobuf_AddDesc_stock_5fbasinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023stock_basinfo.proto\022\nQuoteProto\032\016ret_b"
    "ase.proto\032\024public_message.proto\"\340\001\n\024Batc"
    "hGetStockRequest\022+\n\006filter\030\001 \002(\0162\033.Quote"
    "Proto.QuoteFilterFlag\022\025\n\rfilter_detail\030\002"
    " \002(\t\022(\n\nsort_field\030\003 \002(\0162\024.QuoteProto.So"
    "rtType\022\017\n\007is_desc\030\004 \002(\010\022\r\n\005index\030\005 \002(\005\022\023"
    "\n\013count_range\030\006 \002(\005\022%\n\010msg_mask\030\007 \001(\0132\023."
    "QuoteProto.MsgMask\"k\n\025BatchGetStockRespo"
    "nse\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022!\n\003stk"
    "\030\002 \003(\0132\024.QuoteProto.StockMsg\022\021\n\ttotal_cn"
    "t\030\003 \001(\005\"e\n\024StockOptionalRequest\022\022\n\nkline"
    "_type\030\001 \001(\005\022\022\n\nstock_code\030\002 \003(\t\022%\n\010msg_m"
    "ask\030\003 \001(\0132\023.QuoteProto.MsgMask\"\205\001\n\025Stock"
    "OptionalResponse\022\034\n\003ret\030\001 \002(\0132\017.QuotePro"
    "to.Ret\022!\n\003stk\030\002 \003(\0132\024.QuoteProto.StockMs"
    "g\022+\n\nkline_info\030\003 \003(\0132\027.QuoteProto.Perio"
    "dKLine\"Q\n\024MoneyOptionalRequest\022\022\n\nstock_"
    "code\030\001 \003(\t\022%\n\010msg_mask\030\003 \001(\0132\023.QuoteProt"
    "o.MsgMask\"X\n\025MoneyOptionalResponse\022\034\n\003re"
    "t\030\001 \002(\0132\017.QuoteProto.Ret\022!\n\003stk\030\002 \003(\0132\024."
    "QuoteProto.MoneyMsg\"\340\001\n\024BatchGetMoneyReq"
    "uest\022+\n\006filter\030\001 \002(\0162\033.QuoteProto.QuoteF"
    "ilterFlag\022\025\n\rfilter_detail\030\002 \002(\t\022(\n\nsort"
    "_field\030\003 \002(\0162\024.QuoteProto.SortType\022\017\n\007is"
    "_desc\030\004 \002(\010\022\r\n\005index\030\005 \002(\005\022\023\n\013count_rang"
    "e\030\006 \002(\005\022%\n\010msg_mask\030\007 \001(\0132\023.QuoteProto.M"
    "sgMask\"k\n\025BatchGetMoneyResponse\022\034\n\003ret\030\001"
    " \002(\0132\017.QuoteProto.Ret\022!\n\003stk\030\002 \003(\0132\024.Quo"
    "teProto.MoneyMsg\022\021\n\ttotal_cnt\030\003 \001(\005\"+\n\025M"
    "oneyFieldLineRequest\022\022\n\nstock_code\030\001 \001(\t"
    "\"[\n\026MoneyFieldLineResponse\022\034\n\003ret\030\001 \002(\0132"
    "\017.QuoteProto.Ret\022#\n\003stk\030\002 \003(\0132\026.QuotePro"
    "to.MoneyFeild\"1\n\033GetStockRiseFallInfoReq"
    "uest\022\022\n\nstock_code\030\001 \002(\t\"i\n\034GetStockRise"
    "FallInfoResponse\022\034\n\003ret\030\001 \002(\0132\017.QuotePro"
    "to.Ret\022+\n\004info\030\002 \001(\0132\035.QuoteProto.StockR"
    "iseFallInfo\"x\n\027GetStocksOfBlockRequest\022\022"
    "\n\nstock_code\030\001 \002(\t\022\r\n\005index\030\002 \002(\005\022\023\n\013cou"
    "nt_range\030\003 \002(\005\022%\n\010msg_mask\030\005 \001(\0132\023.Quote"
    "Proto.MsgMask\"n\n\030GetStocksOfBlockRespons"
    "e\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022!\n\003stk\030\002"
    " \003(\0132\024.QuoteProto.StockMsg\022\021\n\ttotal_cnt\030"
    "\003 \001(\005\"Y\n\034MoneyAbnormalOptionalRequest\022\022\n"
    "\nstock_code\030\001 \003(\t\022%\n\010msg_mask\030\002 \001(\0132\023.Qu"
    "oteProto.MsgMask\"g\n\035MoneyAbnormalOptiona"
    "lResponse\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022"
    "(\n\003stk\030\002 \003(\0132\033.QuoteProto.FundAbnormalMs"
    "g\"\322\001\n\034BatchGetMoneyAbnormalRequest\022*\n\004ty"
    "pe\030\001 \002(\0162\034.QuoteProto.FundAbnormalType\022*"
    "\n\nsort_field\030\002 \002(\0162\026.QuoteProto.FASortTy"
    "pe\022\017\n\007is_desc\030\003 \002(\010\022\r\n\005index\030\004 \002(\005\022\023\n\013co"
    "unt_range\030\005 \002(\005\022%\n\010msg_mask\030\006 \001(\0132\023.Quot"
    "eProto.MsgMask\"z\n\035BatchGetMoneyAbnormalR"
    "esponse\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022(\n"
    "\003stk\030\002 \003(\0132\033.QuoteProto.FundAbnormalMsg\022"
    "\021\n\ttotal_cnt\030\003 \001(\005\"j\n\031BlockMoneyAbnoraml"
    "Request\022\022\n\nblock_code\030\001 \002(\t\022\023\n\013update_ti"
    "me\030\002 \002(\r\022\023\n\013count_range\030\003 \002(\005\022\017\n\007is_desc"
    "\030\004 \002(\010\"\200\001\n\032BlockMoneyAbnoramlResponse\022\034\n"
    "\003ret\030\001 \002(\0132\017.QuoteProto.Ret\0221\n\006blocks\030\002 "
    "\003(\0132!.QuoteProto.BlockFundAbnormalItem\022\021"
    "\n\ttotal_cnt\030\003 \001(\005\"J\n\033BlockMoneyAbnormalP"
    "CRequest\022+\n\006filter\030\001 \002(\0162\033.QuoteProto.Qu"
    "oteFilterFlag\"b\n\034BlockMoneyAbnormalPCRes"
    "ponse\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto.Ret\022$\n\006b"
    "locks\030\002 \003(\0132\024.QuoteProto.StockMsg\"\020\n\016Get"
    "TimeRequest\"A\n\017GetTimeResponse\022\034\n\003ret\030\001 "
    "\002(\0132\017.QuoteProto.Ret\022\020\n\010cur_time\030\002 \001(\005*\356"
    "\014\n\010SortType\022\021\n\rhighest_price\020\001\022\020\n\014lowest"
    "_price\020\002\022\016\n\nlast_price\020\003\022\020\n\014averag_price"
    "\020\004\022\023\n\017rise_fall_price\020\005\022\022\n\016rise_fall_rat"
    "e\020\006\022\r\n\tbid_price\020\007\022\r\n\task_price\020\010\022\n\n\006vol"
    "ume\020\t\022\014\n\010turnover\020\n\022\016\n\ncur_volume\020\013\022\021\n\rt"
    "urnover_rate\020\014\022\023\n\017pre_close_price\020\r\022\016\n\no"
    "pen_price\020\016\022\007\n\003pes\020\017\022\r\n\tnp_volume\020\020\022\r\n\tw"
    "p_volume\020\021\022\t\n\005ratio\020\022\022\r\n\tcommittee\020\023\022\020\n\014"
    "buy_sell_buy\020\024\022\007\n\003pbv\020\025\022\r\n\ttot_stock\020\026\022\r"
    "\n\tcir_stock\020\027\022\r\n\ttot_value\020\030\022\r\n\tcir_valu"
    "e\020\031\022\014\n\010nwp_rate\020\032\022\006\n\002sa\020\033\022\016\n\nspeed_rate\020"
    "\034\022\016\n\nthree_rate\020\035\022\022\n\016three_tuv_rate\020\037\022\021\n"
    "\rfive_tuv_rate\020 \022\007\n\003ped\020!\022\r\n\tfive_rate\020\""
    "\022\021\n\rsecurity_name\020#\022\r\n\tyear_rate\020$\022\016\n\nbl"
    "ock_rate\020e\022\027\n\023block_up_down_ratio\020f\022\027\n\023b"
    "lock_turnover_rate\020g\022\022\n\016block_turnover\020h"
    "\022\023\n\017block_tot_value\020i\022\023\n\017block_cir_value"
    "\020j\022\023\n\017block_avg_stock\020k\022\020\n\014block_volume\020"
    "l\022\017\n\013block_upper\020m\022\016\n\nblock_down\020n\022\024\n\020bl"
    "ock_speed_rate\020o\022\024\n\020block_three_rate\020p\022\030"
    "\n\024block_three_tuv_rate\020r\022\027\n\023block_five_t"
    "uv_rate\020s\022\026\n\022block_rise_day_num\020t\022\023\n\017blo"
    "ck_five_rate\020u\022\024\n\020block_block_name\020v\022\023\n\017"
    "block_year_rate\020w\022\025\n\020money_last_price\020\311\001"
    "\022\017\n\nmoney_rate\020\312\001\022\031\n\024money_auction_volum"
    "e\020\313\001\022\027\n\022leader_money_input\020\314\001\022\030\n\023leader_"
    "money_output\020\315\001\022\030\n\023leader_money_netput\020\316"
    "\001\022\026\n\021leader_money_rate\020\317\001\022\027\n\022maxord_mone"
    "y_input\020\320\001\022\030\n\023maxord_money_output\020\321\001\022\030\n\023"
    "maxord_money_netput\020\322\001\022\026\n\021maxord_money_r"
    "ate\020\323\001\022\027\n\022bigord_money_input\020\324\001\022\030\n\023bigor"
    "d_money_output\020\325\001\022\030\n\023bigord_money_netput"
    "\020\326\001\022\026\n\021bigord_money_rate\020\327\001\022\027\n\022midord_mo"
    "ney_input\020\330\001\022\030\n\023midord_money_output\020\331\001\022\030"
    "\n\023midord_money_netput\020\332\001\022\026\n\021midord_money"
    "_rate\020\333\001\022\027\n\022minord_money_input\020\334\001\022\030\n\023min"
    "ord_money_output\020\335\001\022\030\n\023minord_money_netp"
    "ut\020\336\001\022\026\n\021minord_money_rate\020\337\001\022\036\n\031three_l"
    "eader_money_netput\020\340\001\022\035\n\030five_leader_mon"
    "ey_netput\020\341\001\022\025\n\020auction_turnover\020\342\001\022\030\n\023m"
    "oney_security_name\020\343\001\022\030\n\023money_up_down_p"
    "rice\020\344\001*\322\002\n\nFASortType\022\013\n\007fa_rate\020\001\022\022\n\016f"
    "a_thirty_rate\020\002\022\024\n\020fa_active_netput\020\003\022\033\n"
    "\027fa_thirty_active_netput\020\004\022\024\n\020fa_leader_"
    "netput\020\005\022\022\n\016fa_avtive_rate\020\006\022\022\n\016fa_leade"
    "r_rate\020\007\022\024\n\020fa_turnover_rate\020\010\022\014\n\010fa_rat"
    "io\020\t\022\020\n\014fa_cir_value\020\n\022\n\n\006fa_ped\020\013\022\032\n\026fa"
    "_three_avtive_netput\020\014\022\021\n\rfa_three_rate\020"
    "\r\022\031\n\025fa_five_avtive_netput\020\016\022\020\n\014fa_five_"
    "rate\020\017\022\024\n\020fa_security_name\020\020", 4708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stock_basinfo.proto", &protobuf_RegisterTypes);
  BatchGetStockRequest::default_instance_ = new BatchGetStockRequest();
  BatchGetStockResponse::default_instance_ = new BatchGetStockResponse();
  StockOptionalRequest::default_instance_ = new StockOptionalRequest();
  StockOptionalResponse::default_instance_ = new StockOptionalResponse();
  MoneyOptionalRequest::default_instance_ = new MoneyOptionalRequest();
  MoneyOptionalResponse::default_instance_ = new MoneyOptionalResponse();
  BatchGetMoneyRequest::default_instance_ = new BatchGetMoneyRequest();
  BatchGetMoneyResponse::default_instance_ = new BatchGetMoneyResponse();
  MoneyFieldLineRequest::default_instance_ = new MoneyFieldLineRequest();
  MoneyFieldLineResponse::default_instance_ = new MoneyFieldLineResponse();
  GetStockRiseFallInfoRequest::default_instance_ = new GetStockRiseFallInfoRequest();
  GetStockRiseFallInfoResponse::default_instance_ = new GetStockRiseFallInfoResponse();
  GetStocksOfBlockRequest::default_instance_ = new GetStocksOfBlockRequest();
  GetStocksOfBlockResponse::default_instance_ = new GetStocksOfBlockResponse();
  MoneyAbnormalOptionalRequest::default_instance_ = new MoneyAbnormalOptionalRequest();
  MoneyAbnormalOptionalResponse::default_instance_ = new MoneyAbnormalOptionalResponse();
  BatchGetMoneyAbnormalRequest::default_instance_ = new BatchGetMoneyAbnormalRequest();
  BatchGetMoneyAbnormalResponse::default_instance_ = new BatchGetMoneyAbnormalResponse();
  BlockMoneyAbnoramlRequest::default_instance_ = new BlockMoneyAbnoramlRequest();
  BlockMoneyAbnoramlResponse::default_instance_ = new BlockMoneyAbnoramlResponse();
  BlockMoneyAbnormalPCRequest::default_instance_ = new BlockMoneyAbnormalPCRequest();
  BlockMoneyAbnormalPCResponse::default_instance_ = new BlockMoneyAbnormalPCResponse();
  GetTimeRequest::default_instance_ = new GetTimeRequest();
  GetTimeResponse::default_instance_ = new GetTimeResponse();
  BatchGetStockRequest::default_instance_->InitAsDefaultInstance();
  BatchGetStockResponse::default_instance_->InitAsDefaultInstance();
  StockOptionalRequest::default_instance_->InitAsDefaultInstance();
  StockOptionalResponse::default_instance_->InitAsDefaultInstance();
  MoneyOptionalRequest::default_instance_->InitAsDefaultInstance();
  MoneyOptionalResponse::default_instance_->InitAsDefaultInstance();
  BatchGetMoneyRequest::default_instance_->InitAsDefaultInstance();
  BatchGetMoneyResponse::default_instance_->InitAsDefaultInstance();
  MoneyFieldLineRequest::default_instance_->InitAsDefaultInstance();
  MoneyFieldLineResponse::default_instance_->InitAsDefaultInstance();
  GetStockRiseFallInfoRequest::default_instance_->InitAsDefaultInstance();
  GetStockRiseFallInfoResponse::default_instance_->InitAsDefaultInstance();
  GetStocksOfBlockRequest::default_instance_->InitAsDefaultInstance();
  GetStocksOfBlockResponse::default_instance_->InitAsDefaultInstance();
  MoneyAbnormalOptionalRequest::default_instance_->InitAsDefaultInstance();
  MoneyAbnormalOptionalResponse::default_instance_->InitAsDefaultInstance();
  BatchGetMoneyAbnormalRequest::default_instance_->InitAsDefaultInstance();
  BatchGetMoneyAbnormalResponse::default_instance_->InitAsDefaultInstance();
  BlockMoneyAbnoramlRequest::default_instance_->InitAsDefaultInstance();
  BlockMoneyAbnoramlResponse::default_instance_->InitAsDefaultInstance();
  BlockMoneyAbnormalPCRequest::default_instance_->InitAsDefaultInstance();
  BlockMoneyAbnormalPCResponse::default_instance_->InitAsDefaultInstance();
  GetTimeRequest::default_instance_->InitAsDefaultInstance();
  GetTimeResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stock_5fbasinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stock_5fbasinfo_2eproto {
  StaticDescriptorInitializer_stock_5fbasinfo_2eproto() {
    protobuf_AddDesc_stock_5fbasinfo_2eproto();
  }
} static_descriptor_initializer_stock_5fbasinfo_2eproto_;

const ::google::protobuf::EnumDescriptor* SortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortType_descriptor_;
}
bool SortType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FASortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FASortType_descriptor_;
}
bool FASortType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetStockRequest::kFilterFieldNumber;
const int BatchGetStockRequest::kFilterDetailFieldNumber;
const int BatchGetStockRequest::kSortFieldFieldNumber;
const int BatchGetStockRequest::kIsDescFieldNumber;
const int BatchGetStockRequest::kIndexFieldNumber;
const int BatchGetStockRequest::kCountRangeFieldNumber;
const int BatchGetStockRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

BatchGetStockRequest::BatchGetStockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetStockRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

BatchGetStockRequest::BatchGetStockRequest(const BatchGetStockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetStockRequest::SharedCtor() {
  _cached_size_ = 0;
  filter_ = 0;
  filter_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sort_field_ = 1;
  is_desc_ = false;
  index_ = 0;
  count_range_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetStockRequest::~BatchGetStockRequest() {
  SharedDtor();
}

void BatchGetStockRequest::SharedDtor() {
  if (filter_detail_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_detail_;
  }
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void BatchGetStockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetStockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetStockRequest_descriptor_;
}

const BatchGetStockRequest& BatchGetStockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BatchGetStockRequest* BatchGetStockRequest::default_instance_ = NULL;

BatchGetStockRequest* BatchGetStockRequest::New() const {
  return new BatchGetStockRequest;
}

void BatchGetStockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filter_ = 0;
    if (has_filter_detail()) {
      if (filter_detail_ != &::google::protobuf::internal::kEmptyString) {
        filter_detail_->clear();
      }
    }
    sort_field_ = 1;
    is_desc_ = false;
    index_ = 0;
    count_range_ = 0;
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetStockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.QuoteFilterFlag filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::QuoteFilterFlag_IsValid(value)) {
            set_filter(static_cast< QuoteProto::QuoteFilterFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter_detail;
        break;
      }
      
      // required string filter_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter_detail().data(), this->filter_detail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sort_field;
        break;
      }
      
      // required .QuoteProto.SortType sort_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::SortType_IsValid(value)) {
            set_sort_field(static_cast< QuoteProto::SortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }
      
      // required int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetStockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.QuoteFilterFlag filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filter(), output);
  }
  
  // required string filter_detail = 2;
  if (has_filter_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter_detail().data(), this->filter_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filter_detail(), output);
  }
  
  // required .QuoteProto.SortType sort_field = 3;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sort_field(), output);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_desc(), output);
  }
  
  // required int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }
  
  // required int32 count_range = 6;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count_range(), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 7;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetStockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.QuoteFilterFlag filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filter(), target);
  }
  
  // required string filter_detail = 2;
  if (has_filter_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter_detail().data(), this->filter_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter_detail(), target);
  }
  
  // required .QuoteProto.SortType sort_field = 3;
  if (has_sort_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sort_field(), target);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_desc(), target);
  }
  
  // required int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }
  
  // required int32 count_range = 6;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count_range(), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 7;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetStockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.QuoteFilterFlag filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter());
    }
    
    // required string filter_detail = 2;
    if (has_filter_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter_detail());
    }
    
    // required .QuoteProto.SortType sort_field = 3;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_field());
    }
    
    // required bool is_desc = 4;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // required int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 6;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
    // optional .QuoteProto.MsgMask msg_mask = 7;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetStockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetStockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetStockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetStockRequest::MergeFrom(const BatchGetStockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_filter_detail()) {
      set_filter_detail(from.filter_detail());
    }
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetStockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetStockRequest::CopyFrom(const BatchGetStockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetStockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void BatchGetStockRequest::Swap(BatchGetStockRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(filter_detail_, other->filter_detail_);
    std::swap(sort_field_, other->sort_field_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetStockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetStockRequest_descriptor_;
  metadata.reflection = BatchGetStockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetStockResponse::kRetFieldNumber;
const int BatchGetStockResponse::kStkFieldNumber;
const int BatchGetStockResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

BatchGetStockResponse::BatchGetStockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetStockResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchGetStockResponse::BatchGetStockResponse(const BatchGetStockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetStockResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetStockResponse::~BatchGetStockResponse() {
  SharedDtor();
}

void BatchGetStockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchGetStockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetStockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetStockResponse_descriptor_;
}

const BatchGetStockResponse& BatchGetStockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BatchGetStockResponse* BatchGetStockResponse::default_instance_ = NULL;

BatchGetStockResponse* BatchGetStockResponse::New() const {
  return new BatchGetStockResponse;
}

void BatchGetStockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetStockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.StockMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetStockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetStockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetStockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.StockMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetStockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetStockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetStockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetStockResponse::MergeFrom(const BatchGetStockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetStockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetStockResponse::CopyFrom(const BatchGetStockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetStockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < stk_size(); i++) {
    if (!this->stk(i).IsInitialized()) return false;
  }
  return true;
}

void BatchGetStockResponse::Swap(BatchGetStockResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetStockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetStockResponse_descriptor_;
  metadata.reflection = BatchGetStockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockOptionalRequest::kKlineTypeFieldNumber;
const int StockOptionalRequest::kStockCodeFieldNumber;
const int StockOptionalRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

StockOptionalRequest::StockOptionalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockOptionalRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

StockOptionalRequest::StockOptionalRequest(const StockOptionalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockOptionalRequest::SharedCtor() {
  _cached_size_ = 0;
  kline_type_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockOptionalRequest::~StockOptionalRequest() {
  SharedDtor();
}

void StockOptionalRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void StockOptionalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockOptionalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockOptionalRequest_descriptor_;
}

const StockOptionalRequest& StockOptionalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

StockOptionalRequest* StockOptionalRequest::default_instance_ = NULL;

StockOptionalRequest* StockOptionalRequest::New() const {
  return new StockOptionalRequest;
}

void StockOptionalRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kline_type_ = 0;
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  stock_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockOptionalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kline_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kline_type_)));
          set_has_kline_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        break;
      }
      
      // repeated string stock_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code(0).data(), this->stock_code(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        if (input->ExpectTag(26)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockOptionalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 kline_type = 1;
  if (has_kline_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kline_type(), output);
  }
  
  // repeated string stock_code = 2;
  for (int i = 0; i < this->stock_code_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stock_code(i).data(), this->stock_code(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_code(i), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 3;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockOptionalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 kline_type = 1;
  if (has_kline_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kline_type(), target);
  }
  
  // repeated string stock_code = 2;
  for (int i = 0; i < this->stock_code_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code(i).data(), this->stock_code(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->stock_code(i), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 3;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockOptionalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kline_type = 1;
    if (has_kline_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kline_type());
    }
    
    // optional .QuoteProto.MsgMask msg_mask = 3;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  // repeated string stock_code = 2;
  total_size += 1 * this->stock_code_size();
  for (int i = 0; i < this->stock_code_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stock_code(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockOptionalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockOptionalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockOptionalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockOptionalRequest::MergeFrom(const StockOptionalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_code_.MergeFrom(from.stock_code_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kline_type()) {
      set_kline_type(from.kline_type());
    }
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockOptionalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOptionalRequest::CopyFrom(const StockOptionalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOptionalRequest::IsInitialized() const {
  
  return true;
}

void StockOptionalRequest::Swap(StockOptionalRequest* other) {
  if (other != this) {
    std::swap(kline_type_, other->kline_type_);
    stock_code_.Swap(&other->stock_code_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockOptionalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockOptionalRequest_descriptor_;
  metadata.reflection = StockOptionalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockOptionalResponse::kRetFieldNumber;
const int StockOptionalResponse::kStkFieldNumber;
const int StockOptionalResponse::kKlineInfoFieldNumber;
#endif  // !_MSC_VER

StockOptionalResponse::StockOptionalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockOptionalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

StockOptionalResponse::StockOptionalResponse(const StockOptionalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockOptionalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockOptionalResponse::~StockOptionalResponse() {
  SharedDtor();
}

void StockOptionalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void StockOptionalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockOptionalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockOptionalResponse_descriptor_;
}

const StockOptionalResponse& StockOptionalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

StockOptionalResponse* StockOptionalResponse::default_instance_ = NULL;

StockOptionalResponse* StockOptionalResponse::New() const {
  return new StockOptionalResponse;
}

void StockOptionalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  stk_.Clear();
  kline_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockOptionalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.StockMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(26)) goto parse_kline_info;
        break;
      }
      
      // repeated .QuoteProto.PeriodKLine kline_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kline_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kline_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kline_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockOptionalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // repeated .QuoteProto.PeriodKLine kline_info = 3;
  for (int i = 0; i < this->kline_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kline_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockOptionalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // repeated .QuoteProto.PeriodKLine kline_info = 3;
  for (int i = 0; i < this->kline_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kline_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockOptionalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.StockMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  // repeated .QuoteProto.PeriodKLine kline_info = 3;
  total_size += 1 * this->kline_info_size();
  for (int i = 0; i < this->kline_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kline_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockOptionalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockOptionalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockOptionalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockOptionalResponse::MergeFrom(const StockOptionalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  kline_info_.MergeFrom(from.kline_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockOptionalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockOptionalResponse::CopyFrom(const StockOptionalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockOptionalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < stk_size(); i++) {
    if (!this->stk(i).IsInitialized()) return false;
  }
  for (int i = 0; i < kline_info_size(); i++) {
    if (!this->kline_info(i).IsInitialized()) return false;
  }
  return true;
}

void StockOptionalResponse::Swap(StockOptionalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    kline_info_.Swap(&other->kline_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockOptionalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockOptionalResponse_descriptor_;
  metadata.reflection = StockOptionalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyOptionalRequest::kStockCodeFieldNumber;
const int MoneyOptionalRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

MoneyOptionalRequest::MoneyOptionalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyOptionalRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

MoneyOptionalRequest::MoneyOptionalRequest(const MoneyOptionalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyOptionalRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyOptionalRequest::~MoneyOptionalRequest() {
  SharedDtor();
}

void MoneyOptionalRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void MoneyOptionalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyOptionalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyOptionalRequest_descriptor_;
}

const MoneyOptionalRequest& MoneyOptionalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

MoneyOptionalRequest* MoneyOptionalRequest::default_instance_ = NULL;

MoneyOptionalRequest* MoneyOptionalRequest::New() const {
  return new MoneyOptionalRequest;
}

void MoneyOptionalRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  stock_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyOptionalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code(0).data(), this->stock_code(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stock_code;
        if (input->ExpectTag(26)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyOptionalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stock_code(i).data(), this->stock_code(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(i), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 3;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyOptionalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code(i).data(), this->stock_code(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stock_code(i), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 3;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyOptionalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .QuoteProto.MsgMask msg_mask = 3;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  // repeated string stock_code = 1;
  total_size += 1 * this->stock_code_size();
  for (int i = 0; i < this->stock_code_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stock_code(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyOptionalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyOptionalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyOptionalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyOptionalRequest::MergeFrom(const MoneyOptionalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_code_.MergeFrom(from.stock_code_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyOptionalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyOptionalRequest::CopyFrom(const MoneyOptionalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyOptionalRequest::IsInitialized() const {
  
  return true;
}

void MoneyOptionalRequest::Swap(MoneyOptionalRequest* other) {
  if (other != this) {
    stock_code_.Swap(&other->stock_code_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyOptionalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyOptionalRequest_descriptor_;
  metadata.reflection = MoneyOptionalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyOptionalResponse::kRetFieldNumber;
const int MoneyOptionalResponse::kStkFieldNumber;
#endif  // !_MSC_VER

MoneyOptionalResponse::MoneyOptionalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyOptionalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

MoneyOptionalResponse::MoneyOptionalResponse(const MoneyOptionalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyOptionalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyOptionalResponse::~MoneyOptionalResponse() {
  SharedDtor();
}

void MoneyOptionalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void MoneyOptionalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyOptionalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyOptionalResponse_descriptor_;
}

const MoneyOptionalResponse& MoneyOptionalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

MoneyOptionalResponse* MoneyOptionalResponse::default_instance_ = NULL;

MoneyOptionalResponse* MoneyOptionalResponse::New() const {
  return new MoneyOptionalResponse;
}

void MoneyOptionalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyOptionalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.MoneyMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyOptionalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.MoneyMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyOptionalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.MoneyMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyOptionalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.MoneyMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyOptionalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyOptionalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyOptionalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyOptionalResponse::MergeFrom(const MoneyOptionalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyOptionalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyOptionalResponse::CopyFrom(const MoneyOptionalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyOptionalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void MoneyOptionalResponse::Swap(MoneyOptionalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyOptionalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyOptionalResponse_descriptor_;
  metadata.reflection = MoneyOptionalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetMoneyRequest::kFilterFieldNumber;
const int BatchGetMoneyRequest::kFilterDetailFieldNumber;
const int BatchGetMoneyRequest::kSortFieldFieldNumber;
const int BatchGetMoneyRequest::kIsDescFieldNumber;
const int BatchGetMoneyRequest::kIndexFieldNumber;
const int BatchGetMoneyRequest::kCountRangeFieldNumber;
const int BatchGetMoneyRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

BatchGetMoneyRequest::BatchGetMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetMoneyRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

BatchGetMoneyRequest::BatchGetMoneyRequest(const BatchGetMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  filter_ = 0;
  filter_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sort_field_ = 1;
  is_desc_ = false;
  index_ = 0;
  count_range_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetMoneyRequest::~BatchGetMoneyRequest() {
  SharedDtor();
}

void BatchGetMoneyRequest::SharedDtor() {
  if (filter_detail_ != &::google::protobuf::internal::kEmptyString) {
    delete filter_detail_;
  }
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void BatchGetMoneyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetMoneyRequest_descriptor_;
}

const BatchGetMoneyRequest& BatchGetMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BatchGetMoneyRequest* BatchGetMoneyRequest::default_instance_ = NULL;

BatchGetMoneyRequest* BatchGetMoneyRequest::New() const {
  return new BatchGetMoneyRequest;
}

void BatchGetMoneyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filter_ = 0;
    if (has_filter_detail()) {
      if (filter_detail_ != &::google::protobuf::internal::kEmptyString) {
        filter_detail_->clear();
      }
    }
    sort_field_ = 1;
    is_desc_ = false;
    index_ = 0;
    count_range_ = 0;
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.QuoteFilterFlag filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::QuoteFilterFlag_IsValid(value)) {
            set_filter(static_cast< QuoteProto::QuoteFilterFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_filter_detail;
        break;
      }
      
      // required string filter_detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filter_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filter_detail().data(), this->filter_detail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sort_field;
        break;
      }
      
      // required .QuoteProto.SortType sort_field = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::SortType_IsValid(value)) {
            set_sort_field(static_cast< QuoteProto::SortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }
      
      // required int32 index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.QuoteFilterFlag filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filter(), output);
  }
  
  // required string filter_detail = 2;
  if (has_filter_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter_detail().data(), this->filter_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->filter_detail(), output);
  }
  
  // required .QuoteProto.SortType sort_field = 3;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sort_field(), output);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_desc(), output);
  }
  
  // required int32 index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->index(), output);
  }
  
  // required int32 count_range = 6;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count_range(), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 7;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.QuoteFilterFlag filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filter(), target);
  }
  
  // required string filter_detail = 2;
  if (has_filter_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filter_detail().data(), this->filter_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filter_detail(), target);
  }
  
  // required .QuoteProto.SortType sort_field = 3;
  if (has_sort_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->sort_field(), target);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_desc(), target);
  }
  
  // required int32 index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->index(), target);
  }
  
  // required int32 count_range = 6;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count_range(), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 7;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetMoneyRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.QuoteFilterFlag filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter());
    }
    
    // required string filter_detail = 2;
    if (has_filter_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filter_detail());
    }
    
    // required .QuoteProto.SortType sort_field = 3;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_field());
    }
    
    // required bool is_desc = 4;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // required int32 index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 6;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
    // optional .QuoteProto.MsgMask msg_mask = 7;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetMoneyRequest::MergeFrom(const BatchGetMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      set_filter(from.filter());
    }
    if (from.has_filter_detail()) {
      set_filter_detail(from.filter_detail());
    }
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetMoneyRequest::CopyFrom(const BatchGetMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetMoneyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void BatchGetMoneyRequest::Swap(BatchGetMoneyRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(filter_detail_, other->filter_detail_);
    std::swap(sort_field_, other->sort_field_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetMoneyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetMoneyRequest_descriptor_;
  metadata.reflection = BatchGetMoneyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetMoneyResponse::kRetFieldNumber;
const int BatchGetMoneyResponse::kStkFieldNumber;
const int BatchGetMoneyResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

BatchGetMoneyResponse::BatchGetMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetMoneyResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchGetMoneyResponse::BatchGetMoneyResponse(const BatchGetMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetMoneyResponse::~BatchGetMoneyResponse() {
  SharedDtor();
}

void BatchGetMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchGetMoneyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetMoneyResponse_descriptor_;
}

const BatchGetMoneyResponse& BatchGetMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BatchGetMoneyResponse* BatchGetMoneyResponse::default_instance_ = NULL;

BatchGetMoneyResponse* BatchGetMoneyResponse::New() const {
  return new BatchGetMoneyResponse;
}

void BatchGetMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.MoneyMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.MoneyMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.MoneyMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetMoneyResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.MoneyMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetMoneyResponse::MergeFrom(const BatchGetMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetMoneyResponse::CopyFrom(const BatchGetMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetMoneyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BatchGetMoneyResponse::Swap(BatchGetMoneyResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetMoneyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetMoneyResponse_descriptor_;
  metadata.reflection = BatchGetMoneyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyFieldLineRequest::kStockCodeFieldNumber;
#endif  // !_MSC_VER

MoneyFieldLineRequest::MoneyFieldLineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyFieldLineRequest::InitAsDefaultInstance() {
}

MoneyFieldLineRequest::MoneyFieldLineRequest(const MoneyFieldLineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyFieldLineRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyFieldLineRequest::~MoneyFieldLineRequest() {
  SharedDtor();
}

void MoneyFieldLineRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void MoneyFieldLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyFieldLineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyFieldLineRequest_descriptor_;
}

const MoneyFieldLineRequest& MoneyFieldLineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

MoneyFieldLineRequest* MoneyFieldLineRequest::default_instance_ = NULL;

MoneyFieldLineRequest* MoneyFieldLineRequest::New() const {
  return new MoneyFieldLineRequest;
}

void MoneyFieldLineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyFieldLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyFieldLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyFieldLineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyFieldLineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyFieldLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyFieldLineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyFieldLineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyFieldLineRequest::MergeFrom(const MoneyFieldLineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyFieldLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyFieldLineRequest::CopyFrom(const MoneyFieldLineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyFieldLineRequest::IsInitialized() const {
  
  return true;
}

void MoneyFieldLineRequest::Swap(MoneyFieldLineRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyFieldLineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyFieldLineRequest_descriptor_;
  metadata.reflection = MoneyFieldLineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyFieldLineResponse::kRetFieldNumber;
const int MoneyFieldLineResponse::kStkFieldNumber;
#endif  // !_MSC_VER

MoneyFieldLineResponse::MoneyFieldLineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyFieldLineResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

MoneyFieldLineResponse::MoneyFieldLineResponse(const MoneyFieldLineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyFieldLineResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyFieldLineResponse::~MoneyFieldLineResponse() {
  SharedDtor();
}

void MoneyFieldLineResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void MoneyFieldLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyFieldLineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyFieldLineResponse_descriptor_;
}

const MoneyFieldLineResponse& MoneyFieldLineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

MoneyFieldLineResponse* MoneyFieldLineResponse::default_instance_ = NULL;

MoneyFieldLineResponse* MoneyFieldLineResponse::New() const {
  return new MoneyFieldLineResponse;
}

void MoneyFieldLineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyFieldLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.MoneyFeild stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyFieldLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.MoneyFeild stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyFieldLineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.MoneyFeild stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyFieldLineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.MoneyFeild stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyFieldLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyFieldLineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyFieldLineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyFieldLineResponse::MergeFrom(const MoneyFieldLineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyFieldLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyFieldLineResponse::CopyFrom(const MoneyFieldLineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyFieldLineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void MoneyFieldLineResponse::Swap(MoneyFieldLineResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyFieldLineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyFieldLineResponse_descriptor_;
  metadata.reflection = MoneyFieldLineResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStockRiseFallInfoRequest::kStockCodeFieldNumber;
#endif  // !_MSC_VER

GetStockRiseFallInfoRequest::GetStockRiseFallInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStockRiseFallInfoRequest::InitAsDefaultInstance() {
}

GetStockRiseFallInfoRequest::GetStockRiseFallInfoRequest(const GetStockRiseFallInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStockRiseFallInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStockRiseFallInfoRequest::~GetStockRiseFallInfoRequest() {
  SharedDtor();
}

void GetStockRiseFallInfoRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void GetStockRiseFallInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStockRiseFallInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStockRiseFallInfoRequest_descriptor_;
}

const GetStockRiseFallInfoRequest& GetStockRiseFallInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

GetStockRiseFallInfoRequest* GetStockRiseFallInfoRequest::default_instance_ = NULL;

GetStockRiseFallInfoRequest* GetStockRiseFallInfoRequest::New() const {
  return new GetStockRiseFallInfoRequest;
}

void GetStockRiseFallInfoRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStockRiseFallInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStockRiseFallInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStockRiseFallInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStockRiseFallInfoRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStockRiseFallInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStockRiseFallInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStockRiseFallInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStockRiseFallInfoRequest::MergeFrom(const GetStockRiseFallInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStockRiseFallInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStockRiseFallInfoRequest::CopyFrom(const GetStockRiseFallInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStockRiseFallInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetStockRiseFallInfoRequest::Swap(GetStockRiseFallInfoRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStockRiseFallInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStockRiseFallInfoRequest_descriptor_;
  metadata.reflection = GetStockRiseFallInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStockRiseFallInfoResponse::kRetFieldNumber;
const int GetStockRiseFallInfoResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

GetStockRiseFallInfoResponse::GetStockRiseFallInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStockRiseFallInfoResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
  info_ = const_cast< ::QuoteProto::StockRiseFallInfo*>(&::QuoteProto::StockRiseFallInfo::default_instance());
}

GetStockRiseFallInfoResponse::GetStockRiseFallInfoResponse(const GetStockRiseFallInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStockRiseFallInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStockRiseFallInfoResponse::~GetStockRiseFallInfoResponse() {
  SharedDtor();
}

void GetStockRiseFallInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
    delete info_;
  }
}

void GetStockRiseFallInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStockRiseFallInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStockRiseFallInfoResponse_descriptor_;
}

const GetStockRiseFallInfoResponse& GetStockRiseFallInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

GetStockRiseFallInfoResponse* GetStockRiseFallInfoResponse::default_instance_ = NULL;

GetStockRiseFallInfoResponse* GetStockRiseFallInfoResponse::New() const {
  return new GetStockRiseFallInfoResponse;
}

void GetStockRiseFallInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::QuoteProto::StockRiseFallInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStockRiseFallInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }
      
      // optional .QuoteProto.StockRiseFallInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStockRiseFallInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional .QuoteProto.StockRiseFallInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStockRiseFallInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional .QuoteProto.StockRiseFallInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStockRiseFallInfoResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional .QuoteProto.StockRiseFallInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStockRiseFallInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStockRiseFallInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStockRiseFallInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStockRiseFallInfoResponse::MergeFrom(const GetStockRiseFallInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::QuoteProto::StockRiseFallInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStockRiseFallInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStockRiseFallInfoResponse::CopyFrom(const GetStockRiseFallInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStockRiseFallInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void GetStockRiseFallInfoResponse::Swap(GetStockRiseFallInfoResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStockRiseFallInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStockRiseFallInfoResponse_descriptor_;
  metadata.reflection = GetStockRiseFallInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStocksOfBlockRequest::kStockCodeFieldNumber;
const int GetStocksOfBlockRequest::kIndexFieldNumber;
const int GetStocksOfBlockRequest::kCountRangeFieldNumber;
const int GetStocksOfBlockRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

GetStocksOfBlockRequest::GetStocksOfBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStocksOfBlockRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

GetStocksOfBlockRequest::GetStocksOfBlockRequest(const GetStocksOfBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStocksOfBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  count_range_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStocksOfBlockRequest::~GetStocksOfBlockRequest() {
  SharedDtor();
}

void GetStocksOfBlockRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void GetStocksOfBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStocksOfBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStocksOfBlockRequest_descriptor_;
}

const GetStocksOfBlockRequest& GetStocksOfBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

GetStocksOfBlockRequest* GetStocksOfBlockRequest::default_instance_ = NULL;

GetStocksOfBlockRequest* GetStocksOfBlockRequest::New() const {
  return new GetStocksOfBlockRequest;
}

void GetStocksOfBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    index_ = 0;
    count_range_ = 0;
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStocksOfBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStocksOfBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }
  
  // required int32 count_range = 3;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_range(), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 5;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStocksOfBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }
  
  // required int32 count_range = 3;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_range(), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 5;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStocksOfBlockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 3;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
    // optional .QuoteProto.MsgMask msg_mask = 5;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStocksOfBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStocksOfBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStocksOfBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStocksOfBlockRequest::MergeFrom(const GetStocksOfBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStocksOfBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStocksOfBlockRequest::CopyFrom(const GetStocksOfBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStocksOfBlockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void GetStocksOfBlockRequest::Swap(GetStocksOfBlockRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStocksOfBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStocksOfBlockRequest_descriptor_;
  metadata.reflection = GetStocksOfBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetStocksOfBlockResponse::kRetFieldNumber;
const int GetStocksOfBlockResponse::kStkFieldNumber;
const int GetStocksOfBlockResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

GetStocksOfBlockResponse::GetStocksOfBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetStocksOfBlockResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetStocksOfBlockResponse::GetStocksOfBlockResponse(const GetStocksOfBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetStocksOfBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetStocksOfBlockResponse::~GetStocksOfBlockResponse() {
  SharedDtor();
}

void GetStocksOfBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetStocksOfBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetStocksOfBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetStocksOfBlockResponse_descriptor_;
}

const GetStocksOfBlockResponse& GetStocksOfBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

GetStocksOfBlockResponse* GetStocksOfBlockResponse::default_instance_ = NULL;

GetStocksOfBlockResponse* GetStocksOfBlockResponse::New() const {
  return new GetStocksOfBlockResponse;
}

void GetStocksOfBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetStocksOfBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.StockMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetStocksOfBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetStocksOfBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetStocksOfBlockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.StockMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetStocksOfBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetStocksOfBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetStocksOfBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetStocksOfBlockResponse::MergeFrom(const GetStocksOfBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetStocksOfBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStocksOfBlockResponse::CopyFrom(const GetStocksOfBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStocksOfBlockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < stk_size(); i++) {
    if (!this->stk(i).IsInitialized()) return false;
  }
  return true;
}

void GetStocksOfBlockResponse::Swap(GetStocksOfBlockResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetStocksOfBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetStocksOfBlockResponse_descriptor_;
  metadata.reflection = GetStocksOfBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyAbnormalOptionalRequest::kStockCodeFieldNumber;
const int MoneyAbnormalOptionalRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

MoneyAbnormalOptionalRequest::MoneyAbnormalOptionalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyAbnormalOptionalRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

MoneyAbnormalOptionalRequest::MoneyAbnormalOptionalRequest(const MoneyAbnormalOptionalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyAbnormalOptionalRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyAbnormalOptionalRequest::~MoneyAbnormalOptionalRequest() {
  SharedDtor();
}

void MoneyAbnormalOptionalRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void MoneyAbnormalOptionalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyAbnormalOptionalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyAbnormalOptionalRequest_descriptor_;
}

const MoneyAbnormalOptionalRequest& MoneyAbnormalOptionalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

MoneyAbnormalOptionalRequest* MoneyAbnormalOptionalRequest::default_instance_ = NULL;

MoneyAbnormalOptionalRequest* MoneyAbnormalOptionalRequest::New() const {
  return new MoneyAbnormalOptionalRequest;
}

void MoneyAbnormalOptionalRequest::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  stock_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyAbnormalOptionalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code(0).data(), this->stock_code(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stock_code;
        if (input->ExpectTag(18)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyAbnormalOptionalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stock_code(i).data(), this->stock_code(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(i), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 2;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyAbnormalOptionalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code(i).data(), this->stock_code(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stock_code(i), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 2;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyAbnormalOptionalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .QuoteProto.MsgMask msg_mask = 2;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  // repeated string stock_code = 1;
  total_size += 1 * this->stock_code_size();
  for (int i = 0; i < this->stock_code_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stock_code(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyAbnormalOptionalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyAbnormalOptionalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyAbnormalOptionalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyAbnormalOptionalRequest::MergeFrom(const MoneyAbnormalOptionalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_code_.MergeFrom(from.stock_code_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyAbnormalOptionalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyAbnormalOptionalRequest::CopyFrom(const MoneyAbnormalOptionalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyAbnormalOptionalRequest::IsInitialized() const {
  
  return true;
}

void MoneyAbnormalOptionalRequest::Swap(MoneyAbnormalOptionalRequest* other) {
  if (other != this) {
    stock_code_.Swap(&other->stock_code_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyAbnormalOptionalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyAbnormalOptionalRequest_descriptor_;
  metadata.reflection = MoneyAbnormalOptionalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyAbnormalOptionalResponse::kRetFieldNumber;
const int MoneyAbnormalOptionalResponse::kStkFieldNumber;
#endif  // !_MSC_VER

MoneyAbnormalOptionalResponse::MoneyAbnormalOptionalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyAbnormalOptionalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

MoneyAbnormalOptionalResponse::MoneyAbnormalOptionalResponse(const MoneyAbnormalOptionalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyAbnormalOptionalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyAbnormalOptionalResponse::~MoneyAbnormalOptionalResponse() {
  SharedDtor();
}

void MoneyAbnormalOptionalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void MoneyAbnormalOptionalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyAbnormalOptionalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyAbnormalOptionalResponse_descriptor_;
}

const MoneyAbnormalOptionalResponse& MoneyAbnormalOptionalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

MoneyAbnormalOptionalResponse* MoneyAbnormalOptionalResponse::default_instance_ = NULL;

MoneyAbnormalOptionalResponse* MoneyAbnormalOptionalResponse::New() const {
  return new MoneyAbnormalOptionalResponse;
}

void MoneyAbnormalOptionalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyAbnormalOptionalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.FundAbnormalMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyAbnormalOptionalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.FundAbnormalMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyAbnormalOptionalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.FundAbnormalMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyAbnormalOptionalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.FundAbnormalMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyAbnormalOptionalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyAbnormalOptionalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyAbnormalOptionalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyAbnormalOptionalResponse::MergeFrom(const MoneyAbnormalOptionalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyAbnormalOptionalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyAbnormalOptionalResponse::CopyFrom(const MoneyAbnormalOptionalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyAbnormalOptionalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void MoneyAbnormalOptionalResponse::Swap(MoneyAbnormalOptionalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyAbnormalOptionalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyAbnormalOptionalResponse_descriptor_;
  metadata.reflection = MoneyAbnormalOptionalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetMoneyAbnormalRequest::kTypeFieldNumber;
const int BatchGetMoneyAbnormalRequest::kSortFieldFieldNumber;
const int BatchGetMoneyAbnormalRequest::kIsDescFieldNumber;
const int BatchGetMoneyAbnormalRequest::kIndexFieldNumber;
const int BatchGetMoneyAbnormalRequest::kCountRangeFieldNumber;
const int BatchGetMoneyAbnormalRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

BatchGetMoneyAbnormalRequest::BatchGetMoneyAbnormalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetMoneyAbnormalRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

BatchGetMoneyAbnormalRequest::BatchGetMoneyAbnormalRequest(const BatchGetMoneyAbnormalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetMoneyAbnormalRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  sort_field_ = 1;
  is_desc_ = false;
  index_ = 0;
  count_range_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetMoneyAbnormalRequest::~BatchGetMoneyAbnormalRequest() {
  SharedDtor();
}

void BatchGetMoneyAbnormalRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void BatchGetMoneyAbnormalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetMoneyAbnormalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetMoneyAbnormalRequest_descriptor_;
}

const BatchGetMoneyAbnormalRequest& BatchGetMoneyAbnormalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BatchGetMoneyAbnormalRequest* BatchGetMoneyAbnormalRequest::default_instance_ = NULL;

BatchGetMoneyAbnormalRequest* BatchGetMoneyAbnormalRequest::New() const {
  return new BatchGetMoneyAbnormalRequest;
}

void BatchGetMoneyAbnormalRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    sort_field_ = 1;
    is_desc_ = false;
    index_ = 0;
    count_range_ = 0;
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetMoneyAbnormalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.FundAbnormalType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::FundAbnormalType_IsValid(value)) {
            set_type(static_cast< QuoteProto::FundAbnormalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sort_field;
        break;
      }
      
      // required .QuoteProto.FASortType sort_field = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_field:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::FASortType_IsValid(value)) {
            set_sort_field(static_cast< QuoteProto::FASortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }
      
      // required int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetMoneyAbnormalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.FundAbnormalType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required .QuoteProto.FASortType sort_field = 2;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sort_field(), output);
  }
  
  // required bool is_desc = 3;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_desc(), output);
  }
  
  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }
  
  // required int32 count_range = 5;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count_range(), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 6;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetMoneyAbnormalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.FundAbnormalType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required .QuoteProto.FASortType sort_field = 2;
  if (has_sort_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sort_field(), target);
  }
  
  // required bool is_desc = 3;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_desc(), target);
  }
  
  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }
  
  // required int32 count_range = 5;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count_range(), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 6;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetMoneyAbnormalRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.FundAbnormalType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required .QuoteProto.FASortType sort_field = 2;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_field());
    }
    
    // required bool is_desc = 3;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 5;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
    // optional .QuoteProto.MsgMask msg_mask = 6;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetMoneyAbnormalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetMoneyAbnormalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetMoneyAbnormalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetMoneyAbnormalRequest::MergeFrom(const BatchGetMoneyAbnormalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetMoneyAbnormalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetMoneyAbnormalRequest::CopyFrom(const BatchGetMoneyAbnormalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetMoneyAbnormalRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void BatchGetMoneyAbnormalRequest::Swap(BatchGetMoneyAbnormalRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(sort_field_, other->sort_field_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetMoneyAbnormalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetMoneyAbnormalRequest_descriptor_;
  metadata.reflection = BatchGetMoneyAbnormalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetMoneyAbnormalResponse::kRetFieldNumber;
const int BatchGetMoneyAbnormalResponse::kStkFieldNumber;
const int BatchGetMoneyAbnormalResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

BatchGetMoneyAbnormalResponse::BatchGetMoneyAbnormalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetMoneyAbnormalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchGetMoneyAbnormalResponse::BatchGetMoneyAbnormalResponse(const BatchGetMoneyAbnormalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetMoneyAbnormalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetMoneyAbnormalResponse::~BatchGetMoneyAbnormalResponse() {
  SharedDtor();
}

void BatchGetMoneyAbnormalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchGetMoneyAbnormalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetMoneyAbnormalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetMoneyAbnormalResponse_descriptor_;
}

const BatchGetMoneyAbnormalResponse& BatchGetMoneyAbnormalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BatchGetMoneyAbnormalResponse* BatchGetMoneyAbnormalResponse::default_instance_ = NULL;

BatchGetMoneyAbnormalResponse* BatchGetMoneyAbnormalResponse::New() const {
  return new BatchGetMoneyAbnormalResponse;
}

void BatchGetMoneyAbnormalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetMoneyAbnormalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.FundAbnormalMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetMoneyAbnormalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.FundAbnormalMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetMoneyAbnormalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.FundAbnormalMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetMoneyAbnormalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.FundAbnormalMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetMoneyAbnormalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetMoneyAbnormalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetMoneyAbnormalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetMoneyAbnormalResponse::MergeFrom(const BatchGetMoneyAbnormalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetMoneyAbnormalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetMoneyAbnormalResponse::CopyFrom(const BatchGetMoneyAbnormalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetMoneyAbnormalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BatchGetMoneyAbnormalResponse::Swap(BatchGetMoneyAbnormalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetMoneyAbnormalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetMoneyAbnormalResponse_descriptor_;
  metadata.reflection = BatchGetMoneyAbnormalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMoneyAbnoramlRequest::kBlockCodeFieldNumber;
const int BlockMoneyAbnoramlRequest::kUpdateTimeFieldNumber;
const int BlockMoneyAbnoramlRequest::kCountRangeFieldNumber;
const int BlockMoneyAbnoramlRequest::kIsDescFieldNumber;
#endif  // !_MSC_VER

BlockMoneyAbnoramlRequest::BlockMoneyAbnoramlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMoneyAbnoramlRequest::InitAsDefaultInstance() {
}

BlockMoneyAbnoramlRequest::BlockMoneyAbnoramlRequest(const BlockMoneyAbnoramlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMoneyAbnoramlRequest::SharedCtor() {
  _cached_size_ = 0;
  block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_ = 0u;
  count_range_ = 0;
  is_desc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMoneyAbnoramlRequest::~BlockMoneyAbnoramlRequest() {
  SharedDtor();
}

void BlockMoneyAbnoramlRequest::SharedDtor() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    delete block_code_;
  }
  if (this != default_instance_) {
  }
}

void BlockMoneyAbnoramlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMoneyAbnoramlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMoneyAbnoramlRequest_descriptor_;
}

const BlockMoneyAbnoramlRequest& BlockMoneyAbnoramlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BlockMoneyAbnoramlRequest* BlockMoneyAbnoramlRequest::default_instance_ = NULL;

BlockMoneyAbnoramlRequest* BlockMoneyAbnoramlRequest::New() const {
  return new BlockMoneyAbnoramlRequest;
}

void BlockMoneyAbnoramlRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_code()) {
      if (block_code_ != &::google::protobuf::internal::kEmptyString) {
        block_code_->clear();
      }
    }
    update_time_ = 0u;
    count_range_ = 0;
    is_desc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMoneyAbnoramlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string block_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_code().data(), this->block_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }
      
      // required uint32 update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMoneyAbnoramlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_code(), output);
  }
  
  // required uint32 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_time(), output);
  }
  
  // required int32 count_range = 3;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count_range(), output);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMoneyAbnoramlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_code(), target);
  }
  
  // required uint32 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_time(), target);
  }
  
  // required int32 count_range = 3;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count_range(), target);
  }
  
  // required bool is_desc = 4;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMoneyAbnoramlRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string block_code = 1;
    if (has_block_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_code());
    }
    
    // required uint32 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
    // required int32 count_range = 3;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
    // required bool is_desc = 4;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMoneyAbnoramlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMoneyAbnoramlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMoneyAbnoramlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMoneyAbnoramlRequest::MergeFrom(const BlockMoneyAbnoramlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_code()) {
      set_block_code(from.block_code());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMoneyAbnoramlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMoneyAbnoramlRequest::CopyFrom(const BlockMoneyAbnoramlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMoneyAbnoramlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void BlockMoneyAbnoramlRequest::Swap(BlockMoneyAbnoramlRequest* other) {
  if (other != this) {
    std::swap(block_code_, other->block_code_);
    std::swap(update_time_, other->update_time_);
    std::swap(count_range_, other->count_range_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMoneyAbnoramlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMoneyAbnoramlRequest_descriptor_;
  metadata.reflection = BlockMoneyAbnoramlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMoneyAbnoramlResponse::kRetFieldNumber;
const int BlockMoneyAbnoramlResponse::kBlocksFieldNumber;
const int BlockMoneyAbnoramlResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

BlockMoneyAbnoramlResponse::BlockMoneyAbnoramlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMoneyAbnoramlResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BlockMoneyAbnoramlResponse::BlockMoneyAbnoramlResponse(const BlockMoneyAbnoramlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMoneyAbnoramlResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMoneyAbnoramlResponse::~BlockMoneyAbnoramlResponse() {
  SharedDtor();
}

void BlockMoneyAbnoramlResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BlockMoneyAbnoramlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMoneyAbnoramlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMoneyAbnoramlResponse_descriptor_;
}

const BlockMoneyAbnoramlResponse& BlockMoneyAbnoramlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BlockMoneyAbnoramlResponse* BlockMoneyAbnoramlResponse::default_instance_ = NULL;

BlockMoneyAbnoramlResponse* BlockMoneyAbnoramlResponse::New() const {
  return new BlockMoneyAbnoramlResponse;
}

void BlockMoneyAbnoramlResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMoneyAbnoramlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        break;
      }
      
      // repeated .QuoteProto.BlockFundAbnormalItem blocks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMoneyAbnoramlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.BlockFundAbnormalItem blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocks(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMoneyAbnoramlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.BlockFundAbnormalItem blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blocks(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMoneyAbnoramlResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.BlockFundAbnormalItem blocks = 2;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMoneyAbnoramlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMoneyAbnoramlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMoneyAbnoramlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMoneyAbnoramlResponse::MergeFrom(const BlockMoneyAbnoramlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMoneyAbnoramlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMoneyAbnoramlResponse::CopyFrom(const BlockMoneyAbnoramlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMoneyAbnoramlResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void BlockMoneyAbnoramlResponse::Swap(BlockMoneyAbnoramlResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    blocks_.Swap(&other->blocks_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMoneyAbnoramlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMoneyAbnoramlResponse_descriptor_;
  metadata.reflection = BlockMoneyAbnoramlResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMoneyAbnormalPCRequest::kFilterFieldNumber;
#endif  // !_MSC_VER

BlockMoneyAbnormalPCRequest::BlockMoneyAbnormalPCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMoneyAbnormalPCRequest::InitAsDefaultInstance() {
}

BlockMoneyAbnormalPCRequest::BlockMoneyAbnormalPCRequest(const BlockMoneyAbnormalPCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMoneyAbnormalPCRequest::SharedCtor() {
  _cached_size_ = 0;
  filter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMoneyAbnormalPCRequest::~BlockMoneyAbnormalPCRequest() {
  SharedDtor();
}

void BlockMoneyAbnormalPCRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockMoneyAbnormalPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMoneyAbnormalPCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMoneyAbnormalPCRequest_descriptor_;
}

const BlockMoneyAbnormalPCRequest& BlockMoneyAbnormalPCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BlockMoneyAbnormalPCRequest* BlockMoneyAbnormalPCRequest::default_instance_ = NULL;

BlockMoneyAbnormalPCRequest* BlockMoneyAbnormalPCRequest::New() const {
  return new BlockMoneyAbnormalPCRequest;
}

void BlockMoneyAbnormalPCRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMoneyAbnormalPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.QuoteFilterFlag filter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::QuoteFilterFlag_IsValid(value)) {
            set_filter(static_cast< QuoteProto::QuoteFilterFlag >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMoneyAbnormalPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.QuoteFilterFlag filter = 1;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMoneyAbnormalPCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.QuoteFilterFlag filter = 1;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMoneyAbnormalPCRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.QuoteFilterFlag filter = 1;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMoneyAbnormalPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMoneyAbnormalPCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMoneyAbnormalPCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMoneyAbnormalPCRequest::MergeFrom(const BlockMoneyAbnormalPCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filter()) {
      set_filter(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMoneyAbnormalPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMoneyAbnormalPCRequest::CopyFrom(const BlockMoneyAbnormalPCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMoneyAbnormalPCRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BlockMoneyAbnormalPCRequest::Swap(BlockMoneyAbnormalPCRequest* other) {
  if (other != this) {
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMoneyAbnormalPCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMoneyAbnormalPCRequest_descriptor_;
  metadata.reflection = BlockMoneyAbnormalPCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMoneyAbnormalPCResponse::kRetFieldNumber;
const int BlockMoneyAbnormalPCResponse::kBlocksFieldNumber;
#endif  // !_MSC_VER

BlockMoneyAbnormalPCResponse::BlockMoneyAbnormalPCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMoneyAbnormalPCResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BlockMoneyAbnormalPCResponse::BlockMoneyAbnormalPCResponse(const BlockMoneyAbnormalPCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMoneyAbnormalPCResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMoneyAbnormalPCResponse::~BlockMoneyAbnormalPCResponse() {
  SharedDtor();
}

void BlockMoneyAbnormalPCResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BlockMoneyAbnormalPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMoneyAbnormalPCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMoneyAbnormalPCResponse_descriptor_;
}

const BlockMoneyAbnormalPCResponse& BlockMoneyAbnormalPCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

BlockMoneyAbnormalPCResponse* BlockMoneyAbnormalPCResponse::default_instance_ = NULL;

BlockMoneyAbnormalPCResponse* BlockMoneyAbnormalPCResponse::New() const {
  return new BlockMoneyAbnormalPCResponse;
}

void BlockMoneyAbnormalPCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  blocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMoneyAbnormalPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        break;
      }
      
      // repeated .QuoteProto.StockMsg blocks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMoneyAbnormalPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.StockMsg blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMoneyAbnormalPCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.StockMsg blocks = 2;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMoneyAbnormalPCResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.StockMsg blocks = 2;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMoneyAbnormalPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMoneyAbnormalPCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMoneyAbnormalPCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMoneyAbnormalPCResponse::MergeFrom(const BlockMoneyAbnormalPCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMoneyAbnormalPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMoneyAbnormalPCResponse::CopyFrom(const BlockMoneyAbnormalPCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMoneyAbnormalPCResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < blocks_size(); i++) {
    if (!this->blocks(i).IsInitialized()) return false;
  }
  return true;
}

void BlockMoneyAbnormalPCResponse::Swap(BlockMoneyAbnormalPCResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    blocks_.Swap(&other->blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMoneyAbnormalPCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMoneyAbnormalPCResponse_descriptor_;
  metadata.reflection = BlockMoneyAbnormalPCResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetTimeRequest::GetTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTimeRequest::InitAsDefaultInstance() {
}

GetTimeRequest::GetTimeRequest(const GetTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTimeRequest::~GetTimeRequest() {
  SharedDtor();
}

void GetTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTimeRequest_descriptor_;
}

const GetTimeRequest& GetTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

GetTimeRequest* GetTimeRequest::default_instance_ = NULL;

GetTimeRequest* GetTimeRequest::New() const {
  return new GetTimeRequest;
}

void GetTimeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTimeRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTimeRequest::MergeFrom(const GetTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeRequest::CopyFrom(const GetTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeRequest::IsInitialized() const {
  
  return true;
}

void GetTimeRequest::Swap(GetTimeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTimeRequest_descriptor_;
  metadata.reflection = GetTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTimeResponse::kRetFieldNumber;
const int GetTimeResponse::kCurTimeFieldNumber;
#endif  // !_MSC_VER

GetTimeResponse::GetTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTimeResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetTimeResponse::GetTimeResponse(const GetTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  cur_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTimeResponse::~GetTimeResponse() {
  SharedDtor();
}

void GetTimeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetTimeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTimeResponse_descriptor_;
}

const GetTimeResponse& GetTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stock_5fbasinfo_2eproto();  return *default_instance_;
}

GetTimeResponse* GetTimeResponse::default_instance_ = NULL;

GetTimeResponse* GetTimeResponse::New() const {
  return new GetTimeResponse;
}

void GetTimeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    cur_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_time;
        break;
      }
      
      // optional int32 cur_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_time_)));
          set_has_cur_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional int32 cur_time = 2;
  if (has_cur_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional int32 cur_time = 2;
  if (has_cur_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTimeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 cur_time = 2;
    if (has_cur_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTimeResponse::MergeFrom(const GetTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_cur_time()) {
      set_cur_time(from.cur_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeResponse::CopyFrom(const GetTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void GetTimeResponse::Swap(GetTimeResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cur_time_, other->cur_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTimeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTimeResponse_descriptor_;
  metadata.reflection = GetTimeResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
