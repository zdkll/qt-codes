// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rise_fall_monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* RFMonitorNumInfoOptionalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFMonitorNumInfoOptionalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFMonitorNumInfoOptionalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFMonitorNumInfoOptionalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRFMonitorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRFMonitorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchRFMonitorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchRFMonitorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFMGropeTypesReqItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFMGropeTypesReqItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFMGroupTypesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFMGroupTypesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFMGropeTypesResItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFMGropeTypesResItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RFMGroupTypesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RFMGroupTypesResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RiseFallMSortType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_rise_5ffall_5fmonitor_2eproto() {
  protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rise_fall_monitor.proto");
  GOOGLE_CHECK(file != NULL);
  RFMonitorNumInfoOptionalRequest_descriptor_ = file->message_type(0);
  static const int RFMonitorNumInfoOptionalRequest_offsets_[1] = {
  };
  RFMonitorNumInfoOptionalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFMonitorNumInfoOptionalRequest_descriptor_,
      RFMonitorNumInfoOptionalRequest::default_instance_,
      RFMonitorNumInfoOptionalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMonitorNumInfoOptionalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMonitorNumInfoOptionalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFMonitorNumInfoOptionalRequest));
  RFMonitorNumInfoOptionalResponse_descriptor_ = file->message_type(1);
  static const int RFMonitorNumInfoOptionalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMonitorNumInfoOptionalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMonitorNumInfoOptionalResponse, msg_),
  };
  RFMonitorNumInfoOptionalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFMonitorNumInfoOptionalResponse_descriptor_,
      RFMonitorNumInfoOptionalResponse::default_instance_,
      RFMonitorNumInfoOptionalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMonitorNumInfoOptionalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMonitorNumInfoOptionalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFMonitorNumInfoOptionalResponse));
  BatchRFMonitorRequest_descriptor_ = file->message_type(2);
  static const int BatchRFMonitorRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, sort_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, count_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, msg_mask_),
  };
  BatchRFMonitorRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchRFMonitorRequest_descriptor_,
      BatchRFMonitorRequest::default_instance_,
      BatchRFMonitorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchRFMonitorRequest));
  BatchRFMonitorResponse_descriptor_ = file->message_type(3);
  static const int BatchRFMonitorResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorResponse, total_cnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorResponse, stk_),
  };
  BatchRFMonitorResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchRFMonitorResponse_descriptor_,
      BatchRFMonitorResponse::default_instance_,
      BatchRFMonitorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchRFMonitorResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchRFMonitorResponse));
  RFMGropeTypesReqItem_descriptor_ = file->message_type(4);
  static const int RFMGropeTypesReqItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesReqItem, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesReqItem, sort_type_),
  };
  RFMGropeTypesReqItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFMGropeTypesReqItem_descriptor_,
      RFMGropeTypesReqItem::default_instance_,
      RFMGropeTypesReqItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesReqItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesReqItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFMGropeTypesReqItem));
  RFMGroupTypesRequest_descriptor_ = file->message_type(5);
  static const int RFMGroupTypesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesRequest, item_types_),
  };
  RFMGroupTypesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFMGroupTypesRequest_descriptor_,
      RFMGroupTypesRequest::default_instance_,
      RFMGroupTypesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFMGroupTypesRequest));
  RFMGropeTypesResItem_descriptor_ = file->message_type(6);
  static const int RFMGropeTypesResItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesResItem, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesResItem, msg_),
  };
  RFMGropeTypesResItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFMGropeTypesResItem_descriptor_,
      RFMGropeTypesResItem::default_instance_,
      RFMGropeTypesResItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesResItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGropeTypesResItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFMGropeTypesResItem));
  RFMGroupTypesResponse_descriptor_ = file->message_type(7);
  static const int RFMGroupTypesResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesResponse, items_),
  };
  RFMGroupTypesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RFMGroupTypesResponse_descriptor_,
      RFMGroupTypesResponse::default_instance_,
      RFMGroupTypesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RFMGroupTypesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RFMGroupTypesResponse));
  RiseFallMSortType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rise_5ffall_5fmonitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFMonitorNumInfoOptionalRequest_descriptor_, &RFMonitorNumInfoOptionalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFMonitorNumInfoOptionalResponse_descriptor_, &RFMonitorNumInfoOptionalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchRFMonitorRequest_descriptor_, &BatchRFMonitorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchRFMonitorResponse_descriptor_, &BatchRFMonitorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFMGropeTypesReqItem_descriptor_, &RFMGropeTypesReqItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFMGroupTypesRequest_descriptor_, &RFMGroupTypesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFMGropeTypesResItem_descriptor_, &RFMGropeTypesResItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RFMGroupTypesResponse_descriptor_, &RFMGroupTypesResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rise_5ffall_5fmonitor_2eproto() {
  delete RFMonitorNumInfoOptionalRequest::default_instance_;
  delete RFMonitorNumInfoOptionalRequest_reflection_;
  delete RFMonitorNumInfoOptionalResponse::default_instance_;
  delete RFMonitorNumInfoOptionalResponse_reflection_;
  delete BatchRFMonitorRequest::default_instance_;
  delete BatchRFMonitorRequest_reflection_;
  delete BatchRFMonitorResponse::default_instance_;
  delete BatchRFMonitorResponse_reflection_;
  delete RFMGropeTypesReqItem::default_instance_;
  delete RFMGropeTypesReqItem_reflection_;
  delete RFMGroupTypesRequest::default_instance_;
  delete RFMGroupTypesRequest_reflection_;
  delete RFMGropeTypesResItem::default_instance_;
  delete RFMGropeTypesResItem_reflection_;
  delete RFMGroupTypesResponse::default_instance_;
  delete RFMGroupTypesResponse_reflection_;
}

void protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rise_fall_monitor.proto\022\nQuoteProto\032\016r"
    "et_base.proto\032\024public_message.proto\"!\n\037R"
    "FMonitorNumInfoOptionalRequest\"p\n RFMoni"
    "torNumInfoOptionalResponse\022\034\n\003ret\030\001 \001(\0132"
    "\017.QuoteProto.Ret\022.\n\003msg\030\002 \001(\0132!.QuotePro"
    "to.RiseFallMonitorNumMsg\"\320\001\n\025BatchRFMoni"
    "torRequest\022)\n\006m_type\030\001 \002(\0162\031.QuoteProto."
    "RFMonitorType\0220\n\tsort_type\030\002 \002(\0162\035.Quote"
    "Proto.RiseFallMSortType\022\017\n\007is_desc\030\003 \002(\010"
    "\022\r\n\005index\030\004 \002(\005\022\023\n\013count_range\030\005 \002(\005\022%\n\010"
    "msg_mask\030\006 \001(\0132\023.QuoteProto.MsgMask\"k\n\026B"
    "atchRFMonitorResponse\022\034\n\003ret\030\001 \001(\0132\017.Quo"
    "teProto.Ret\022\021\n\ttotal_cnt\030\002 \001(\005\022 \n\003stk\030\003 "
    "\003(\0132\023.QuoteProto.RateMsg\"s\n\024RFMGropeType"
    "sReqItem\022)\n\006m_type\030\001 \002(\0162\031.QuoteProto.RF"
    "MonitorType\0220\n\tsort_type\030\002 \002(\0162\035.QuotePr"
    "oto.RiseFallMSortType\"L\n\024RFMGroupTypesRe"
    "quest\0224\n\nitem_types\030\001 \003(\0132 .QuoteProto.R"
    "FMGropeTypesReqItem\"m\n\024RFMGropeTypesResI"
    "tem\0223\n\titem_type\030\001 \002(\0132 .QuoteProto.RFMG"
    "ropeTypesReqItem\022 \n\003msg\030\002 \002(\0132\023.QuotePro"
    "to.RateMsg\"f\n\025RFMGroupTypesResponse\022\034\n\003r"
    "et\030\001 \001(\0132\017.QuoteProto.Ret\022/\n\005items\030\002 \003(\013"
    "2 .QuoteProto.RFMGropeTypesResItem*\225\002\n\021R"
    "iseFallMSortType\022\024\n\020rfm_sort_invalid\020\000\022\024"
    "\n\020rfm_sort_fb_rise\020\001\022\024\n\020rfm_sort_fb_time"
    "\020\002\022\026\n\022rfm_sort_zt_volume\020\003\022\026\n\022rfm_sort_d"
    "t_volumn\020\004\022\024\n\020rfm_sort_dt_time\020\005\022\024\n\020rfm_"
    "sort_zb_time\020\006\022\023\n\017rfm_sort_zb_num\020\007\022\027\n\023r"
    "fm_sort_main_funds\020\010\022\031\n\025rfm_sort_zt_open"
    "_time\020\t\022\031\n\025rfm_sort_dt_open_time\020\n", 1234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rise_fall_monitor.proto", &protobuf_RegisterTypes);
  RFMonitorNumInfoOptionalRequest::default_instance_ = new RFMonitorNumInfoOptionalRequest();
  RFMonitorNumInfoOptionalResponse::default_instance_ = new RFMonitorNumInfoOptionalResponse();
  BatchRFMonitorRequest::default_instance_ = new BatchRFMonitorRequest();
  BatchRFMonitorResponse::default_instance_ = new BatchRFMonitorResponse();
  RFMGropeTypesReqItem::default_instance_ = new RFMGropeTypesReqItem();
  RFMGroupTypesRequest::default_instance_ = new RFMGroupTypesRequest();
  RFMGropeTypesResItem::default_instance_ = new RFMGropeTypesResItem();
  RFMGroupTypesResponse::default_instance_ = new RFMGroupTypesResponse();
  RFMonitorNumInfoOptionalRequest::default_instance_->InitAsDefaultInstance();
  RFMonitorNumInfoOptionalResponse::default_instance_->InitAsDefaultInstance();
  BatchRFMonitorRequest::default_instance_->InitAsDefaultInstance();
  BatchRFMonitorResponse::default_instance_->InitAsDefaultInstance();
  RFMGropeTypesReqItem::default_instance_->InitAsDefaultInstance();
  RFMGroupTypesRequest::default_instance_->InitAsDefaultInstance();
  RFMGropeTypesResItem::default_instance_->InitAsDefaultInstance();
  RFMGroupTypesResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rise_5ffall_5fmonitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rise_5ffall_5fmonitor_2eproto {
  StaticDescriptorInitializer_rise_5ffall_5fmonitor_2eproto() {
    protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();
  }
} static_descriptor_initializer_rise_5ffall_5fmonitor_2eproto_;

const ::google::protobuf::EnumDescriptor* RiseFallMSortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiseFallMSortType_descriptor_;
}
bool RiseFallMSortType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RFMonitorNumInfoOptionalRequest::RFMonitorNumInfoOptionalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFMonitorNumInfoOptionalRequest::InitAsDefaultInstance() {
}

RFMonitorNumInfoOptionalRequest::RFMonitorNumInfoOptionalRequest(const RFMonitorNumInfoOptionalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFMonitorNumInfoOptionalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFMonitorNumInfoOptionalRequest::~RFMonitorNumInfoOptionalRequest() {
  SharedDtor();
}

void RFMonitorNumInfoOptionalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RFMonitorNumInfoOptionalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFMonitorNumInfoOptionalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMonitorNumInfoOptionalRequest_descriptor_;
}

const RFMonitorNumInfoOptionalRequest& RFMonitorNumInfoOptionalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

RFMonitorNumInfoOptionalRequest* RFMonitorNumInfoOptionalRequest::default_instance_ = NULL;

RFMonitorNumInfoOptionalRequest* RFMonitorNumInfoOptionalRequest::New() const {
  return new RFMonitorNumInfoOptionalRequest;
}

void RFMonitorNumInfoOptionalRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFMonitorNumInfoOptionalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RFMonitorNumInfoOptionalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFMonitorNumInfoOptionalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFMonitorNumInfoOptionalRequest::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFMonitorNumInfoOptionalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFMonitorNumInfoOptionalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFMonitorNumInfoOptionalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFMonitorNumInfoOptionalRequest::MergeFrom(const RFMonitorNumInfoOptionalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFMonitorNumInfoOptionalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFMonitorNumInfoOptionalRequest::CopyFrom(const RFMonitorNumInfoOptionalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFMonitorNumInfoOptionalRequest::IsInitialized() const {
  
  return true;
}

void RFMonitorNumInfoOptionalRequest::Swap(RFMonitorNumInfoOptionalRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFMonitorNumInfoOptionalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFMonitorNumInfoOptionalRequest_descriptor_;
  metadata.reflection = RFMonitorNumInfoOptionalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RFMonitorNumInfoOptionalResponse::kRetFieldNumber;
const int RFMonitorNumInfoOptionalResponse::kMsgFieldNumber;
#endif  // !_MSC_VER

RFMonitorNumInfoOptionalResponse::RFMonitorNumInfoOptionalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFMonitorNumInfoOptionalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
  msg_ = const_cast< ::QuoteProto::RiseFallMonitorNumMsg*>(&::QuoteProto::RiseFallMonitorNumMsg::default_instance());
}

RFMonitorNumInfoOptionalResponse::RFMonitorNumInfoOptionalResponse(const RFMonitorNumInfoOptionalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFMonitorNumInfoOptionalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFMonitorNumInfoOptionalResponse::~RFMonitorNumInfoOptionalResponse() {
  SharedDtor();
}

void RFMonitorNumInfoOptionalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
    delete msg_;
  }
}

void RFMonitorNumInfoOptionalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFMonitorNumInfoOptionalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMonitorNumInfoOptionalResponse_descriptor_;
}

const RFMonitorNumInfoOptionalResponse& RFMonitorNumInfoOptionalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

RFMonitorNumInfoOptionalResponse* RFMonitorNumInfoOptionalResponse::default_instance_ = NULL;

RFMonitorNumInfoOptionalResponse* RFMonitorNumInfoOptionalResponse::New() const {
  return new RFMonitorNumInfoOptionalResponse;
}

void RFMonitorNumInfoOptionalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::QuoteProto::RiseFallMonitorNumMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFMonitorNumInfoOptionalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // optional .QuoteProto.RiseFallMonitorNumMsg msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFMonitorNumInfoOptionalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional .QuoteProto.RiseFallMonitorNumMsg msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFMonitorNumInfoOptionalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional .QuoteProto.RiseFallMonitorNumMsg msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFMonitorNumInfoOptionalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional .QuoteProto.RiseFallMonitorNumMsg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFMonitorNumInfoOptionalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFMonitorNumInfoOptionalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFMonitorNumInfoOptionalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFMonitorNumInfoOptionalResponse::MergeFrom(const RFMonitorNumInfoOptionalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_msg()) {
      mutable_msg()->::QuoteProto::RiseFallMonitorNumMsg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFMonitorNumInfoOptionalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFMonitorNumInfoOptionalResponse::CopyFrom(const RFMonitorNumInfoOptionalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFMonitorNumInfoOptionalResponse::IsInitialized() const {
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void RFMonitorNumInfoOptionalResponse::Swap(RFMonitorNumInfoOptionalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFMonitorNumInfoOptionalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFMonitorNumInfoOptionalResponse_descriptor_;
  metadata.reflection = RFMonitorNumInfoOptionalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchRFMonitorRequest::kMTypeFieldNumber;
const int BatchRFMonitorRequest::kSortTypeFieldNumber;
const int BatchRFMonitorRequest::kIsDescFieldNumber;
const int BatchRFMonitorRequest::kIndexFieldNumber;
const int BatchRFMonitorRequest::kCountRangeFieldNumber;
const int BatchRFMonitorRequest::kMsgMaskFieldNumber;
#endif  // !_MSC_VER

BatchRFMonitorRequest::BatchRFMonitorRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchRFMonitorRequest::InitAsDefaultInstance() {
  msg_mask_ = const_cast< ::QuoteProto::MsgMask*>(&::QuoteProto::MsgMask::default_instance());
}

BatchRFMonitorRequest::BatchRFMonitorRequest(const BatchRFMonitorRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchRFMonitorRequest::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 1;
  sort_type_ = 0;
  is_desc_ = false;
  index_ = 0;
  count_range_ = 0;
  msg_mask_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchRFMonitorRequest::~BatchRFMonitorRequest() {
  SharedDtor();
}

void BatchRFMonitorRequest::SharedDtor() {
  if (this != default_instance_) {
    delete msg_mask_;
  }
}

void BatchRFMonitorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRFMonitorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRFMonitorRequest_descriptor_;
}

const BatchRFMonitorRequest& BatchRFMonitorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

BatchRFMonitorRequest* BatchRFMonitorRequest::default_instance_ = NULL;

BatchRFMonitorRequest* BatchRFMonitorRequest::New() const {
  return new BatchRFMonitorRequest;
}

void BatchRFMonitorRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 1;
    sort_type_ = 0;
    is_desc_ = false;
    index_ = 0;
    count_range_ = 0;
    if (has_msg_mask()) {
      if (msg_mask_ != NULL) msg_mask_->::QuoteProto::MsgMask::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchRFMonitorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.RFMonitorType m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::RFMonitorType_IsValid(value)) {
            set_m_type(static_cast< QuoteProto::RFMonitorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sort_type;
        break;
      }
      
      // required .QuoteProto.RiseFallMSortType sort_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::RiseFallMSortType_IsValid(value)) {
            set_sort_type(static_cast< QuoteProto::RiseFallMSortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }
      
      // required int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_msg_mask;
        break;
      }
      
      // optional .QuoteProto.MsgMask msg_mask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_mask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_mask()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchRFMonitorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.RFMonitorType m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_type(), output);
  }
  
  // required .QuoteProto.RiseFallMSortType sort_type = 2;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sort_type(), output);
  }
  
  // required bool is_desc = 3;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_desc(), output);
  }
  
  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }
  
  // required int32 count_range = 5;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count_range(), output);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 6;
  if (has_msg_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msg_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchRFMonitorRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.RFMonitorType m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_type(), target);
  }
  
  // required .QuoteProto.RiseFallMSortType sort_type = 2;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sort_type(), target);
  }
  
  // required bool is_desc = 3;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_desc(), target);
  }
  
  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }
  
  // required int32 count_range = 5;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count_range(), target);
  }
  
  // optional .QuoteProto.MsgMask msg_mask = 6;
  if (has_msg_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msg_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchRFMonitorRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.RFMonitorType m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_type());
    }
    
    // required .QuoteProto.RiseFallMSortType sort_type = 2;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_type());
    }
    
    // required bool is_desc = 3;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 5;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
    // optional .QuoteProto.MsgMask msg_mask = 6;
    if (has_msg_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRFMonitorRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchRFMonitorRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchRFMonitorRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchRFMonitorRequest::MergeFrom(const BatchRFMonitorRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
    if (from.has_msg_mask()) {
      mutable_msg_mask()->::QuoteProto::MsgMask::MergeFrom(from.msg_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchRFMonitorRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRFMonitorRequest::CopyFrom(const BatchRFMonitorRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRFMonitorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void BatchRFMonitorRequest::Swap(BatchRFMonitorRequest* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(msg_mask_, other->msg_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchRFMonitorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRFMonitorRequest_descriptor_;
  metadata.reflection = BatchRFMonitorRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchRFMonitorResponse::kRetFieldNumber;
const int BatchRFMonitorResponse::kTotalCntFieldNumber;
const int BatchRFMonitorResponse::kStkFieldNumber;
#endif  // !_MSC_VER

BatchRFMonitorResponse::BatchRFMonitorResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchRFMonitorResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchRFMonitorResponse::BatchRFMonitorResponse(const BatchRFMonitorResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchRFMonitorResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchRFMonitorResponse::~BatchRFMonitorResponse() {
  SharedDtor();
}

void BatchRFMonitorResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchRFMonitorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchRFMonitorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchRFMonitorResponse_descriptor_;
}

const BatchRFMonitorResponse& BatchRFMonitorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

BatchRFMonitorResponse* BatchRFMonitorResponse::default_instance_ = NULL;

BatchRFMonitorResponse* BatchRFMonitorResponse::New() const {
  return new BatchRFMonitorResponse;
}

void BatchRFMonitorResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchRFMonitorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.RateMsg stk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchRFMonitorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional int32 total_cnt = 2;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_cnt(), output);
  }
  
  // repeated .QuoteProto.RateMsg stk = 3;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchRFMonitorResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional int32 total_cnt = 2;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_cnt(), target);
  }
  
  // repeated .QuoteProto.RateMsg stk = 3;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchRFMonitorResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 2;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.RateMsg stk = 3;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchRFMonitorResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchRFMonitorResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchRFMonitorResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchRFMonitorResponse::MergeFrom(const BatchRFMonitorResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchRFMonitorResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchRFMonitorResponse::CopyFrom(const BatchRFMonitorResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchRFMonitorResponse::IsInitialized() const {
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BatchRFMonitorResponse::Swap(BatchRFMonitorResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(total_cnt_, other->total_cnt_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchRFMonitorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchRFMonitorResponse_descriptor_;
  metadata.reflection = BatchRFMonitorResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RFMGropeTypesReqItem::kMTypeFieldNumber;
const int RFMGropeTypesReqItem::kSortTypeFieldNumber;
#endif  // !_MSC_VER

RFMGropeTypesReqItem::RFMGropeTypesReqItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFMGropeTypesReqItem::InitAsDefaultInstance() {
}

RFMGropeTypesReqItem::RFMGropeTypesReqItem(const RFMGropeTypesReqItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFMGropeTypesReqItem::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 1;
  sort_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFMGropeTypesReqItem::~RFMGropeTypesReqItem() {
  SharedDtor();
}

void RFMGropeTypesReqItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RFMGropeTypesReqItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFMGropeTypesReqItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMGropeTypesReqItem_descriptor_;
}

const RFMGropeTypesReqItem& RFMGropeTypesReqItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

RFMGropeTypesReqItem* RFMGropeTypesReqItem::default_instance_ = NULL;

RFMGropeTypesReqItem* RFMGropeTypesReqItem::New() const {
  return new RFMGropeTypesReqItem;
}

void RFMGropeTypesReqItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 1;
    sort_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFMGropeTypesReqItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.RFMonitorType m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::RFMonitorType_IsValid(value)) {
            set_m_type(static_cast< QuoteProto::RFMonitorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sort_type;
        break;
      }
      
      // required .QuoteProto.RiseFallMSortType sort_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::RiseFallMSortType_IsValid(value)) {
            set_sort_type(static_cast< QuoteProto::RiseFallMSortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFMGropeTypesReqItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.RFMonitorType m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->m_type(), output);
  }
  
  // required .QuoteProto.RiseFallMSortType sort_type = 2;
  if (has_sort_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sort_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFMGropeTypesReqItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.RFMonitorType m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->m_type(), target);
  }
  
  // required .QuoteProto.RiseFallMSortType sort_type = 2;
  if (has_sort_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sort_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFMGropeTypesReqItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.RFMonitorType m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->m_type());
    }
    
    // required .QuoteProto.RiseFallMSortType sort_type = 2;
    if (has_sort_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFMGropeTypesReqItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFMGropeTypesReqItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFMGropeTypesReqItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFMGropeTypesReqItem::MergeFrom(const RFMGropeTypesReqItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_sort_type()) {
      set_sort_type(from.sort_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFMGropeTypesReqItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFMGropeTypesReqItem::CopyFrom(const RFMGropeTypesReqItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFMGropeTypesReqItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RFMGropeTypesReqItem::Swap(RFMGropeTypesReqItem* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(sort_type_, other->sort_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFMGropeTypesReqItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFMGropeTypesReqItem_descriptor_;
  metadata.reflection = RFMGropeTypesReqItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RFMGroupTypesRequest::kItemTypesFieldNumber;
#endif  // !_MSC_VER

RFMGroupTypesRequest::RFMGroupTypesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFMGroupTypesRequest::InitAsDefaultInstance() {
}

RFMGroupTypesRequest::RFMGroupTypesRequest(const RFMGroupTypesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFMGroupTypesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFMGroupTypesRequest::~RFMGroupTypesRequest() {
  SharedDtor();
}

void RFMGroupTypesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RFMGroupTypesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFMGroupTypesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMGroupTypesRequest_descriptor_;
}

const RFMGroupTypesRequest& RFMGroupTypesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

RFMGroupTypesRequest* RFMGroupTypesRequest::default_instance_ = NULL;

RFMGroupTypesRequest* RFMGroupTypesRequest::New() const {
  return new RFMGroupTypesRequest;
}

void RFMGroupTypesRequest::Clear() {
  item_types_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFMGroupTypesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.RFMGropeTypesReqItem item_types = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_types()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_types;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFMGroupTypesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.RFMGropeTypesReqItem item_types = 1;
  for (int i = 0; i < this->item_types_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_types(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFMGroupTypesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.RFMGropeTypesReqItem item_types = 1;
  for (int i = 0; i < this->item_types_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_types(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFMGroupTypesRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.RFMGropeTypesReqItem item_types = 1;
  total_size += 1 * this->item_types_size();
  for (int i = 0; i < this->item_types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_types(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFMGroupTypesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFMGroupTypesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFMGroupTypesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFMGroupTypesRequest::MergeFrom(const RFMGroupTypesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_types_.MergeFrom(from.item_types_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFMGroupTypesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFMGroupTypesRequest::CopyFrom(const RFMGroupTypesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFMGroupTypesRequest::IsInitialized() const {
  
  for (int i = 0; i < item_types_size(); i++) {
    if (!this->item_types(i).IsInitialized()) return false;
  }
  return true;
}

void RFMGroupTypesRequest::Swap(RFMGroupTypesRequest* other) {
  if (other != this) {
    item_types_.Swap(&other->item_types_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFMGroupTypesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFMGroupTypesRequest_descriptor_;
  metadata.reflection = RFMGroupTypesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RFMGropeTypesResItem::kItemTypeFieldNumber;
const int RFMGropeTypesResItem::kMsgFieldNumber;
#endif  // !_MSC_VER

RFMGropeTypesResItem::RFMGropeTypesResItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFMGropeTypesResItem::InitAsDefaultInstance() {
  item_type_ = const_cast< ::QuoteProto::RFMGropeTypesReqItem*>(&::QuoteProto::RFMGropeTypesReqItem::default_instance());
  msg_ = const_cast< ::QuoteProto::RateMsg*>(&::QuoteProto::RateMsg::default_instance());
}

RFMGropeTypesResItem::RFMGropeTypesResItem(const RFMGropeTypesResItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFMGropeTypesResItem::SharedCtor() {
  _cached_size_ = 0;
  item_type_ = NULL;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFMGropeTypesResItem::~RFMGropeTypesResItem() {
  SharedDtor();
}

void RFMGropeTypesResItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_type_;
    delete msg_;
  }
}

void RFMGropeTypesResItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFMGropeTypesResItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMGropeTypesResItem_descriptor_;
}

const RFMGropeTypesResItem& RFMGropeTypesResItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

RFMGropeTypesResItem* RFMGropeTypesResItem::default_instance_ = NULL;

RFMGropeTypesResItem* RFMGropeTypesResItem::New() const {
  return new RFMGropeTypesResItem;
}

void RFMGropeTypesResItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_item_type()) {
      if (item_type_ != NULL) item_type_->::QuoteProto::RFMGropeTypesReqItem::Clear();
    }
    if (has_msg()) {
      if (msg_ != NULL) msg_->::QuoteProto::RateMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFMGropeTypesResItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.RFMGropeTypesReqItem item_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }
      
      // required .QuoteProto.RateMsg msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFMGropeTypesResItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.RFMGropeTypesReqItem item_type = 1;
  if (has_item_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_type(), output);
  }
  
  // required .QuoteProto.RateMsg msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFMGropeTypesResItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.RFMGropeTypesReqItem item_type = 1;
  if (has_item_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_type(), target);
  }
  
  // required .QuoteProto.RateMsg msg = 2;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFMGropeTypesResItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.RFMGropeTypesReqItem item_type = 1;
    if (has_item_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_type());
    }
    
    // required .QuoteProto.RateMsg msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFMGropeTypesResItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFMGropeTypesResItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFMGropeTypesResItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFMGropeTypesResItem::MergeFrom(const RFMGropeTypesResItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_type()) {
      mutable_item_type()->::QuoteProto::RFMGropeTypesReqItem::MergeFrom(from.item_type());
    }
    if (from.has_msg()) {
      mutable_msg()->::QuoteProto::RateMsg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFMGropeTypesResItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFMGropeTypesResItem::CopyFrom(const RFMGropeTypesResItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFMGropeTypesResItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_item_type()) {
    if (!this->item_type().IsInitialized()) return false;
  }
  return true;
}

void RFMGropeTypesResItem::Swap(RFMGropeTypesResItem* other) {
  if (other != this) {
    std::swap(item_type_, other->item_type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFMGropeTypesResItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFMGropeTypesResItem_descriptor_;
  metadata.reflection = RFMGropeTypesResItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RFMGroupTypesResponse::kRetFieldNumber;
const int RFMGroupTypesResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

RFMGroupTypesResponse::RFMGroupTypesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RFMGroupTypesResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

RFMGroupTypesResponse::RFMGroupTypesResponse(const RFMGroupTypesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RFMGroupTypesResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RFMGroupTypesResponse::~RFMGroupTypesResponse() {
  SharedDtor();
}

void RFMGroupTypesResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void RFMGroupTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RFMGroupTypesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMGroupTypesResponse_descriptor_;
}

const RFMGroupTypesResponse& RFMGroupTypesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rise_5ffall_5fmonitor_2eproto();  return *default_instance_;
}

RFMGroupTypesResponse* RFMGroupTypesResponse::default_instance_ = NULL;

RFMGroupTypesResponse* RFMGroupTypesResponse::New() const {
  return new RFMGroupTypesResponse;
}

void RFMGroupTypesResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RFMGroupTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .QuoteProto.RFMGropeTypesResItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RFMGroupTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.RFMGropeTypesResItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RFMGroupTypesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.RFMGropeTypesResItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RFMGroupTypesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.RFMGropeTypesResItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RFMGroupTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RFMGroupTypesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RFMGroupTypesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RFMGroupTypesResponse::MergeFrom(const RFMGroupTypesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RFMGroupTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RFMGroupTypesResponse::CopyFrom(const RFMGroupTypesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RFMGroupTypesResponse::IsInitialized() const {
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void RFMGroupTypesResponse::Swap(RFMGroupTypesResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RFMGroupTypesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RFMGroupTypesResponse_descriptor_;
  metadata.reflection = RFMGroupTypesResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
