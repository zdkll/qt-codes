// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "publish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* PublishItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PublishResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PublishType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_publish_2eproto() {
  protobuf_AddDesc_publish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "publish.proto");
  GOOGLE_CHECK(file != NULL);
  PublishItem_descriptor_ = file->message_type(0);
  static const int PublishItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishItem, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishItem, ptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishItem, kline_type_),
  };
  PublishItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishItem_descriptor_,
      PublishItem::default_instance_,
      PublishItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishItem));
  PublishRequest_descriptor_ = file->message_type(1);
  static const int PublishRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, stocks_),
  };
  PublishRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishRequest_descriptor_,
      PublishRequest::default_instance_,
      PublishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishRequest));
  PublishResponse_descriptor_ = file->message_type(2);
  static const int PublishResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, quote_arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, money_arr_),
  };
  PublishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PublishResponse_descriptor_,
      PublishResponse::default_instance_,
      PublishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PublishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PublishResponse));
  PublishType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_publish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishItem_descriptor_, &PublishItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishRequest_descriptor_, &PublishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PublishResponse_descriptor_, &PublishResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_publish_2eproto() {
  delete PublishItem::default_instance_;
  delete PublishItem_reflection_;
  delete PublishRequest::default_instance_;
  delete PublishRequest_reflection_;
  delete PublishResponse::default_instance_;
  delete PublishResponse_reflection_;
}

void protobuf_AddDesc_publish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpublish.proto\022\nQuoteProto\032\016ret_base.pr"
    "oto\032\024public_message.proto\"]\n\013PublishItem"
    "\022\022\n\nstock_code\030\001 \001(\t\022&\n\005ptype\030\002 \001(\0162\027.Qu"
    "oteProto.PublishType\022\022\n\nkline_type\030\003 \001(\005"
    "\"H\n\016PublishRequest\022\r\n\005state\030\001 \001(\005\022\'\n\006sto"
    "cks\030\002 \003(\0132\027.QuoteProto.PublishItem\"\201\001\n\017P"
    "ublishResponse\022\034\n\003ret\030\001 \002(\0132\017.QuoteProto"
    ".Ret\022\'\n\tquote_arr\030\002 \003(\0132\024.QuoteProto.Sto"
    "ckMsg\022\'\n\tmoney_arr\030\003 \003(\0132\024.QuoteProto.Mo"
    "neyMsg*\262\001\n\013PublishType\022\027\n\023PublishType_in"
    "valid\020\000\022!\n\035PublishType_stock_block_quote"
    "\020\001\022!\n\035PublishType_stock_block_kline\020\024\022!\n"
    "\035PublishType_stock_block_zhubi\020\036\022!\n\035Publ"
    "ishType_money_block_quote\020d", 547);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "publish.proto", &protobuf_RegisterTypes);
  PublishItem::default_instance_ = new PublishItem();
  PublishRequest::default_instance_ = new PublishRequest();
  PublishResponse::default_instance_ = new PublishResponse();
  PublishItem::default_instance_->InitAsDefaultInstance();
  PublishRequest::default_instance_->InitAsDefaultInstance();
  PublishResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_publish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_publish_2eproto {
  StaticDescriptorInitializer_publish_2eproto() {
    protobuf_AddDesc_publish_2eproto();
  }
} static_descriptor_initializer_publish_2eproto_;

const ::google::protobuf::EnumDescriptor* PublishType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishType_descriptor_;
}
bool PublishType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 20:
    case 30:
    case 100:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PublishItem::kStockCodeFieldNumber;
const int PublishItem::kPtypeFieldNumber;
const int PublishItem::kKlineTypeFieldNumber;
#endif  // !_MSC_VER

PublishItem::PublishItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishItem::InitAsDefaultInstance() {
}

PublishItem::PublishItem(const PublishItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishItem::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ptype_ = 0;
  kline_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishItem::~PublishItem() {
  SharedDtor();
}

void PublishItem::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void PublishItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishItem_descriptor_;
}

const PublishItem& PublishItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_publish_2eproto();  return *default_instance_;
}

PublishItem* PublishItem::default_instance_ = NULL;

PublishItem* PublishItem::New() const {
  return new PublishItem;
}

void PublishItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    ptype_ = 0;
    kline_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ptype;
        break;
      }
      
      // optional .QuoteProto.PublishType ptype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ptype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::PublishType_IsValid(value)) {
            set_ptype(static_cast< QuoteProto::PublishType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kline_type;
        break;
      }
      
      // optional int32 kline_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kline_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kline_type_)));
          set_has_kline_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // optional .QuoteProto.PublishType ptype = 2;
  if (has_ptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ptype(), output);
  }
  
  // optional int32 kline_type = 3;
  if (has_kline_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kline_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // optional .QuoteProto.PublishType ptype = 2;
  if (has_ptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ptype(), target);
  }
  
  // optional int32 kline_type = 3;
  if (has_kline_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kline_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional .QuoteProto.PublishType ptype = 2;
    if (has_ptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ptype());
    }
    
    // optional int32 kline_type = 3;
    if (has_kline_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kline_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishItem::MergeFrom(const PublishItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_ptype()) {
      set_ptype(from.ptype());
    }
    if (from.has_kline_type()) {
      set_kline_type(from.kline_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishItem::CopyFrom(const PublishItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishItem::IsInitialized() const {
  
  return true;
}

void PublishItem::Swap(PublishItem* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(ptype_, other->ptype_);
    std::swap(kline_type_, other->kline_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishItem_descriptor_;
  metadata.reflection = PublishItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishRequest::kStateFieldNumber;
const int PublishRequest::kStocksFieldNumber;
#endif  // !_MSC_VER

PublishRequest::PublishRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishRequest::InitAsDefaultInstance() {
}

PublishRequest::PublishRequest(const PublishRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishRequest::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishRequest::~PublishRequest() {
  SharedDtor();
}

void PublishRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishRequest_descriptor_;
}

const PublishRequest& PublishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_publish_2eproto();  return *default_instance_;
}

PublishRequest* PublishRequest::default_instance_ = NULL;

PublishRequest* PublishRequest::New() const {
  return new PublishRequest;
}

void PublishRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  stocks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stocks;
        break;
      }
      
      // repeated .QuoteProto.PublishItem stocks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stocks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stocks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // repeated .QuoteProto.PublishItem stocks = 2;
  for (int i = 0; i < this->stocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stocks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // repeated .QuoteProto.PublishItem stocks = 2;
  for (int i = 0; i < this->stocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stocks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  // repeated .QuoteProto.PublishItem stocks = 2;
  total_size += 1 * this->stocks_size();
  for (int i = 0; i < this->stocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stocks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishRequest::MergeFrom(const PublishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stocks_.MergeFrom(from.stocks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRequest::CopyFrom(const PublishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRequest::IsInitialized() const {
  
  return true;
}

void PublishRequest::Swap(PublishRequest* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    stocks_.Swap(&other->stocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishRequest_descriptor_;
  metadata.reflection = PublishRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PublishResponse::kRetFieldNumber;
const int PublishResponse::kQuoteArrFieldNumber;
const int PublishResponse::kMoneyArrFieldNumber;
#endif  // !_MSC_VER

PublishResponse::PublishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PublishResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

PublishResponse::PublishResponse(const PublishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PublishResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PublishResponse::~PublishResponse() {
  SharedDtor();
}

void PublishResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void PublishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PublishResponse_descriptor_;
}

const PublishResponse& PublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_publish_2eproto();  return *default_instance_;
}

PublishResponse* PublishResponse::default_instance_ = NULL;

PublishResponse* PublishResponse::New() const {
  return new PublishResponse;
}

void PublishResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  quote_arr_.Clear();
  money_arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quote_arr;
        break;
      }
      
      // repeated .QuoteProto.StockMsg quote_arr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quote_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quote_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quote_arr;
        if (input->ExpectTag(26)) goto parse_money_arr;
        break;
      }
      
      // repeated .QuoteProto.MoneyMsg money_arr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_money_arr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_money_arr;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.StockMsg quote_arr = 2;
  for (int i = 0; i < this->quote_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quote_arr(i), output);
  }
  
  // repeated .QuoteProto.MoneyMsg money_arr = 3;
  for (int i = 0; i < this->money_arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->money_arr(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PublishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.StockMsg quote_arr = 2;
  for (int i = 0; i < this->quote_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quote_arr(i), target);
  }
  
  // repeated .QuoteProto.MoneyMsg money_arr = 3;
  for (int i = 0; i < this->money_arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->money_arr(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PublishResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.StockMsg quote_arr = 2;
  total_size += 1 * this->quote_arr_size();
  for (int i = 0; i < this->quote_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quote_arr(i));
  }
  
  // repeated .QuoteProto.MoneyMsg money_arr = 3;
  total_size += 1 * this->money_arr_size();
  for (int i = 0; i < this->money_arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->money_arr(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PublishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PublishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PublishResponse::MergeFrom(const PublishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  quote_arr_.MergeFrom(from.quote_arr_);
  money_arr_.MergeFrom(from.money_arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishResponse::CopyFrom(const PublishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < quote_arr_size(); i++) {
    if (!this->quote_arr(i).IsInitialized()) return false;
  }
  return true;
}

void PublishResponse::Swap(PublishResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    quote_arr_.Swap(&other->quote_arr_);
    money_arr_.Swap(&other->money_arr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PublishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PublishResponse_descriptor_;
  metadata.reflection = PublishResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
