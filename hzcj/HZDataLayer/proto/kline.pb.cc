// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kline.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* GetKLineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetKLineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetKLineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetKLineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTimeKLineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTimeKLineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTimeKLineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTimeKLineResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kline_2eproto() {
  protobuf_AddDesc_kline_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kline.proto");
  GOOGLE_CHECK(file != NULL);
  GetKLineRequest_descriptor_ = file->message_type(0);
  static const int GetKLineRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, kline_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, is_desc_),
  };
  GetKLineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetKLineRequest_descriptor_,
      GetKLineRequest::default_instance_,
      GetKLineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetKLineRequest));
  GetKLineResponse_descriptor_ = file->message_type(1);
  static const int GetKLineResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineResponse, kline_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineResponse, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineResponse, kline_type_),
  };
  GetKLineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetKLineResponse_descriptor_,
      GetKLineResponse::default_instance_,
      GetKLineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetKLineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetKLineResponse));
  GetTimeKLineRequest_descriptor_ = file->message_type(2);
  static const int GetTimeKLineRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineRequest, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineRequest, start_time_),
  };
  GetTimeKLineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTimeKLineRequest_descriptor_,
      GetTimeKLineRequest::default_instance_,
      GetTimeKLineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTimeKLineRequest));
  GetTimeKLineResponse_descriptor_ = file->message_type(3);
  static const int GetTimeKLineResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineResponse, kline_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineResponse, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineResponse, kline_type_),
  };
  GetTimeKLineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTimeKLineResponse_descriptor_,
      GetTimeKLineResponse::default_instance_,
      GetTimeKLineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTimeKLineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTimeKLineResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kline_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetKLineRequest_descriptor_, &GetKLineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetKLineResponse_descriptor_, &GetKLineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTimeKLineRequest_descriptor_, &GetTimeKLineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTimeKLineResponse_descriptor_, &GetTimeKLineResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kline_2eproto() {
  delete GetKLineRequest::default_instance_;
  delete GetKLineRequest_reflection_;
  delete GetKLineResponse::default_instance_;
  delete GetKLineResponse_reflection_;
  delete GetTimeKLineRequest::default_instance_;
  delete GetTimeKLineRequest_reflection_;
  delete GetTimeKLineResponse::default_instance_;
  delete GetTimeKLineResponse_reflection_;
}

void protobuf_AddDesc_kline_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013kline.proto\022\nQuoteProto\032\016ret_base.prot"
    "o\032\024public_message.proto\"m\n\017GetKLineReque"
    "st\022\022\n\nstock_name\030\001 \002(\t\022\022\n\nkline_type\030\002 \002"
    "(\005\022\022\n\nstart_time\030\003 \002(\005\022\r\n\005count\030\004 \002(\005\022\017\n"
    "\007is_desc\030\005 \002(\010\"\177\n\020GetKLineResponse\022\034\n\003re"
    "t\030\001 \002(\0132\017.QuoteProto.Ret\022%\n\nkline_info\030\002"
    " \003(\0132\021.QuoteProto.KLine\022\022\n\nstock_code\030\003 "
    "\001(\t\022\022\n\nkline_type\030\004 \001(\005\"=\n\023GetTimeKLineR"
    "equest\022\022\n\nstock_name\030\001 \002(\t\022\022\n\nstart_time"
    "\030\002 \002(\005\"\203\001\n\024GetTimeKLineResponse\022\034\n\003ret\030\001"
    " \002(\0132\017.QuoteProto.Ret\022%\n\nkline_info\030\002 \003("
    "\0132\021.QuoteProto.KLine\022\022\n\nstock_code\030\003 \001(\t"
    "\022\022\n\nkline_type\030\004 \001(\005", 500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kline.proto", &protobuf_RegisterTypes);
  GetKLineRequest::default_instance_ = new GetKLineRequest();
  GetKLineResponse::default_instance_ = new GetKLineResponse();
  GetTimeKLineRequest::default_instance_ = new GetTimeKLineRequest();
  GetTimeKLineResponse::default_instance_ = new GetTimeKLineResponse();
  GetKLineRequest::default_instance_->InitAsDefaultInstance();
  GetKLineResponse::default_instance_->InitAsDefaultInstance();
  GetTimeKLineRequest::default_instance_->InitAsDefaultInstance();
  GetTimeKLineResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kline_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kline_2eproto {
  StaticDescriptorInitializer_kline_2eproto() {
    protobuf_AddDesc_kline_2eproto();
  }
} static_descriptor_initializer_kline_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GetKLineRequest::kStockNameFieldNumber;
const int GetKLineRequest::kKlineTypeFieldNumber;
const int GetKLineRequest::kStartTimeFieldNumber;
const int GetKLineRequest::kCountFieldNumber;
const int GetKLineRequest::kIsDescFieldNumber;
#endif  // !_MSC_VER

GetKLineRequest::GetKLineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetKLineRequest::InitAsDefaultInstance() {
}

GetKLineRequest::GetKLineRequest(const GetKLineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetKLineRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kline_type_ = 0;
  start_time_ = 0;
  count_ = 0;
  is_desc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetKLineRequest::~GetKLineRequest() {
  SharedDtor();
}

void GetKLineRequest::SharedDtor() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (this != default_instance_) {
  }
}

void GetKLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetKLineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetKLineRequest_descriptor_;
}

const GetKLineRequest& GetKLineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kline_2eproto();  return *default_instance_;
}

GetKLineRequest* GetKLineRequest::default_instance_ = NULL;

GetKLineRequest* GetKLineRequest::New() const {
  return new GetKLineRequest;
}

void GetKLineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    kline_type_ = 0;
    start_time_ = 0;
    count_ = 0;
    is_desc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetKLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kline_type;
        break;
      }
      
      // required int32 kline_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kline_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kline_type_)));
          set_has_kline_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }
      
      // required int32 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }
      
      // required int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetKLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_name = 1;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_name(), output);
  }
  
  // required int32 kline_type = 2;
  if (has_kline_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kline_type(), output);
  }
  
  // required int32 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_time(), output);
  }
  
  // required int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }
  
  // required bool is_desc = 5;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetKLineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_name = 1;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_name(), target);
  }
  
  // required int32 kline_type = 2;
  if (has_kline_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kline_type(), target);
  }
  
  // required int32 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_time(), target);
  }
  
  // required int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }
  
  // required bool is_desc = 5;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetKLineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_name = 1;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // required int32 kline_type = 2;
    if (has_kline_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kline_type());
    }
    
    // required int32 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }
    
    // required int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // required bool is_desc = 5;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetKLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetKLineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetKLineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetKLineRequest::MergeFrom(const GetKLineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_kline_type()) {
      set_kline_type(from.kline_type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetKLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKLineRequest::CopyFrom(const GetKLineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKLineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void GetKLineRequest::Swap(GetKLineRequest* other) {
  if (other != this) {
    std::swap(stock_name_, other->stock_name_);
    std::swap(kline_type_, other->kline_type_);
    std::swap(start_time_, other->start_time_);
    std::swap(count_, other->count_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetKLineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetKLineRequest_descriptor_;
  metadata.reflection = GetKLineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetKLineResponse::kRetFieldNumber;
const int GetKLineResponse::kKlineInfoFieldNumber;
const int GetKLineResponse::kStockCodeFieldNumber;
const int GetKLineResponse::kKlineTypeFieldNumber;
#endif  // !_MSC_VER

GetKLineResponse::GetKLineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetKLineResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetKLineResponse::GetKLineResponse(const GetKLineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetKLineResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kline_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetKLineResponse::~GetKLineResponse() {
  SharedDtor();
}

void GetKLineResponse::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetKLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetKLineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetKLineResponse_descriptor_;
}

const GetKLineResponse& GetKLineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kline_2eproto();  return *default_instance_;
}

GetKLineResponse* GetKLineResponse::default_instance_ = NULL;

GetKLineResponse* GetKLineResponse::New() const {
  return new GetKLineResponse;
}

void GetKLineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    kline_type_ = 0;
  }
  kline_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetKLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kline_info;
        break;
      }
      
      // repeated .QuoteProto.KLine kline_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kline_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kline_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kline_info;
        if (input->ExpectTag(26)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kline_type;
        break;
      }
      
      // optional int32 kline_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kline_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kline_type_)));
          set_has_kline_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetKLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.KLine kline_info = 2;
  for (int i = 0; i < this->kline_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kline_info(i), output);
  }
  
  // optional string stock_code = 3;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_code(), output);
  }
  
  // optional int32 kline_type = 4;
  if (has_kline_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kline_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetKLineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.KLine kline_info = 2;
  for (int i = 0; i < this->kline_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kline_info(i), target);
  }
  
  // optional string stock_code = 3;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_code(), target);
  }
  
  // optional int32 kline_type = 4;
  if (has_kline_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kline_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetKLineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional string stock_code = 3;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional int32 kline_type = 4;
    if (has_kline_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kline_type());
    }
    
  }
  // repeated .QuoteProto.KLine kline_info = 2;
  total_size += 1 * this->kline_info_size();
  for (int i = 0; i < this->kline_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kline_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetKLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetKLineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetKLineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetKLineResponse::MergeFrom(const GetKLineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  kline_info_.MergeFrom(from.kline_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_kline_type()) {
      set_kline_type(from.kline_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetKLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetKLineResponse::CopyFrom(const GetKLineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKLineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < kline_info_size(); i++) {
    if (!this->kline_info(i).IsInitialized()) return false;
  }
  return true;
}

void GetKLineResponse::Swap(GetKLineResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    kline_info_.Swap(&other->kline_info_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(kline_type_, other->kline_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetKLineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetKLineResponse_descriptor_;
  metadata.reflection = GetKLineResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTimeKLineRequest::kStockNameFieldNumber;
const int GetTimeKLineRequest::kStartTimeFieldNumber;
#endif  // !_MSC_VER

GetTimeKLineRequest::GetTimeKLineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTimeKLineRequest::InitAsDefaultInstance() {
}

GetTimeKLineRequest::GetTimeKLineRequest(const GetTimeKLineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTimeKLineRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTimeKLineRequest::~GetTimeKLineRequest() {
  SharedDtor();
}

void GetTimeKLineRequest::SharedDtor() {
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (this != default_instance_) {
  }
}

void GetTimeKLineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTimeKLineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTimeKLineRequest_descriptor_;
}

const GetTimeKLineRequest& GetTimeKLineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kline_2eproto();  return *default_instance_;
}

GetTimeKLineRequest* GetTimeKLineRequest::default_instance_ = NULL;

GetTimeKLineRequest* GetTimeKLineRequest::New() const {
  return new GetTimeKLineRequest;
}

void GetTimeKLineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    start_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTimeKLineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }
      
      // required int32 start_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTimeKLineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_name = 1;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_name(), output);
  }
  
  // required int32 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTimeKLineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_name = 1;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_name(), target);
  }
  
  // required int32 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTimeKLineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_name = 1;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // required int32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTimeKLineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTimeKLineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTimeKLineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTimeKLineRequest::MergeFrom(const GetTimeKLineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTimeKLineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeKLineRequest::CopyFrom(const GetTimeKLineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeKLineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetTimeKLineRequest::Swap(GetTimeKLineRequest* other) {
  if (other != this) {
    std::swap(stock_name_, other->stock_name_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTimeKLineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTimeKLineRequest_descriptor_;
  metadata.reflection = GetTimeKLineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTimeKLineResponse::kRetFieldNumber;
const int GetTimeKLineResponse::kKlineInfoFieldNumber;
const int GetTimeKLineResponse::kStockCodeFieldNumber;
const int GetTimeKLineResponse::kKlineTypeFieldNumber;
#endif  // !_MSC_VER

GetTimeKLineResponse::GetTimeKLineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTimeKLineResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetTimeKLineResponse::GetTimeKLineResponse(const GetTimeKLineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTimeKLineResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kline_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTimeKLineResponse::~GetTimeKLineResponse() {
  SharedDtor();
}

void GetTimeKLineResponse::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetTimeKLineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTimeKLineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTimeKLineResponse_descriptor_;
}

const GetTimeKLineResponse& GetTimeKLineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kline_2eproto();  return *default_instance_;
}

GetTimeKLineResponse* GetTimeKLineResponse::default_instance_ = NULL;

GetTimeKLineResponse* GetTimeKLineResponse::New() const {
  return new GetTimeKLineResponse;
}

void GetTimeKLineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    kline_type_ = 0;
  }
  kline_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTimeKLineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kline_info;
        break;
      }
      
      // repeated .QuoteProto.KLine kline_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kline_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kline_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_kline_info;
        if (input->ExpectTag(26)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kline_type;
        break;
      }
      
      // optional int32 kline_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kline_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kline_type_)));
          set_has_kline_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTimeKLineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.KLine kline_info = 2;
  for (int i = 0; i < this->kline_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->kline_info(i), output);
  }
  
  // optional string stock_code = 3;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_code(), output);
  }
  
  // optional int32 kline_type = 4;
  if (has_kline_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kline_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTimeKLineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.KLine kline_info = 2;
  for (int i = 0; i < this->kline_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->kline_info(i), target);
  }
  
  // optional string stock_code = 3;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_code(), target);
  }
  
  // optional int32 kline_type = 4;
  if (has_kline_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kline_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTimeKLineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional string stock_code = 3;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional int32 kline_type = 4;
    if (has_kline_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kline_type());
    }
    
  }
  // repeated .QuoteProto.KLine kline_info = 2;
  total_size += 1 * this->kline_info_size();
  for (int i = 0; i < this->kline_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kline_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTimeKLineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTimeKLineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTimeKLineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTimeKLineResponse::MergeFrom(const GetTimeKLineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  kline_info_.MergeFrom(from.kline_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_kline_type()) {
      set_kline_type(from.kline_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTimeKLineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTimeKLineResponse::CopyFrom(const GetTimeKLineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTimeKLineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  for (int i = 0; i < kline_info_size(); i++) {
    if (!this->kline_info(i).IsInitialized()) return false;
  }
  return true;
}

void GetTimeKLineResponse::Swap(GetTimeKLineResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    kline_info_.Swap(&other->kline_info_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(kline_type_, other->kline_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTimeKLineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTimeKLineResponse_descriptor_;
  metadata.reflection = GetTimeKLineResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
