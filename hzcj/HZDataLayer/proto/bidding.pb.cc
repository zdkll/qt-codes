// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bidding.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* BatchGetBiddingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetBiddingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetBiddingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetBiddingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiddingOptionalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiddingOptionalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiddingOptionalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiddingOptionalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetBiddingBlockRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetBiddingBlockRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchGetBiddingBlockResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchGetBiddingBlockResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiddingBlockOptionalRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiddingBlockOptionalRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* BiddingBlockOptionalResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BiddingBlockOptionalResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBiddingQuoteKlineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBiddingQuoteKlineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBiddingQuoteKlineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBiddingQuoteKlineResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBiddingBlockKlineRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBiddingBlockKlineRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBiddingBlockKlineResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBiddingBlockKlineResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BiddingSortType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BiddingBlockSortType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bidding_2eproto() {
  protobuf_AddDesc_bidding_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bidding.proto");
  GOOGLE_CHECK(file != NULL);
  BatchGetBiddingRequest_descriptor_ = file->message_type(0);
  static const int BatchGetBiddingRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingRequest, sort_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingRequest, count_range_),
  };
  BatchGetBiddingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetBiddingRequest_descriptor_,
      BatchGetBiddingRequest::default_instance_,
      BatchGetBiddingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetBiddingRequest));
  BatchGetBiddingResponse_descriptor_ = file->message_type(1);
  static const int BatchGetBiddingResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingResponse, total_cnt_),
  };
  BatchGetBiddingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetBiddingResponse_descriptor_,
      BatchGetBiddingResponse::default_instance_,
      BatchGetBiddingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetBiddingResponse));
  BiddingOptionalRequest_descriptor_ = file->message_type(2);
  static const int BiddingOptionalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalRequest, stock_code_),
  };
  BiddingOptionalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiddingOptionalRequest_descriptor_,
      BiddingOptionalRequest::default_instance_,
      BiddingOptionalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiddingOptionalRequest));
  BiddingOptionalResponse_descriptor_ = file->message_type(3);
  static const int BiddingOptionalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalResponse, stk_),
  };
  BiddingOptionalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiddingOptionalResponse_descriptor_,
      BiddingOptionalResponse::default_instance_,
      BiddingOptionalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingOptionalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiddingOptionalResponse));
  BatchGetBiddingBlockRequest_descriptor_ = file->message_type(4);
  static const int BatchGetBiddingBlockRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockRequest, sort_field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockRequest, is_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockRequest, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockRequest, count_range_),
  };
  BatchGetBiddingBlockRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetBiddingBlockRequest_descriptor_,
      BatchGetBiddingBlockRequest::default_instance_,
      BatchGetBiddingBlockRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetBiddingBlockRequest));
  BatchGetBiddingBlockResponse_descriptor_ = file->message_type(5);
  static const int BatchGetBiddingBlockResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockResponse, stk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockResponse, total_cnt_),
  };
  BatchGetBiddingBlockResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchGetBiddingBlockResponse_descriptor_,
      BatchGetBiddingBlockResponse::default_instance_,
      BatchGetBiddingBlockResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchGetBiddingBlockResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchGetBiddingBlockResponse));
  BiddingBlockOptionalRequest_descriptor_ = file->message_type(6);
  static const int BiddingBlockOptionalRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalRequest, stock_code_),
  };
  BiddingBlockOptionalRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiddingBlockOptionalRequest_descriptor_,
      BiddingBlockOptionalRequest::default_instance_,
      BiddingBlockOptionalRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiddingBlockOptionalRequest));
  BiddingBlockOptionalResponse_descriptor_ = file->message_type(7);
  static const int BiddingBlockOptionalResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalResponse, stk_),
  };
  BiddingBlockOptionalResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BiddingBlockOptionalResponse_descriptor_,
      BiddingBlockOptionalResponse::default_instance_,
      BiddingBlockOptionalResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BiddingBlockOptionalResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BiddingBlockOptionalResponse));
  GetBiddingQuoteKlineRequest_descriptor_ = file->message_type(8);
  static const int GetBiddingQuoteKlineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineRequest, stock_code_),
  };
  GetBiddingQuoteKlineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBiddingQuoteKlineRequest_descriptor_,
      GetBiddingQuoteKlineRequest::default_instance_,
      GetBiddingQuoteKlineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBiddingQuoteKlineRequest));
  GetBiddingQuoteKlineResponse_descriptor_ = file->message_type(9);
  static const int GetBiddingQuoteKlineResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineResponse, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineResponse, stk_),
  };
  GetBiddingQuoteKlineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBiddingQuoteKlineResponse_descriptor_,
      GetBiddingQuoteKlineResponse::default_instance_,
      GetBiddingQuoteKlineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingQuoteKlineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBiddingQuoteKlineResponse));
  GetBiddingBlockKlineRequest_descriptor_ = file->message_type(10);
  static const int GetBiddingBlockKlineRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineRequest, stock_code_),
  };
  GetBiddingBlockKlineRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBiddingBlockKlineRequest_descriptor_,
      GetBiddingBlockKlineRequest::default_instance_,
      GetBiddingBlockKlineRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBiddingBlockKlineRequest));
  GetBiddingBlockKlineResponse_descriptor_ = file->message_type(11);
  static const int GetBiddingBlockKlineResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineResponse, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineResponse, stk_),
  };
  GetBiddingBlockKlineResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBiddingBlockKlineResponse_descriptor_,
      GetBiddingBlockKlineResponse::default_instance_,
      GetBiddingBlockKlineResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBiddingBlockKlineResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBiddingBlockKlineResponse));
  BiddingSortType_descriptor_ = file->enum_type(0);
  BiddingBlockSortType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bidding_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetBiddingRequest_descriptor_, &BatchGetBiddingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetBiddingResponse_descriptor_, &BatchGetBiddingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiddingOptionalRequest_descriptor_, &BiddingOptionalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiddingOptionalResponse_descriptor_, &BiddingOptionalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetBiddingBlockRequest_descriptor_, &BatchGetBiddingBlockRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchGetBiddingBlockResponse_descriptor_, &BatchGetBiddingBlockResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiddingBlockOptionalRequest_descriptor_, &BiddingBlockOptionalRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BiddingBlockOptionalResponse_descriptor_, &BiddingBlockOptionalResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBiddingQuoteKlineRequest_descriptor_, &GetBiddingQuoteKlineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBiddingQuoteKlineResponse_descriptor_, &GetBiddingQuoteKlineResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBiddingBlockKlineRequest_descriptor_, &GetBiddingBlockKlineRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBiddingBlockKlineResponse_descriptor_, &GetBiddingBlockKlineResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bidding_2eproto() {
  delete BatchGetBiddingRequest::default_instance_;
  delete BatchGetBiddingRequest_reflection_;
  delete BatchGetBiddingResponse::default_instance_;
  delete BatchGetBiddingResponse_reflection_;
  delete BiddingOptionalRequest::default_instance_;
  delete BiddingOptionalRequest_reflection_;
  delete BiddingOptionalResponse::default_instance_;
  delete BiddingOptionalResponse_reflection_;
  delete BatchGetBiddingBlockRequest::default_instance_;
  delete BatchGetBiddingBlockRequest_reflection_;
  delete BatchGetBiddingBlockResponse::default_instance_;
  delete BatchGetBiddingBlockResponse_reflection_;
  delete BiddingBlockOptionalRequest::default_instance_;
  delete BiddingBlockOptionalRequest_reflection_;
  delete BiddingBlockOptionalResponse::default_instance_;
  delete BiddingBlockOptionalResponse_reflection_;
  delete GetBiddingQuoteKlineRequest::default_instance_;
  delete GetBiddingQuoteKlineRequest_reflection_;
  delete GetBiddingQuoteKlineResponse::default_instance_;
  delete GetBiddingQuoteKlineResponse_reflection_;
  delete GetBiddingBlockKlineRequest::default_instance_;
  delete GetBiddingBlockKlineRequest_reflection_;
  delete GetBiddingBlockKlineResponse::default_instance_;
  delete GetBiddingBlockKlineResponse_reflection_;
}

void protobuf_AddDesc_bidding_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::QuoteProto::protobuf_AddDesc_ret_5fbase_2eproto();
  ::QuoteProto::protobuf_AddDesc_public_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rbidding.proto\022\nQuoteProto\032\016ret_base.pr"
    "oto\032\024public_message.proto\"~\n\026BatchGetBid"
    "dingRequest\022/\n\nsort_field\030\001 \002(\0162\033.QuoteP"
    "roto.BiddingSortType\022\017\n\007is_desc\030\002 \002(\010\022\r\n"
    "\005index\030\003 \002(\005\022\023\n\013count_range\030\004 \002(\005\"q\n\027Bat"
    "chGetBiddingResponse\022\034\n\003ret\030\001 \002(\0132\017.Quot"
    "eProto.Ret\022%\n\003stk\030\002 \003(\0132\030.QuoteProto.Bid"
    "ClientMsg\022\021\n\ttotal_cnt\030\003 \001(\005\",\n\026BiddingO"
    "ptionalRequest\022\022\n\nstock_code\030\001 \003(\t\"^\n\027Bi"
    "ddingOptionalResponse\022\034\n\003ret\030\001 \002(\0132\017.Quo"
    "teProto.Ret\022%\n\003stk\030\002 \003(\0132\030.QuoteProto.Bi"
    "dClientMsg\"\210\001\n\033BatchGetBiddingBlockReque"
    "st\0224\n\nsort_field\030\001 \002(\0162 .QuoteProto.Bidd"
    "ingBlockSortType\022\017\n\007is_desc\030\002 \002(\010\022\r\n\005ind"
    "ex\030\003 \002(\005\022\023\n\013count_range\030\004 \002(\005\"u\n\034BatchGe"
    "tBiddingBlockResponse\022\034\n\003ret\030\001 \002(\0132\017.Quo"
    "teProto.Ret\022$\n\003stk\030\002 \003(\0132\027.QuoteProto.Bi"
    "dBlockMsg\022\021\n\ttotal_cnt\030\003 \001(\005\"1\n\033BiddingB"
    "lockOptionalRequest\022\022\n\nstock_code\030\001 \003(\t\""
    "b\n\034BiddingBlockOptionalResponse\022\034\n\003ret\030\001"
    " \002(\0132\017.QuoteProto.Ret\022$\n\003stk\030\002 \003(\0132\027.Quo"
    "teProto.BidBlockMsg\"1\n\033GetBiddingQuoteKl"
    "ineRequest\022\022\n\nstock_code\030\001 \002(\t\"w\n\034GetBid"
    "dingQuoteKlineResponse\022\034\n\003ret\030\001 \002(\0132\017.Qu"
    "oteProto.Ret\022\022\n\nstock_code\030\002 \001(\t\022%\n\003stk\030"
    "\003 \003(\0132\030.QuoteProto.BidClientMsg\"1\n\033GetBi"
    "ddingBlockKlineRequest\022\022\n\nstock_code\030\001 \002"
    "(\t\"v\n\034GetBiddingBlockKlineResponse\022\034\n\003re"
    "t\030\001 \002(\0132\017.QuoteProto.Ret\022\022\n\nstock_code\030\002"
    " \001(\t\022$\n\003stk\030\003 \003(\0132\027.QuoteProto.BidBlockM"
    "sg*d\n\017BiddingSortType\022\014\n\010bid_fund\020\001\022\025\n\021b"
    "id_quantity_than\020\002\022\024\n\020bid_bidding_rise\020\003"
    "\022\026\n\022bid_yesterday_rate\020\004**\n\024BiddingBlock"
    "SortType\022\022\n\016bid_block_rate\020\001", 1348);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bidding.proto", &protobuf_RegisterTypes);
  BatchGetBiddingRequest::default_instance_ = new BatchGetBiddingRequest();
  BatchGetBiddingResponse::default_instance_ = new BatchGetBiddingResponse();
  BiddingOptionalRequest::default_instance_ = new BiddingOptionalRequest();
  BiddingOptionalResponse::default_instance_ = new BiddingOptionalResponse();
  BatchGetBiddingBlockRequest::default_instance_ = new BatchGetBiddingBlockRequest();
  BatchGetBiddingBlockResponse::default_instance_ = new BatchGetBiddingBlockResponse();
  BiddingBlockOptionalRequest::default_instance_ = new BiddingBlockOptionalRequest();
  BiddingBlockOptionalResponse::default_instance_ = new BiddingBlockOptionalResponse();
  GetBiddingQuoteKlineRequest::default_instance_ = new GetBiddingQuoteKlineRequest();
  GetBiddingQuoteKlineResponse::default_instance_ = new GetBiddingQuoteKlineResponse();
  GetBiddingBlockKlineRequest::default_instance_ = new GetBiddingBlockKlineRequest();
  GetBiddingBlockKlineResponse::default_instance_ = new GetBiddingBlockKlineResponse();
  BatchGetBiddingRequest::default_instance_->InitAsDefaultInstance();
  BatchGetBiddingResponse::default_instance_->InitAsDefaultInstance();
  BiddingOptionalRequest::default_instance_->InitAsDefaultInstance();
  BiddingOptionalResponse::default_instance_->InitAsDefaultInstance();
  BatchGetBiddingBlockRequest::default_instance_->InitAsDefaultInstance();
  BatchGetBiddingBlockResponse::default_instance_->InitAsDefaultInstance();
  BiddingBlockOptionalRequest::default_instance_->InitAsDefaultInstance();
  BiddingBlockOptionalResponse::default_instance_->InitAsDefaultInstance();
  GetBiddingQuoteKlineRequest::default_instance_->InitAsDefaultInstance();
  GetBiddingQuoteKlineResponse::default_instance_->InitAsDefaultInstance();
  GetBiddingBlockKlineRequest::default_instance_->InitAsDefaultInstance();
  GetBiddingBlockKlineResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bidding_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bidding_2eproto {
  StaticDescriptorInitializer_bidding_2eproto() {
    protobuf_AddDesc_bidding_2eproto();
  }
} static_descriptor_initializer_bidding_2eproto_;

const ::google::protobuf::EnumDescriptor* BiddingSortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiddingSortType_descriptor_;
}
bool BiddingSortType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BiddingBlockSortType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiddingBlockSortType_descriptor_;
}
bool BiddingBlockSortType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetBiddingRequest::kSortFieldFieldNumber;
const int BatchGetBiddingRequest::kIsDescFieldNumber;
const int BatchGetBiddingRequest::kIndexFieldNumber;
const int BatchGetBiddingRequest::kCountRangeFieldNumber;
#endif  // !_MSC_VER

BatchGetBiddingRequest::BatchGetBiddingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetBiddingRequest::InitAsDefaultInstance() {
}

BatchGetBiddingRequest::BatchGetBiddingRequest(const BatchGetBiddingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetBiddingRequest::SharedCtor() {
  _cached_size_ = 0;
  sort_field_ = 1;
  is_desc_ = false;
  index_ = 0;
  count_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetBiddingRequest::~BatchGetBiddingRequest() {
  SharedDtor();
}

void BatchGetBiddingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchGetBiddingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetBiddingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetBiddingRequest_descriptor_;
}

const BatchGetBiddingRequest& BatchGetBiddingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BatchGetBiddingRequest* BatchGetBiddingRequest::default_instance_ = NULL;

BatchGetBiddingRequest* BatchGetBiddingRequest::New() const {
  return new BatchGetBiddingRequest;
}

void BatchGetBiddingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_field_ = 1;
    is_desc_ = false;
    index_ = 0;
    count_range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetBiddingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.BiddingSortType sort_field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::BiddingSortType_IsValid(value)) {
            set_sort_field(static_cast< QuoteProto::BiddingSortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetBiddingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.BiddingSortType sort_field = 1;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sort_field(), output);
  }
  
  // required bool is_desc = 2;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_desc(), output);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // required int32 count_range = 4;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count_range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetBiddingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.BiddingSortType sort_field = 1;
  if (has_sort_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sort_field(), target);
  }
  
  // required bool is_desc = 2;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_desc(), target);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // required int32 count_range = 4;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count_range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetBiddingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.BiddingSortType sort_field = 1;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_field());
    }
    
    // required bool is_desc = 2;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 4;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetBiddingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetBiddingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetBiddingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetBiddingRequest::MergeFrom(const BatchGetBiddingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetBiddingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetBiddingRequest::CopyFrom(const BatchGetBiddingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetBiddingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void BatchGetBiddingRequest::Swap(BatchGetBiddingRequest* other) {
  if (other != this) {
    std::swap(sort_field_, other->sort_field_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetBiddingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetBiddingRequest_descriptor_;
  metadata.reflection = BatchGetBiddingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetBiddingResponse::kRetFieldNumber;
const int BatchGetBiddingResponse::kStkFieldNumber;
const int BatchGetBiddingResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

BatchGetBiddingResponse::BatchGetBiddingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetBiddingResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchGetBiddingResponse::BatchGetBiddingResponse(const BatchGetBiddingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetBiddingResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetBiddingResponse::~BatchGetBiddingResponse() {
  SharedDtor();
}

void BatchGetBiddingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchGetBiddingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetBiddingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetBiddingResponse_descriptor_;
}

const BatchGetBiddingResponse& BatchGetBiddingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BatchGetBiddingResponse* BatchGetBiddingResponse::default_instance_ = NULL;

BatchGetBiddingResponse* BatchGetBiddingResponse::New() const {
  return new BatchGetBiddingResponse;
}

void BatchGetBiddingResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetBiddingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.BidClientMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetBiddingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.BidClientMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetBiddingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.BidClientMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetBiddingResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.BidClientMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetBiddingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetBiddingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetBiddingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetBiddingResponse::MergeFrom(const BatchGetBiddingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetBiddingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetBiddingResponse::CopyFrom(const BatchGetBiddingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetBiddingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BatchGetBiddingResponse::Swap(BatchGetBiddingResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetBiddingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetBiddingResponse_descriptor_;
  metadata.reflection = BatchGetBiddingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiddingOptionalRequest::kStockCodeFieldNumber;
#endif  // !_MSC_VER

BiddingOptionalRequest::BiddingOptionalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BiddingOptionalRequest::InitAsDefaultInstance() {
}

BiddingOptionalRequest::BiddingOptionalRequest(const BiddingOptionalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BiddingOptionalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiddingOptionalRequest::~BiddingOptionalRequest() {
  SharedDtor();
}

void BiddingOptionalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BiddingOptionalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiddingOptionalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiddingOptionalRequest_descriptor_;
}

const BiddingOptionalRequest& BiddingOptionalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BiddingOptionalRequest* BiddingOptionalRequest::default_instance_ = NULL;

BiddingOptionalRequest* BiddingOptionalRequest::New() const {
  return new BiddingOptionalRequest;
}

void BiddingOptionalRequest::Clear() {
  stock_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiddingOptionalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code(0).data(), this->stock_code(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stock_code;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BiddingOptionalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stock_code(i).data(), this->stock_code(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BiddingOptionalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code(i).data(), this->stock_code(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stock_code(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BiddingOptionalRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string stock_code = 1;
  total_size += 1 * this->stock_code_size();
  for (int i = 0; i < this->stock_code_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stock_code(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiddingOptionalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiddingOptionalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiddingOptionalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiddingOptionalRequest::MergeFrom(const BiddingOptionalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_code_.MergeFrom(from.stock_code_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiddingOptionalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiddingOptionalRequest::CopyFrom(const BiddingOptionalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiddingOptionalRequest::IsInitialized() const {
  
  return true;
}

void BiddingOptionalRequest::Swap(BiddingOptionalRequest* other) {
  if (other != this) {
    stock_code_.Swap(&other->stock_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiddingOptionalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiddingOptionalRequest_descriptor_;
  metadata.reflection = BiddingOptionalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiddingOptionalResponse::kRetFieldNumber;
const int BiddingOptionalResponse::kStkFieldNumber;
#endif  // !_MSC_VER

BiddingOptionalResponse::BiddingOptionalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BiddingOptionalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BiddingOptionalResponse::BiddingOptionalResponse(const BiddingOptionalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BiddingOptionalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiddingOptionalResponse::~BiddingOptionalResponse() {
  SharedDtor();
}

void BiddingOptionalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BiddingOptionalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiddingOptionalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiddingOptionalResponse_descriptor_;
}

const BiddingOptionalResponse& BiddingOptionalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BiddingOptionalResponse* BiddingOptionalResponse::default_instance_ = NULL;

BiddingOptionalResponse* BiddingOptionalResponse::New() const {
  return new BiddingOptionalResponse;
}

void BiddingOptionalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiddingOptionalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.BidClientMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BiddingOptionalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.BidClientMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BiddingOptionalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.BidClientMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BiddingOptionalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.BidClientMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiddingOptionalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiddingOptionalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiddingOptionalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiddingOptionalResponse::MergeFrom(const BiddingOptionalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiddingOptionalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiddingOptionalResponse::CopyFrom(const BiddingOptionalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiddingOptionalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BiddingOptionalResponse::Swap(BiddingOptionalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiddingOptionalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiddingOptionalResponse_descriptor_;
  metadata.reflection = BiddingOptionalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetBiddingBlockRequest::kSortFieldFieldNumber;
const int BatchGetBiddingBlockRequest::kIsDescFieldNumber;
const int BatchGetBiddingBlockRequest::kIndexFieldNumber;
const int BatchGetBiddingBlockRequest::kCountRangeFieldNumber;
#endif  // !_MSC_VER

BatchGetBiddingBlockRequest::BatchGetBiddingBlockRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetBiddingBlockRequest::InitAsDefaultInstance() {
}

BatchGetBiddingBlockRequest::BatchGetBiddingBlockRequest(const BatchGetBiddingBlockRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetBiddingBlockRequest::SharedCtor() {
  _cached_size_ = 0;
  sort_field_ = 1;
  is_desc_ = false;
  index_ = 0;
  count_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetBiddingBlockRequest::~BatchGetBiddingBlockRequest() {
  SharedDtor();
}

void BatchGetBiddingBlockRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchGetBiddingBlockRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetBiddingBlockRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetBiddingBlockRequest_descriptor_;
}

const BatchGetBiddingBlockRequest& BatchGetBiddingBlockRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BatchGetBiddingBlockRequest* BatchGetBiddingBlockRequest::default_instance_ = NULL;

BatchGetBiddingBlockRequest* BatchGetBiddingBlockRequest::New() const {
  return new BatchGetBiddingBlockRequest;
}

void BatchGetBiddingBlockRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sort_field_ = 1;
    is_desc_ = false;
    index_ = 0;
    count_range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetBiddingBlockRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.BiddingBlockSortType sort_field = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::BiddingBlockSortType_IsValid(value)) {
            set_sort_field(static_cast< QuoteProto::BiddingBlockSortType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_desc;
        break;
      }
      
      // required bool is_desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_desc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_desc_)));
          set_has_is_desc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count_range;
        break;
      }
      
      // required int32 count_range = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_range_)));
          set_has_count_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetBiddingBlockRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.BiddingBlockSortType sort_field = 1;
  if (has_sort_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sort_field(), output);
  }
  
  // required bool is_desc = 2;
  if (has_is_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_desc(), output);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // required int32 count_range = 4;
  if (has_count_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count_range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetBiddingBlockRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.BiddingBlockSortType sort_field = 1;
  if (has_sort_field()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sort_field(), target);
  }
  
  // required bool is_desc = 2;
  if (has_is_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_desc(), target);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // required int32 count_range = 4;
  if (has_count_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count_range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetBiddingBlockRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.BiddingBlockSortType sort_field = 1;
    if (has_sort_field()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sort_field());
    }
    
    // required bool is_desc = 2;
    if (has_is_desc()) {
      total_size += 1 + 1;
    }
    
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 count_range = 4;
    if (has_count_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetBiddingBlockRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetBiddingBlockRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetBiddingBlockRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetBiddingBlockRequest::MergeFrom(const BatchGetBiddingBlockRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sort_field()) {
      set_sort_field(from.sort_field());
    }
    if (from.has_is_desc()) {
      set_is_desc(from.is_desc());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_count_range()) {
      set_count_range(from.count_range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetBiddingBlockRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetBiddingBlockRequest::CopyFrom(const BatchGetBiddingBlockRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetBiddingBlockRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void BatchGetBiddingBlockRequest::Swap(BatchGetBiddingBlockRequest* other) {
  if (other != this) {
    std::swap(sort_field_, other->sort_field_);
    std::swap(is_desc_, other->is_desc_);
    std::swap(index_, other->index_);
    std::swap(count_range_, other->count_range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetBiddingBlockRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetBiddingBlockRequest_descriptor_;
  metadata.reflection = BatchGetBiddingBlockRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchGetBiddingBlockResponse::kRetFieldNumber;
const int BatchGetBiddingBlockResponse::kStkFieldNumber;
const int BatchGetBiddingBlockResponse::kTotalCntFieldNumber;
#endif  // !_MSC_VER

BatchGetBiddingBlockResponse::BatchGetBiddingBlockResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchGetBiddingBlockResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BatchGetBiddingBlockResponse::BatchGetBiddingBlockResponse(const BatchGetBiddingBlockResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchGetBiddingBlockResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  total_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchGetBiddingBlockResponse::~BatchGetBiddingBlockResponse() {
  SharedDtor();
}

void BatchGetBiddingBlockResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BatchGetBiddingBlockResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchGetBiddingBlockResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchGetBiddingBlockResponse_descriptor_;
}

const BatchGetBiddingBlockResponse& BatchGetBiddingBlockResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BatchGetBiddingBlockResponse* BatchGetBiddingBlockResponse::default_instance_ = NULL;

BatchGetBiddingBlockResponse* BatchGetBiddingBlockResponse::New() const {
  return new BatchGetBiddingBlockResponse;
}

void BatchGetBiddingBlockResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    total_cnt_ = 0;
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchGetBiddingBlockResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.BidBlockMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectTag(24)) goto parse_total_cnt;
        break;
      }
      
      // optional int32 total_cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_cnt_)));
          set_has_total_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchGetBiddingBlockResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.BidBlockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_cnt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchGetBiddingBlockResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.BidBlockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  // optional int32 total_cnt = 3;
  if (has_total_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_cnt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchGetBiddingBlockResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional int32 total_cnt = 3;
    if (has_total_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_cnt());
    }
    
  }
  // repeated .QuoteProto.BidBlockMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchGetBiddingBlockResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchGetBiddingBlockResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchGetBiddingBlockResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchGetBiddingBlockResponse::MergeFrom(const BatchGetBiddingBlockResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_total_cnt()) {
      set_total_cnt(from.total_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchGetBiddingBlockResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchGetBiddingBlockResponse::CopyFrom(const BatchGetBiddingBlockResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchGetBiddingBlockResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BatchGetBiddingBlockResponse::Swap(BatchGetBiddingBlockResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(total_cnt_, other->total_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchGetBiddingBlockResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchGetBiddingBlockResponse_descriptor_;
  metadata.reflection = BatchGetBiddingBlockResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiddingBlockOptionalRequest::kStockCodeFieldNumber;
#endif  // !_MSC_VER

BiddingBlockOptionalRequest::BiddingBlockOptionalRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BiddingBlockOptionalRequest::InitAsDefaultInstance() {
}

BiddingBlockOptionalRequest::BiddingBlockOptionalRequest(const BiddingBlockOptionalRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BiddingBlockOptionalRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiddingBlockOptionalRequest::~BiddingBlockOptionalRequest() {
  SharedDtor();
}

void BiddingBlockOptionalRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BiddingBlockOptionalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiddingBlockOptionalRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiddingBlockOptionalRequest_descriptor_;
}

const BiddingBlockOptionalRequest& BiddingBlockOptionalRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BiddingBlockOptionalRequest* BiddingBlockOptionalRequest::default_instance_ = NULL;

BiddingBlockOptionalRequest* BiddingBlockOptionalRequest::New() const {
  return new BiddingBlockOptionalRequest;
}

void BiddingBlockOptionalRequest::Clear() {
  stock_code_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiddingBlockOptionalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code(0).data(), this->stock_code(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stock_code;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BiddingBlockOptionalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->stock_code(i).data(), this->stock_code(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BiddingBlockOptionalRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string stock_code = 1;
  for (int i = 0; i < this->stock_code_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code(i).data(), this->stock_code(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->stock_code(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BiddingBlockOptionalRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string stock_code = 1;
  total_size += 1 * this->stock_code_size();
  for (int i = 0; i < this->stock_code_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stock_code(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiddingBlockOptionalRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiddingBlockOptionalRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiddingBlockOptionalRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiddingBlockOptionalRequest::MergeFrom(const BiddingBlockOptionalRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  stock_code_.MergeFrom(from.stock_code_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiddingBlockOptionalRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiddingBlockOptionalRequest::CopyFrom(const BiddingBlockOptionalRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiddingBlockOptionalRequest::IsInitialized() const {
  
  return true;
}

void BiddingBlockOptionalRequest::Swap(BiddingBlockOptionalRequest* other) {
  if (other != this) {
    stock_code_.Swap(&other->stock_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiddingBlockOptionalRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiddingBlockOptionalRequest_descriptor_;
  metadata.reflection = BiddingBlockOptionalRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BiddingBlockOptionalResponse::kRetFieldNumber;
const int BiddingBlockOptionalResponse::kStkFieldNumber;
#endif  // !_MSC_VER

BiddingBlockOptionalResponse::BiddingBlockOptionalResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BiddingBlockOptionalResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

BiddingBlockOptionalResponse::BiddingBlockOptionalResponse(const BiddingBlockOptionalResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BiddingBlockOptionalResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BiddingBlockOptionalResponse::~BiddingBlockOptionalResponse() {
  SharedDtor();
}

void BiddingBlockOptionalResponse::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void BiddingBlockOptionalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BiddingBlockOptionalResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BiddingBlockOptionalResponse_descriptor_;
}

const BiddingBlockOptionalResponse& BiddingBlockOptionalResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

BiddingBlockOptionalResponse* BiddingBlockOptionalResponse::default_instance_ = NULL;

BiddingBlockOptionalResponse* BiddingBlockOptionalResponse::New() const {
  return new BiddingBlockOptionalResponse;
}

void BiddingBlockOptionalResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BiddingBlockOptionalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.BidBlockMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BiddingBlockOptionalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // repeated .QuoteProto.BidBlockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BiddingBlockOptionalResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // repeated .QuoteProto.BidBlockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BiddingBlockOptionalResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
  }
  // repeated .QuoteProto.BidBlockMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BiddingBlockOptionalResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BiddingBlockOptionalResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BiddingBlockOptionalResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BiddingBlockOptionalResponse::MergeFrom(const BiddingBlockOptionalResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BiddingBlockOptionalResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BiddingBlockOptionalResponse::CopyFrom(const BiddingBlockOptionalResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BiddingBlockOptionalResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void BiddingBlockOptionalResponse::Swap(BiddingBlockOptionalResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BiddingBlockOptionalResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BiddingBlockOptionalResponse_descriptor_;
  metadata.reflection = BiddingBlockOptionalResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBiddingQuoteKlineRequest::kStockCodeFieldNumber;
#endif  // !_MSC_VER

GetBiddingQuoteKlineRequest::GetBiddingQuoteKlineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBiddingQuoteKlineRequest::InitAsDefaultInstance() {
}

GetBiddingQuoteKlineRequest::GetBiddingQuoteKlineRequest(const GetBiddingQuoteKlineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBiddingQuoteKlineRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBiddingQuoteKlineRequest::~GetBiddingQuoteKlineRequest() {
  SharedDtor();
}

void GetBiddingQuoteKlineRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void GetBiddingQuoteKlineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBiddingQuoteKlineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBiddingQuoteKlineRequest_descriptor_;
}

const GetBiddingQuoteKlineRequest& GetBiddingQuoteKlineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

GetBiddingQuoteKlineRequest* GetBiddingQuoteKlineRequest::default_instance_ = NULL;

GetBiddingQuoteKlineRequest* GetBiddingQuoteKlineRequest::New() const {
  return new GetBiddingQuoteKlineRequest;
}

void GetBiddingQuoteKlineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBiddingQuoteKlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBiddingQuoteKlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBiddingQuoteKlineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBiddingQuoteKlineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBiddingQuoteKlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBiddingQuoteKlineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBiddingQuoteKlineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBiddingQuoteKlineRequest::MergeFrom(const GetBiddingQuoteKlineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBiddingQuoteKlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBiddingQuoteKlineRequest::CopyFrom(const GetBiddingQuoteKlineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBiddingQuoteKlineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBiddingQuoteKlineRequest::Swap(GetBiddingQuoteKlineRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBiddingQuoteKlineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBiddingQuoteKlineRequest_descriptor_;
  metadata.reflection = GetBiddingQuoteKlineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBiddingQuoteKlineResponse::kRetFieldNumber;
const int GetBiddingQuoteKlineResponse::kStockCodeFieldNumber;
const int GetBiddingQuoteKlineResponse::kStkFieldNumber;
#endif  // !_MSC_VER

GetBiddingQuoteKlineResponse::GetBiddingQuoteKlineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBiddingQuoteKlineResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetBiddingQuoteKlineResponse::GetBiddingQuoteKlineResponse(const GetBiddingQuoteKlineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBiddingQuoteKlineResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBiddingQuoteKlineResponse::~GetBiddingQuoteKlineResponse() {
  SharedDtor();
}

void GetBiddingQuoteKlineResponse::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetBiddingQuoteKlineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBiddingQuoteKlineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBiddingQuoteKlineResponse_descriptor_;
}

const GetBiddingQuoteKlineResponse& GetBiddingQuoteKlineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

GetBiddingQuoteKlineResponse* GetBiddingQuoteKlineResponse::default_instance_ = NULL;

GetBiddingQuoteKlineResponse* GetBiddingQuoteKlineResponse::New() const {
  return new GetBiddingQuoteKlineResponse;
}

void GetBiddingQuoteKlineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBiddingQuoteKlineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.BidClientMsg stk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBiddingQuoteKlineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_code(), output);
  }
  
  // repeated .QuoteProto.BidClientMsg stk = 3;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBiddingQuoteKlineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_code(), target);
  }
  
  // repeated .QuoteProto.BidClientMsg stk = 3;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBiddingQuoteKlineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional string stock_code = 2;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
  }
  // repeated .QuoteProto.BidClientMsg stk = 3;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBiddingQuoteKlineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBiddingQuoteKlineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBiddingQuoteKlineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBiddingQuoteKlineResponse::MergeFrom(const GetBiddingQuoteKlineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBiddingQuoteKlineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBiddingQuoteKlineResponse::CopyFrom(const GetBiddingQuoteKlineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBiddingQuoteKlineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void GetBiddingQuoteKlineResponse::Swap(GetBiddingQuoteKlineResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(stock_code_, other->stock_code_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBiddingQuoteKlineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBiddingQuoteKlineResponse_descriptor_;
  metadata.reflection = GetBiddingQuoteKlineResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBiddingBlockKlineRequest::kStockCodeFieldNumber;
#endif  // !_MSC_VER

GetBiddingBlockKlineRequest::GetBiddingBlockKlineRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBiddingBlockKlineRequest::InitAsDefaultInstance() {
}

GetBiddingBlockKlineRequest::GetBiddingBlockKlineRequest(const GetBiddingBlockKlineRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBiddingBlockKlineRequest::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBiddingBlockKlineRequest::~GetBiddingBlockKlineRequest() {
  SharedDtor();
}

void GetBiddingBlockKlineRequest::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
  }
}

void GetBiddingBlockKlineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBiddingBlockKlineRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBiddingBlockKlineRequest_descriptor_;
}

const GetBiddingBlockKlineRequest& GetBiddingBlockKlineRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

GetBiddingBlockKlineRequest* GetBiddingBlockKlineRequest::default_instance_ = NULL;

GetBiddingBlockKlineRequest* GetBiddingBlockKlineRequest::New() const {
  return new GetBiddingBlockKlineRequest;
}

void GetBiddingBlockKlineRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBiddingBlockKlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBiddingBlockKlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBiddingBlockKlineRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBiddingBlockKlineRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBiddingBlockKlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBiddingBlockKlineRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBiddingBlockKlineRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBiddingBlockKlineRequest::MergeFrom(const GetBiddingBlockKlineRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBiddingBlockKlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBiddingBlockKlineRequest::CopyFrom(const GetBiddingBlockKlineRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBiddingBlockKlineRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetBiddingBlockKlineRequest::Swap(GetBiddingBlockKlineRequest* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBiddingBlockKlineRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBiddingBlockKlineRequest_descriptor_;
  metadata.reflection = GetBiddingBlockKlineRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBiddingBlockKlineResponse::kRetFieldNumber;
const int GetBiddingBlockKlineResponse::kStockCodeFieldNumber;
const int GetBiddingBlockKlineResponse::kStkFieldNumber;
#endif  // !_MSC_VER

GetBiddingBlockKlineResponse::GetBiddingBlockKlineResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBiddingBlockKlineResponse::InitAsDefaultInstance() {
  ret_ = const_cast< ::QuoteProto::Ret*>(&::QuoteProto::Ret::default_instance());
}

GetBiddingBlockKlineResponse::GetBiddingBlockKlineResponse(const GetBiddingBlockKlineResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBiddingBlockKlineResponse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = NULL;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBiddingBlockKlineResponse::~GetBiddingBlockKlineResponse() {
  SharedDtor();
}

void GetBiddingBlockKlineResponse::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete ret_;
  }
}

void GetBiddingBlockKlineResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBiddingBlockKlineResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBiddingBlockKlineResponse_descriptor_;
}

const GetBiddingBlockKlineResponse& GetBiddingBlockKlineResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bidding_2eproto();  return *default_instance_;
}

GetBiddingBlockKlineResponse* GetBiddingBlockKlineResponse::default_instance_ = NULL;

GetBiddingBlockKlineResponse* GetBiddingBlockKlineResponse::New() const {
  return new GetBiddingBlockKlineResponse;
}

void GetBiddingBlockKlineResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != NULL) ret_->::QuoteProto::Ret::Clear();
    }
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBiddingBlockKlineResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.Ret ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.BidBlockMsg stk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBiddingBlockKlineResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ret(), output);
  }
  
  // optional string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_code(), output);
  }
  
  // repeated .QuoteProto.BidBlockMsg stk = 3;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBiddingBlockKlineResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.Ret ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ret(), target);
  }
  
  // optional string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_code(), target);
  }
  
  // repeated .QuoteProto.BidBlockMsg stk = 3;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBiddingBlockKlineResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.Ret ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }
    
    // optional string stock_code = 2;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
  }
  // repeated .QuoteProto.BidBlockMsg stk = 3;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBiddingBlockKlineResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBiddingBlockKlineResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBiddingBlockKlineResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBiddingBlockKlineResponse::MergeFrom(const GetBiddingBlockKlineResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      mutable_ret()->::QuoteProto::Ret::MergeFrom(from.ret());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBiddingBlockKlineResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBiddingBlockKlineResponse::CopyFrom(const GetBiddingBlockKlineResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBiddingBlockKlineResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void GetBiddingBlockKlineResponse::Swap(GetBiddingBlockKlineResponse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(stock_code_, other->stock_code_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBiddingBlockKlineResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBiddingBlockKlineResponse_descriptor_;
  metadata.reflection = GetBiddingBlockKlineResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
