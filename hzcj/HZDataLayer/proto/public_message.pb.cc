// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "public_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace QuoteProto {

namespace {

const ::google::protobuf::Descriptor* MsgMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockCodeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockCodeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPermissionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPermissionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPermissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPermissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockMmp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockMmp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockRiseFallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockRiseFallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RisestStockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RisestStockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* KLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zhubi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zhubi_reflection_ = NULL;
const ::google::protobuf::Descriptor* PeriodKLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PeriodKLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginKickInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginKickInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrdFeild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrdFeild_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyFeild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyFeild_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FundAbnormalMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FundAbnormalMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidBlockMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidBlockMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BidClientMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BidClientMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockFundAbnormalItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockFundAbnormalItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RiseFallMonitorNumMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RiseFallMonitorNumMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* RateMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RateMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShortMotionMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShortMotionMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FenJia_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FenJia_reflection_ = NULL;
const ::google::protobuf::Descriptor* MidAbnormalMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidAbnormalMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Markets_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuoteInfoStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuoteFilterFlag_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SvrType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FundAbnormalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserPermissionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KlineType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* emZhubiType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RFMonitorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShortMotionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ShortMotionClientType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MidAbnormalType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_public_5fmessage_2eproto() {
  protobuf_AddDesc_public_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "public_message.proto");
  GOOGLE_CHECK(file != NULL);
  MsgMask_descriptor_ = file->message_type(0);
  static const int MsgMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMask, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMask, mask2_),
  };
  MsgMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMask_descriptor_,
      MsgMask::default_instance_,
      MsgMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMask));
  StockCodeTable_descriptor_ = file->message_type(1);
  static const int StockCodeTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockCodeTable, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockCodeTable, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockCodeTable, stock_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockCodeTable, deal_status_),
  };
  StockCodeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockCodeTable_descriptor_,
      StockCodeTable::default_instance_,
      StockCodeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockCodeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockCodeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockCodeTable));
  UserPermissionItem_descriptor_ = file->message_type(2);
  static const int UserPermissionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionItem, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionItem, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionItem, end_time_),
  };
  UserPermissionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPermissionItem_descriptor_,
      UserPermissionItem::default_instance_,
      UserPermissionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPermissionItem));
  UserPermissionInfo_descriptor_ = file->message_type(3);
  static const int UserPermissionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionInfo, permissions_),
  };
  UserPermissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPermissionInfo_descriptor_,
      UserPermissionInfo::default_instance_,
      UserPermissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPermissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPermissionInfo));
  StockBase_descriptor_ = file->message_type(4);
  static const int StockBase_offsets_[47] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, last_pice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, pbv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, pre_close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, highest_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, lowest_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, cur_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, turnover_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, pes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, avg_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, committee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, cir_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, tot_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, cir_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, tot_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, np_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, wp_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, trade_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, buy_sell_buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, avg_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, rise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, fall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, flat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, ro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, roe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, upper_limit_rice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, down_limit_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, clear_sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, ped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, buy_sell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, speed_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, three_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, three_tuv_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, five_tuv_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, detail_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, rise_day_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, second_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, five_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, limit_up_),
  };
  StockBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockBase_descriptor_,
      StockBase::default_instance_,
      StockBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockBase));
  StockMmp_descriptor_ = file->message_type(5);
  static const int StockMmp_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_price3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_price4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_price5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_volume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_volume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_volume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_volume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, buy_volume5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_price1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_price2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_price3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_price4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_price5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_volume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_volume2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_volume3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_volume4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, sell_volume5_),
  };
  StockMmp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockMmp_descriptor_,
      StockMmp::default_instance_,
      StockMmp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMmp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockMmp));
  StockRiseFallInfo_descriptor_ = file->message_type(6);
  static const int StockRiseFallInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, block_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, greater_seven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, up_five_seven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, up_two_five_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, up_zero_two_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, down_zero_two_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, down_two_five_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, down_five_seven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, less_seven_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, limit_up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, up_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, limit_down_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, down_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, flat_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, stop_num_),
  };
  StockRiseFallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockRiseFallInfo_descriptor_,
      StockRiseFallInfo::default_instance_,
      StockRiseFallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockRiseFallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockRiseFallInfo));
  RisestStockInfo_descriptor_ = file->message_type(7);
  static const int RisestStockInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisestStockInfo, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisestStockInfo, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisestStockInfo, last_pice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisestStockInfo, pre_close_price_),
  };
  RisestStockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RisestStockInfo_descriptor_,
      RisestStockInfo::default_instance_,
      RisestStockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisestStockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RisestStockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RisestStockInfo));
  StockMsg_descriptor_ = file->message_type(8);
  static const int StockMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, is_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, stk_base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, stk_mmp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, block_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, risest_stock_),
  };
  StockMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockMsg_descriptor_,
      StockMsg::default_instance_,
      StockMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockMsg));
  BlockMsg_descriptor_ = file->message_type(9);
  static const int BlockMsg_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, block_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, pre_close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, highest_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, lowest_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, last_pice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, cir_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, tot_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, cir_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, tot_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, avg_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, turnover_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, np_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, wp_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, rise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, fall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, flat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, trade_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, speed_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, three_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, three_tuv_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, five_tuv_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, cur_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, detail_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, block_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, rise_day_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, five_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, limit_up_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, avg_price_),
  };
  BlockMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockMsg_descriptor_,
      BlockMsg::default_instance_,
      BlockMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockMsg));
  KLine_descriptor_ = file->message_type(10);
  static const int KLine_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, upsert_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, high_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, low_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, pre_close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, avg_price_),
  };
  KLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KLine_descriptor_,
      KLine::default_instance_,
      KLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KLine));
  Zhubi_descriptor_ = file->message_type(11);
  static const int Zhubi_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, access_way_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, turnover_),
  };
  Zhubi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zhubi_descriptor_,
      Zhubi::default_instance_,
      Zhubi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zhubi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zhubi));
  PeriodKLine_descriptor_ = file->message_type(12);
  static const int PeriodKLine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodKLine, kline_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodKLine, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodKLine, kline_info_),
  };
  PeriodKLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PeriodKLine_descriptor_,
      PeriodKLine::default_instance_,
      PeriodKLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodKLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PeriodKLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PeriodKLine));
  UserLoginInfo_descriptor_ = file->message_type(13);
  static const int UserLoginInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, offline_),
  };
  UserLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginInfo_descriptor_,
      UserLoginInfo::default_instance_,
      UserLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginInfo));
  UserLoginKickInfo_descriptor_ = file->message_type(14);
  static const int UserLoginKickInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginKickInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginKickInfo, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginKickInfo, kick_desc_),
  };
  UserLoginKickInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginKickInfo_descriptor_,
      UserLoginKickInfo::default_instance_,
      UserLoginKickInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginKickInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginKickInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginKickInfo));
  OrdFeild_descriptor_ = file->message_type(15);
  static const int OrdFeild_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdFeild, money_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdFeild, money_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdFeild, money_netput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdFeild, money_rate_),
  };
  OrdFeild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrdFeild_descriptor_,
      OrdFeild::default_instance_,
      OrdFeild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdFeild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrdFeild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrdFeild));
  MoneyFeild_descriptor_ = file->message_type(16);
  static const int MoneyFeild_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, last_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, pre_close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, auction_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, auction_turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, active_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, leader_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, maxord_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, bigord_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, midord_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, minord_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, avg_less_three_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, avg_less_five_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, leader_net_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, up_down_price_),
  };
  MoneyFeild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyFeild_descriptor_,
      MoneyFeild::default_instance_,
      MoneyFeild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyFeild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyFeild));
  MoneyMsg_descriptor_ = file->message_type(17);
  static const int MoneyMsg_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, stock_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, money_one_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, money_three_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, money_five_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, money_ten_day_),
  };
  MoneyMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyMsg_descriptor_,
      MoneyMsg::default_instance_,
      MoneyMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyMsg));
  FundAbnormalMsg_descriptor_ = file->message_type(18);
  static const int FundAbnormalMsg_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, stock_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, thirty_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, active_netput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, thirty_active_netput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, leader_netput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, avtive_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, leader_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, turnover_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, cir_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, ped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, three_avtive_netput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, three_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, five_avtive_netput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, five_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, last_pice_),
  };
  FundAbnormalMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FundAbnormalMsg_descriptor_,
      FundAbnormalMsg::default_instance_,
      FundAbnormalMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FundAbnormalMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FundAbnormalMsg));
  BidMsg_descriptor_ = file->message_type(19);
  static const int BidMsg_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, stock_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, bidding_rise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, main_funds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, bidding_quantity_than_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, bidding_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, bidding_turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, bidding_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, bidding_volume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, current_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, yesterday_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, trade_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, update_time_),
  };
  BidMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidMsg_descriptor_,
      BidMsg::default_instance_,
      BidMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidMsg));
  BidBlockMsg_descriptor_ = file->message_type(20);
  static const int BidBlockMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidBlockMsg, block_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidBlockMsg, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidBlockMsg, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidBlockMsg, update_time_sec_),
  };
  BidBlockMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidBlockMsg_descriptor_,
      BidBlockMsg::default_instance_,
      BidBlockMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidBlockMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidBlockMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidBlockMsg));
  BidClientMsg_descriptor_ = file->message_type(21);
  static const int BidClientMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, last_pice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, pre_close_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, upsert_time_),
  };
  BidClientMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BidClientMsg_descriptor_,
      BidClientMsg::default_instance_,
      BidClientMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BidClientMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BidClientMsg));
  BlockFundAbnormalItem_descriptor_ = file->message_type(22);
  static const int BlockFundAbnormalItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockFundAbnormalItem, block_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockFundAbnormalItem, stk_),
  };
  BlockFundAbnormalItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockFundAbnormalItem_descriptor_,
      BlockFundAbnormalItem::default_instance_,
      BlockFundAbnormalItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockFundAbnormalItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockFundAbnormalItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockFundAbnormalItem));
  RiseFallMonitorNumMsg_descriptor_ = file->message_type(23);
  static const int RiseFallMonitorNumMsg_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, real_time_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, natural_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, continuous_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, aword_plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, sealing_plate_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, fried_plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, yeaterday_limit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, yeaterday_high_open_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, yeaterday_profit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, yeaterday_continuous_limit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, yeaterday_continuous_high_open_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, yeaterday_continuous_profit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, update_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, trading_day_),
  };
  RiseFallMonitorNumMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RiseFallMonitorNumMsg_descriptor_,
      RiseFallMonitorNumMsg::default_instance_,
      RiseFallMonitorNumMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RiseFallMonitorNumMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RiseFallMonitorNumMsg));
  RateMsg_descriptor_ = file->message_type(24);
  static const int RateMsg_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, security_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, security_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, security_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, rise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, plate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, up_limit_rate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, continuous_up_limit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, continuous_lower_limit_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, up_limit_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, lower_limit_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, lower_limit_rate_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, fried_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, fried_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, main_funds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, to_up_limit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, to_lower_limit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, history_continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, update_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, tradingday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, last_price_),
  };
  RateMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RateMsg_descriptor_,
      RateMsg::default_instance_,
      RateMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RateMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RateMsg));
  ShortMotionMsg_descriptor_ = file->message_type(25);
  static const int ShortMotionMsg_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, short_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, update_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, detail_vol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, last_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, buy_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, buy_volume1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, sell_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, sell_volume1_),
  };
  ShortMotionMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShortMotionMsg_descriptor_,
      ShortMotionMsg::default_instance_,
      ShortMotionMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMotionMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShortMotionMsg));
  FenJia_descriptor_ = file->message_type(26);
  static const int FenJia_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FenJia, trading_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FenJia, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FenJia, buy_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FenJia, sell_volume_),
  };
  FenJia_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FenJia_descriptor_,
      FenJia::default_instance_,
      FenJia_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FenJia, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FenJia, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FenJia));
  MidAbnormalMsg_descriptor_ = file->message_type(27);
  static const int MidAbnormalMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, abnormal_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, stock_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, stock_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, last_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, turnover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, real_time_rate_),
  };
  MidAbnormalMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MidAbnormalMsg_descriptor_,
      MidAbnormalMsg::default_instance_,
      MidAbnormalMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidAbnormalMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MidAbnormalMsg));
  Markets_descriptor_ = file->enum_type(0);
  QuoteInfoStatus_descriptor_ = file->enum_type(1);
  QuoteFilterFlag_descriptor_ = file->enum_type(2);
  DeviceType_descriptor_ = file->enum_type(3);
  SvrType_descriptor_ = file->enum_type(4);
  FundAbnormalType_descriptor_ = file->enum_type(5);
  UserPermissionType_descriptor_ = file->enum_type(6);
  KlineType_descriptor_ = file->enum_type(7);
  emZhubiType_descriptor_ = file->enum_type(8);
  RFMonitorType_descriptor_ = file->enum_type(9);
  ShortMotionType_descriptor_ = file->enum_type(10);
  ShortMotionClientType_descriptor_ = file->enum_type(11);
  MidAbnormalType_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_public_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMask_descriptor_, &MsgMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockCodeTable_descriptor_, &StockCodeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPermissionItem_descriptor_, &UserPermissionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPermissionInfo_descriptor_, &UserPermissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockBase_descriptor_, &StockBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockMmp_descriptor_, &StockMmp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockRiseFallInfo_descriptor_, &StockRiseFallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RisestStockInfo_descriptor_, &RisestStockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockMsg_descriptor_, &StockMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockMsg_descriptor_, &BlockMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KLine_descriptor_, &KLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zhubi_descriptor_, &Zhubi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PeriodKLine_descriptor_, &PeriodKLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginInfo_descriptor_, &UserLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginKickInfo_descriptor_, &UserLoginKickInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrdFeild_descriptor_, &OrdFeild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyFeild_descriptor_, &MoneyFeild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyMsg_descriptor_, &MoneyMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FundAbnormalMsg_descriptor_, &FundAbnormalMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidMsg_descriptor_, &BidMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidBlockMsg_descriptor_, &BidBlockMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BidClientMsg_descriptor_, &BidClientMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockFundAbnormalItem_descriptor_, &BlockFundAbnormalItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RiseFallMonitorNumMsg_descriptor_, &RiseFallMonitorNumMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RateMsg_descriptor_, &RateMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShortMotionMsg_descriptor_, &ShortMotionMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FenJia_descriptor_, &FenJia::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MidAbnormalMsg_descriptor_, &MidAbnormalMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_public_5fmessage_2eproto() {
  delete MsgMask::default_instance_;
  delete MsgMask_reflection_;
  delete StockCodeTable::default_instance_;
  delete StockCodeTable_reflection_;
  delete UserPermissionItem::default_instance_;
  delete UserPermissionItem_reflection_;
  delete UserPermissionInfo::default_instance_;
  delete UserPermissionInfo_reflection_;
  delete StockBase::default_instance_;
  delete StockBase_reflection_;
  delete StockMmp::default_instance_;
  delete StockMmp_reflection_;
  delete StockRiseFallInfo::default_instance_;
  delete StockRiseFallInfo_reflection_;
  delete RisestStockInfo::default_instance_;
  delete RisestStockInfo_reflection_;
  delete StockMsg::default_instance_;
  delete StockMsg_reflection_;
  delete BlockMsg::default_instance_;
  delete BlockMsg_reflection_;
  delete KLine::default_instance_;
  delete KLine_reflection_;
  delete Zhubi::default_instance_;
  delete Zhubi_reflection_;
  delete PeriodKLine::default_instance_;
  delete PeriodKLine_reflection_;
  delete UserLoginInfo::default_instance_;
  delete UserLoginInfo_reflection_;
  delete UserLoginKickInfo::default_instance_;
  delete UserLoginKickInfo_reflection_;
  delete OrdFeild::default_instance_;
  delete OrdFeild_reflection_;
  delete MoneyFeild::default_instance_;
  delete MoneyFeild_reflection_;
  delete MoneyMsg::default_instance_;
  delete MoneyMsg_reflection_;
  delete FundAbnormalMsg::default_instance_;
  delete FundAbnormalMsg_reflection_;
  delete BidMsg::default_instance_;
  delete BidMsg_reflection_;
  delete BidBlockMsg::default_instance_;
  delete BidBlockMsg_reflection_;
  delete BidClientMsg::default_instance_;
  delete BidClientMsg_reflection_;
  delete BlockFundAbnormalItem::default_instance_;
  delete BlockFundAbnormalItem_reflection_;
  delete RiseFallMonitorNumMsg::default_instance_;
  delete RiseFallMonitorNumMsg_reflection_;
  delete RateMsg::default_instance_;
  delete RateMsg_reflection_;
  delete ShortMotionMsg::default_instance_;
  delete ShortMotionMsg_reflection_;
  delete FenJia::default_instance_;
  delete FenJia_reflection_;
  delete MidAbnormalMsg::default_instance_;
  delete MidAbnormalMsg_reflection_;
}

void protobuf_AddDesc_public_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024public_message.proto\022\nQuoteProto\"&\n\007Ms"
    "gMask\022\014\n\004mask\030\001 \001(\004\022\r\n\005mask2\030\002 \001(\004\"a\n\016St"
    "ockCodeTable\022\022\n\nstock_code\030\001 \002(\t\022\022\n\nstoc"
    "k_name\030\002 \002(\t\022\022\n\nstock_type\030\003 \002(\t\022\023\n\013deal"
    "_status\030\004 \002(\005\"G\n\022UserPermissionItem\022\013\n\003p"
    "id\030\001 \001(\005\022\022\n\nbegin_time\030\002 \001(\005\022\020\n\010end_time"
    "\030\003 \001(\005\"I\n\022UserPermissionInfo\0223\n\013permissi"
    "ons\030\001 \003(\0132\036.QuoteProto.UserPermissionIte"
    "m\"\210\007\n\tStockBase\022\014\n\004rate\030\001 \001(\002\022\021\n\tlast_pi"
    "ce\030\002 \001(\r\022\r\n\005ratio\030\004 \001(\002\022\013\n\003pbv\030\005 \001(\002\022\023\n\013"
    "trading_day\030\006 \001(\r\022\027\n\017pre_close_price\030\007 \001"
    "(\r\022\022\n\nopen_price\030\010 \001(\r\022\025\n\rhighest_price\030"
    "\t \001(\r\022\024\n\014lowest_price\030\n \001(\r\022\016\n\006volume\030\013 "
    "\001(\004\022\022\n\ncur_volume\030\014 \001(\004\022\025\n\rturnover_rate"
    "\030\r \001(\002\022\013\n\003pes\030\016 \001(\002\022\020\n\010turnover\030\017 \001(\004\022\021\n"
    "\tavg_price\030\020 \001(\r\022\023\n\013update_time\030\021 \001(\r\022\021\n"
    "\tcommittee\030\022 \001(\002\022\021\n\tcir_stock\030\023 \001(\004\022\021\n\tt"
    "ot_stock\030\024 \001(\004\022\021\n\tcir_value\030\025 \001(\004\022\021\n\ttot"
    "_value\030\026 \001(\004\022\021\n\tnp_volume\030\027 \001(\004\022\021\n\twp_vo"
    "lume\030\030 \001(\004\022\024\n\014trade_status\030\031 \001(\r\022\024\n\014buy_"
    "sell_buy\030\032 \001(\003\022\021\n\tavg_stock\030\033 \001(\004\022\014\n\004ris"
    "e\030\034 \001(\r\022\014\n\004fall\030\035 \001(\r\022\014\n\004flat\030\036 \001(\r\022\n\n\002r"
    "o\030  \001(\002\022\013\n\003roe\030! \001(\002\022\016\n\006profit\030\" \001(\002\022\030\n\020"
    "upper_limit_rice\030# \001(\r\022\030\n\020down_limit_pri"
    "ce\030$ \001(\r\022\021\n\tclear_sig\030% \001(\010\022\013\n\003ped\030& \001(\002"
    "\022\020\n\010buy_sell\030\' \001(\r\022\022\n\nspeed_rate\030* \001(\002\022\022"
    "\n\nthree_rate\030+ \001(\002\022\026\n\016three_tuv_rate\030, \001"
    "(\002\022\025\n\rfive_tuv_rate\030- \001(\002\022\025\n\rdetail_volu"
    "me\030. \001(\004\022\022\n\nblock_name\030/ \001(\t\022\024\n\014rise_day"
    "_num\0300 \001(\r\022\023\n\013second_rate\0301 \001(\002\022\021\n\tfive_"
    "rate\0302 \001(\002\022\020\n\010limit_up\0303 \001(\r\"\256\003\n\010StockMm"
    "p\022\022\n\nbuy_price1\030\001 \002(\r\022\022\n\nbuy_price2\030\002 \002("
    "\r\022\022\n\nbuy_price3\030\003 \002(\r\022\022\n\nbuy_price4\030\004 \002("
    "\r\022\022\n\nbuy_price5\030\005 \002(\r\022\023\n\013buy_volume1\030\006 \002"
    "(\r\022\023\n\013buy_volume2\030\007 \002(\r\022\023\n\013buy_volume3\030\010"
    " \002(\r\022\023\n\013buy_volume4\030\t \002(\r\022\023\n\013buy_volume5"
    "\030\n \002(\r\022\023\n\013sell_price1\030\013 \002(\r\022\023\n\013sell_pric"
    "e2\030\014 \002(\r\022\023\n\013sell_price3\030\r \002(\r\022\023\n\013sell_pr"
    "ice4\030\016 \002(\r\022\023\n\013sell_price5\030\017 \002(\r\022\024\n\014sell_"
    "volume1\030\020 \002(\r\022\024\n\014sell_volume2\030\021 \002(\r\022\024\n\014s"
    "ell_volume3\030\022 \002(\r\022\024\n\014sell_volume4\030\023 \002(\r\022"
    "\024\n\014sell_volume5\030\024 \002(\r\"\342\002\n\021StockRiseFallI"
    "nfo\022\022\n\nblock_code\030\001 \001(\t\022\022\n\nblock_name\030\002 "
    "\001(\t\022\025\n\rgreater_seven\030\003 \001(\r\022\025\n\rup_five_se"
    "ven\030\004 \001(\r\022\023\n\013up_two_five\030\005 \001(\r\022\023\n\013up_zer"
    "o_two\030\006 \001(\r\022\025\n\rdown_zero_two\030\007 \001(\r\022\025\n\rdo"
    "wn_two_five\030\010 \001(\r\022\027\n\017down_five_seven\030\t \001"
    "(\r\022\022\n\nless_seven\030\n \001(\r\022\024\n\014limit_up_num\030\013"
    " \001(\r\022\016\n\006up_num\030\014 \001(\r\022\026\n\016limit_down_num\030\r"
    " \001(\r\022\020\n\010down_num\030\016 \001(\r\022\020\n\010flat_num\030\017 \001(\r"
    "\022\020\n\010stop_num\030\020 \001(\r\"e\n\017RisestStockInfo\022\022\n"
    "\nstock_code\030\001 \001(\t\022\022\n\nstock_name\030\002 \001(\t\022\021\n"
    "\tlast_pice\030\003 \001(\r\022\027\n\017pre_close_price\030\004 \001("
    "\r\"\333\001\n\010StockMsg\022\022\n\nstock_code\030\001 \001(\t\022\022\n\nst"
    "ock_name\030\002 \001(\t\022\020\n\010is_block\030\003 \001(\010\022\'\n\010stk_"
    "base\030\004 \001(\0132\025.QuoteProto.StockBase\022%\n\007stk"
    "_mmp\030\005 \001(\0132\024.QuoteProto.StockMmp\022\022\n\nbloc"
    "k_type\030\006 \001(\t\0221\n\014risest_stock\030\007 \001(\0132\033.Quo"
    "teProto.RisestStockInfo\"\272\005\n\010BlockMsg\022\022\n\n"
    "block_code\030\001 \001(\t\022\022\n\nblock_name\030\002 \001(\t\022\027\n\017"
    "pre_close_price\030\003 \001(\r\022\022\n\nopen_price\030\004 \001("
    "\r\022\025\n\rhighest_price\030\005 \001(\r\022\024\n\014lowest_price"
    "\030\006 \001(\r\022\021\n\tlast_pice\030\007 \001(\r\022\016\n\006volume\030\n \001("
    "\004\022\020\n\010turnover\030\013 \001(\004\022\023\n\013update_time\030\014 \001(\r"
    "\022\021\n\tcir_stock\030\r \001(\004\022\021\n\ttot_stock\030\016 \001(\004\022\021"
    "\n\tcir_value\030\017 \001(\004\022\021\n\ttot_value\030\020 \001(\004\022\021\n\t"
    "avg_stock\030\021 \001(\004\022\025\n\rturnover_rate\030\022 \001(\002\022\021"
    "\n\tnp_volume\030\023 \001(\004\022\021\n\twp_volume\030\024 \001(\004\022\014\n\004"
    "rise\030\025 \001(\r\022\014\n\004fall\030\026 \001(\r\022\014\n\004flat\030\027 \001(\r\022\023"
    "\n\013trading_day\030\031 \001(\r\022\024\n\014trade_status\030\032 \001("
    "\r\022\022\n\nspeed_rate\030\033 \001(\002\022\022\n\nthree_rate\030\034 \001("
    "\002\022\026\n\016three_tuv_rate\030\035 \001(\002\022\025\n\rfive_tuv_ra"
    "te\030\036 \001(\002\022\r\n\005ratio\030\037 \001(\002\022\022\n\ncur_volume\030! "
    "\001(\004\022\025\n\rdetail_volume\030\" \001(\004\022\022\n\nblock_type"
    "\030# \001(\t\022\024\n\014rise_day_num\030$ \001(\r\022\021\n\tfive_rat"
    "e\0302 \001(\002\022\020\n\010limit_up\0303 \001(\r\022\021\n\tavg_price\0304"
    " \001(\r\"\344\001\n\005KLine\022\023\n\013trading_day\030\001 \002(\r\022\023\n\013u"
    "pdate_time\030\002 \002(\r\022\023\n\013upsert_time\030\003 \002(\r\022\022\n"
    "\nhigh_price\030\004 \002(\r\022\022\n\nopen_price\030\005 \002(\r\022\021\n"
    "\tlow_price\030\006 \002(\r\022\023\n\013close_price\030\007 \002(\r\022\016\n"
    "\006volume\030\010 \002(\004\022\020\n\010turnover\030\t \002(\004\022\027\n\017pre_c"
    "lose_price\030\n \002(\r\022\021\n\tavg_price\030\013 \002(\r\"v\n\005Z"
    "hubi\022\023\n\013trading_day\030\001 \002(\r\022\r\n\005price\030\003 \002(\r"
    "\022\016\n\006volume\030\004 \002(\004\022\022\n\naccess_way\030\005 \002(\r\022\023\n\013"
    "update_time\030\006 \002(\r\022\020\n\010turnover\030\007 \002(\004\"\\\n\013P"
    "eriodKLine\022\022\n\nkline_type\030\001 \002(\r\022\022\n\nstock_"
    "code\030\002 \002(\t\022%\n\nkline_info\030\003 \002(\0132\021.QuotePr"
    "oto.KLine\"Z\n\rUserLoginInfo\022\013\n\003uid\030\001 \002(\004\022"
    "+\n\013device_type\030\002 \002(\0162\026.QuoteProto.Device"
    "Type\022\017\n\007offline\030\003 \001(\010\"`\n\021UserLoginKickIn"
    "fo\022\013\n\003uid\030\001 \001(\004\022+\n\013device_type\030\002 \001(\0162\026.Q"
    "uoteProto.DeviceType\022\021\n\tkick_desc\030\003 \001(\t\""
    "_\n\010OrdFeild\022\023\n\013money_input\030\001 \001(\003\022\024\n\014mone"
    "y_output\030\002 \001(\003\022\024\n\014money_netput\030\003 \001(\003\022\022\n\n"
    "money_rate\030\004 \001(\002\"\367\003\n\nMoneyFeild\022\023\n\013tradi"
    "ng_day\030\001 \001(\r\022\022\n\nlast_price\030\002 \001(\r\022\027\n\017pre_"
    "close_price\030\003 \001(\r\022\014\n\004rate\030\004 \001(\002\022\026\n\016aucti"
    "on_volume\030\005 \001(\004\022\030\n\020auction_turnover\030\006 \001("
    "\004\022*\n\014active_money\030\007 \001(\0132\024.QuoteProto.Ord"
    "Feild\022*\n\014leader_money\030\010 \001(\0132\024.QuoteProto"
    ".OrdFeild\022*\n\014maxord_money\030\t \001(\0132\024.QuoteP"
    "roto.OrdFeild\022*\n\014bigord_money\030\n \001(\0132\024.Qu"
    "oteProto.OrdFeild\022*\n\014midord_money\030\013 \001(\0132"
    "\024.QuoteProto.OrdFeild\022*\n\014minord_money\030\014 "
    "\001(\0132\024.QuoteProto.OrdFeild\022\026\n\016avg_less_th"
    "ree\030\r \001(\002\022\025\n\ravg_less_five\030\016 \001(\002\022\031\n\021lead"
    "er_net_volume\030\017 \001(\002\022\025\n\rup_down_price\030\020 \001"
    "(\005\"\231\002\n\010MoneyMsg\022\022\n\nstock_code\030\001 \001(\t\022\022\n\ns"
    "tock_name\030\002 \001(\t\022\022\n\nblock_name\030\003 \001(\t\022\022\n\ns"
    "tock_type\030\004 \001(\t\022-\n\rmoney_one_day\030\005 \001(\0132\026"
    ".QuoteProto.MoneyFeild\022/\n\017money_three_da"
    "y\030\006 \001(\0132\026.QuoteProto.MoneyFeild\022.\n\016money"
    "_five_day\030\007 \001(\0132\026.QuoteProto.MoneyFeild\022"
    "-\n\rmoney_ten_day\030\010 \001(\0132\026.QuoteProto.Mone"
    "yFeild\"\263\003\n\017FundAbnormalMsg\022\022\n\nstock_code"
    "\030\001 \001(\t\022\022\n\nstock_name\030\002 \001(\t\022\022\n\nstock_type"
    "\030\003 \001(\t\022\022\n\nblock_name\030\004 \001(\t\022\014\n\004rate\030\005 \001(\002"
    "\022\023\n\013thirty_rate\030\006 \001(\002\022\025\n\ractive_netput\030\007"
    " \001(\003\022\034\n\024thirty_active_netput\030\010 \001(\003\022\025\n\rle"
    "ader_netput\030\t \001(\003\022\023\n\013avtive_rate\030\n \001(\002\022\023"
    "\n\013leader_rate\030\013 \001(\002\022\025\n\rturnover_rate\030\014 \001"
    "(\002\022\r\n\005ratio\030\r \001(\002\022\021\n\tcir_value\030\016 \001(\004\022\013\n\003"
    "ped\030\017 \001(\002\022\033\n\023three_avtive_netput\030\020 \001(\003\022\022"
    "\n\nthree_rate\030\021 \001(\002\022\032\n\022five_avtive_netput"
    "\030\022 \001(\003\022\021\n\tfive_rate\030\023 \001(\002\022\021\n\tlast_pice\030\024"
    " \001(\r\"\355\002\n\006BidMsg\022\022\n\nstock_code\030\001 \001(\t\022\022\n\ns"
    "tock_type\030\002 \001(\t\022\022\n\nstock_name\030\003 \001(\t\022\023\n\013t"
    "rading_day\030\004 \001(\r\022\024\n\014bidding_rise\030\005 \001(\002\022\022"
    "\n\nmain_funds\030\006 \001(\004\022\035\n\025bidding_quantity_t"
    "han\030\007 \001(\003\022\r\n\005plate\030\010 \001(\t\022\026\n\016bidding_volu"
    "me\030\t \001(\004\022\030\n\020bidding_turnover\030\n \001(\004\022\025\n\rbi"
    "dding_price\030\013 \001(\r\022\027\n\017bidding_volume1\030\014 \001"
    "(\004\022\025\n\rcurrent_value\030\r \001(\004\022\026\n\016yesterday_r"
    "ate\030\016 \001(\002\022\024\n\014trade_status\030\017 \001(\r\022\023\n\013updat"
    "e_time\030\020 \001(\r\"\\\n\013BidBlockMsg\022\022\n\nblock_cod"
    "e\030\001 \001(\t\022\022\n\nblock_name\030\002 \001(\t\022\014\n\004rate\030\003 \001("
    "\002\022\027\n\017update_time_sec\030\004 \001(\r\"\204\001\n\014BidClient"
    "Msg\022%\n\tbase_info\030\001 \001(\0132\022.QuoteProto.BidM"
    "sg\022\021\n\tlast_pice\030\002 \001(\r\022\014\n\004rate\030\003 \001(\002\022\027\n\017p"
    "re_close_price\030\004 \001(\r\022\023\n\013upsert_time\030\005 \001("
    "\004\"d\n\025BlockFundAbnormalItem\022(\n\nblock_info"
    "\030\001 \001(\0132\024.QuoteProto.StockMsg\022!\n\003stk\030\002 \003("
    "\0132\024.QuoteProto.StockMsg\"\256\003\n\025RiseFallMoni"
    "torNumMsg\022\025\n\rreal_time_num\030\001 \001(\005\022\023\n\013natu"
    "ral_num\030\002 \001(\r\022\026\n\016continuous_num\030\003 \001(\r\022\023\n"
    "\013aword_plate\030\004 \001(\r\022\032\n\022sealing_plate_rate"
    "\030\005 \001(\002\022\023\n\013fried_plate\030\006 \001(\r\022\034\n\024yeaterday"
    "_limit_rate\030\007 \001(\002\022 \n\030yeaterday_high_open"
    "_rate\030\010 \001(\002\022\035\n\025yeaterday_profit_rate\030\t \001"
    "(\005\022\'\n\037yeaterday_continuous_limit_rate\030\n "
    "\001(\002\022+\n#yeaterday_continuous_high_open_ra"
    "te\030\013 \001(\002\022(\n yeaterday_continuous_profit_"
    "rate\030\014 \001(\005\022\027\n\017update_time_sec\030\r \001(\r\022\023\n\013t"
    "rading_day\030\016 \001(\r\"\207\004\n\007RateMsg\022\024\n\014message_"
    "type\030\001 \001(\r\022\025\n\rsecurity_code\030\002 \001(\t\022\025\n\rsec"
    "urity_type\030\003 \001(\t\022\025\n\rsecurity_name\030\004 \001(\t\022"
    "\014\n\004rise\030\005 \001(\002\022\r\n\005plate\030\006 \001(\t\022\032\n\022up_limit"
    "_rate_time\030\007 \001(\r\022 \n\030continuous_up_limit_"
    "rate\030\010 \001(\t\022#\n\033continuous_lower_limit_rat"
    "e\030\t \001(\t\022\027\n\017up_limit_volume\030\n \001(\004\022\032\n\022lowe"
    "r_limit_volume\030\013 \001(\004\022\035\n\025lower_limit_rate"
    "_time\030\014 \001(\r\022\022\n\nfried_time\030\r \001(\r\022\021\n\tfried"
    "_num\030\016 \001(\r\022\022\n\nmain_funds\030\017 \001(\003\022\030\n\020to_up_"
    "limit_time\030\020 \001(\r\022\033\n\023to_lower_limit_time\030"
    "\021 \001(\r\022\032\n\022history_continuous\030\022 \001(\t\022\027\n\017upd"
    "ate_time_sec\030\023 \001(\r\022\022\n\ntradingday\030\024 \001(\r\022\022"
    "\n\nlast_price\030\025 \001(\r\"\233\002\n\016ShortMotionMsg\022\r\n"
    "\005index\030\001 \001(\r\022/\n\nshort_type\030\002 \001(\0162\033.Quote"
    "Proto.ShortMotionType\022\022\n\nstock_code\030\003 \001("
    "\t\022\022\n\nstock_name\030\004 \001(\t\022\027\n\017update_time_sec"
    "\030\005 \001(\r\022\022\n\ndetail_vol\030\006 \001(\004\022\014\n\004rate\030\007 \001(\002"
    "\022\022\n\nlast_price\030\010 \001(\005\022\022\n\nbuy_volume\030\t \001(\005"
    "\022\023\n\013buy_volume1\030\n \001(\005\022\023\n\013sell_volume\030\013 \001"
    "(\005\022\024\n\014sell_volume1\030\014 \001(\005\"U\n\006FenJia\022\023\n\013tr"
    "ading_day\030\001 \001(\r\022\r\n\005price\030\003 \001(\r\022\022\n\nbuy_vo"
    "lume\030\004 \001(\004\022\023\n\013sell_volume\030\005 \001(\004\"\335\001\n\016MidA"
    "bnormalMsg\0222\n\rabnormal_type\030\001 \002(\0162\033.Quot"
    "eProto.MidAbnormalType\022\022\n\nstock_code\030\002 \002"
    "(\t\022\022\n\nstock_name\030\003 \002(\t\022\023\n\013update_time\030\004 "
    "\002(\r\022\014\n\004rate\030\005 \002(\002\022\022\n\nlast_price\030\006 \002(\r\022\020\n"
    "\010turnover\030\007 \002(\004\022\016\n\006volume\030\010 \002(\004\022\026\n\016real_"
    "time_rate\030\t \002(\002*!\n\007Markets\022\006\n\002SH\020\001\022\006\n\002SZ"
    "\020\002\022\006\n\002HK\020\003*\221\001\n\017QuoteInfoStatus\022\016\n\nQuoteI"
    "nfoS\020\000\022\016\n\nQuoteInfoC\020\001\022\016\n\nQuoteInfoT\020\002\022\016"
    "\n\nQuoteInfoB\020\003\022\016\n\nQuoteInfoE\020\004\022\016\n\nQuoteI"
    "nfoP\020\005\022\016\n\nQuoteInfoD\020\006\022\016\n\nQuoteInfoZ\020\007*\375"
    "\001\n\017QuoteFilterFlag\022\r\n\tMarketAll\020\000\022\014\n\010Mar"
    "ketSZ\020\001\022\014\n\010MarketSH\020\002\022\014\n\010MarketCY\020\003\022\014\n\010M"
    "arketZX\020\004\022\014\n\010MarketFX\020\005\022\021\n\rBlockIndustry"
    "\020d\022\020\n\014BlockConcept\020e\022\017\n\013BlockRegion\020f\022\016\n"
    "\nBlockWhole\020g\022\014\n\007IndexSH\020\310\001\022\014\n\007IndexSZ\020\311"
    "\001\022\017\n\nIndexInner\020\312\001\022\020\n\013IndexOutter\020\313\001\022\020\n\013"
    "IndexStocks\020\314\001*`\n\nDeviceType\022\r\n\tdevice_p"
    "c\020\001\022\016\n\ndevice_web\020\002\022\022\n\016device_android\020\003\022"
    "\016\n\ndevice_ios\020\004\022\017\n\013device_ipad\020\005*\251\001\n\007Svr"
    "Type\022\022\n\016Svr_Type_Login\020\001\022\021\n\rSvr_Type_Con"
    "d\020\002\022\023\n\017Svr_Type_Search\020\003\022\024\n\020Svr_Type_Mon"
    "goDB\020\004\022\022\n\016Svr_Type_Quote\020\005\022\021\n\rSvr_Type_R"
    "ank\020\006\022\021\n\rSvr_Type_Calc\020\007\022\022\n\016Svr_Type_Tra"
    "ns\020\010*R\n\020FundAbnormalType\022\020\n\014FAT_abnormal"
    "\020\001\022\032\n\026FAT_first_increase_buy\020\002\022\020\n\014FAT_lo"
    "w_rise\020\003*\336\001\n\022UserPermissionType\022\n\n\006up_zb"
    "s\020\000\022\t\n\005up_yk\020\001\022\013\n\007up_tzyf\020\002\022\t\n\005up_zk\020\003\022\013"
    "\n\007up_tzxt\020\004\022\n\n\006up_dkx\020\005\022\013\n\007up_dpzs\020\006\022\013\n\007"
    "up_cjrl\020\007\022\013\n\007up_dxjj\020\010\022\013\n\007up_nrzg\020\t\022\013\n\007u"
    "p_hzyj\020\n\022\013\n\007up_cynx\020\013\022\013\n\007up_cljq\020\014\022\013\n\007up"
    "_jgjj\020\r\022\013\n\007up_jhjj\020\016\022\013\n\007up_xskx\020\017*\260\001\n\tKl"
    "ineType\022\024\n\020KLINE_PERIOD_MIN\020\001\022\025\n\021KLINE_P"
    "ERIOD_5MIN\020\005\022\026\n\022KLINE_PERIOD_15MIN\020\017\022\025\n\021"
    "KLINE_PERIOD_HOUR\020<\022\025\n\020KLINE_PERIOD_DAY\020"
    "\240\013\022\026\n\021KLINE_PERIOD_WEEK\020\340N\022\030\n\022KLINE_PERI"
    "OD_MONTH\020\300\321\002*9\n\013emZhubiType\022\024\n\020zhubi_typ"
    "e_total\020\001\022\024\n\020zhubi_type_money\020\002*\223\001\n\rRFMo"
    "nitorType\022\017\n\013RFM_type_zt\020\001\022\017\n\013RFM_type_d"
    "t\020\002\022\021\n\rRFM_type_zthb\020\003\022\021\n\rRFM_type_dtkb\020"
    "\004\022\017\n\013RFM_type_lb\020\005\022\017\n\013RFM_type_zb\020\006\022\030\n\024R"
    "FM_type_yestoday_zt\020\007*\312\002\n\017ShortMotionTyp"
    "e\022\023\n\017OrganizationEat\020\000\022\014\n\010LargeBid\020\001\022\020\n\014"
    "RocketLaunch\020\002\022\020\n\014RapidRebound\020\003\022\016\n\nHigh"
    "Diving\020\004\022\025\n\021AccelerateDecline\020\005\022\014\n\010Large"
    "Buy\020\006\022\r\n\tLargeSell\020\007\022\014\n\010LargeAsk\020\010\022\016\n\nUp"
    "perLimit\020\t\022\r\n\tDownLimit\020\n\022\022\n\016OpenUpperLi"
    "mit\020\013\022\021\n\rOpenDownLimit\020\014\022\023\n\017Organization"
    "Buy\020\r\022\024\n\020OrganizationSell\020\016\022\024\n\020Organizat"
    "ionSpit\020\017\022\n\n\006BuyNew\020\020\022\013\n\007SellNew\020\021*7\n\025Sh"
    "ortMotionClientType\022\016\n\nSMCT_Total\020\001\022\016\n\nS"
    "MCT_Money\020\002*\372\001\n\017MidAbnormalType\022\020\n\014Thirt"
    "yMinBuy\020\000\022\021\n\rThirtyMinSell\020\001\022\022\n\016MoneyMax"
    "OrdBuy\020\002\022\022\n\016MoneyBigOrdBuy\020\003\022\023\n\017MoneyMax"
    "OrdSell\020\004\022\023\n\017MoneyBigOrdSell\020\005\022\016\n\nUpFive"
    "Rate\020\006\022\020\n\014DownFiveRate\020\007\022\017\n\013UpLimitRate\020"
    "\010\022\021\n\rDownLimitRate\020\t\022\023\n\017OpenUpLimitRate\020"
    "\n\022\025\n\021OpenDownLimitRate\020\013", 9304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "public_message.proto", &protobuf_RegisterTypes);
  MsgMask::default_instance_ = new MsgMask();
  StockCodeTable::default_instance_ = new StockCodeTable();
  UserPermissionItem::default_instance_ = new UserPermissionItem();
  UserPermissionInfo::default_instance_ = new UserPermissionInfo();
  StockBase::default_instance_ = new StockBase();
  StockMmp::default_instance_ = new StockMmp();
  StockRiseFallInfo::default_instance_ = new StockRiseFallInfo();
  RisestStockInfo::default_instance_ = new RisestStockInfo();
  StockMsg::default_instance_ = new StockMsg();
  BlockMsg::default_instance_ = new BlockMsg();
  KLine::default_instance_ = new KLine();
  Zhubi::default_instance_ = new Zhubi();
  PeriodKLine::default_instance_ = new PeriodKLine();
  UserLoginInfo::default_instance_ = new UserLoginInfo();
  UserLoginKickInfo::default_instance_ = new UserLoginKickInfo();
  OrdFeild::default_instance_ = new OrdFeild();
  MoneyFeild::default_instance_ = new MoneyFeild();
  MoneyMsg::default_instance_ = new MoneyMsg();
  FundAbnormalMsg::default_instance_ = new FundAbnormalMsg();
  BidMsg::default_instance_ = new BidMsg();
  BidBlockMsg::default_instance_ = new BidBlockMsg();
  BidClientMsg::default_instance_ = new BidClientMsg();
  BlockFundAbnormalItem::default_instance_ = new BlockFundAbnormalItem();
  RiseFallMonitorNumMsg::default_instance_ = new RiseFallMonitorNumMsg();
  RateMsg::default_instance_ = new RateMsg();
  ShortMotionMsg::default_instance_ = new ShortMotionMsg();
  FenJia::default_instance_ = new FenJia();
  MidAbnormalMsg::default_instance_ = new MidAbnormalMsg();
  MsgMask::default_instance_->InitAsDefaultInstance();
  StockCodeTable::default_instance_->InitAsDefaultInstance();
  UserPermissionItem::default_instance_->InitAsDefaultInstance();
  UserPermissionInfo::default_instance_->InitAsDefaultInstance();
  StockBase::default_instance_->InitAsDefaultInstance();
  StockMmp::default_instance_->InitAsDefaultInstance();
  StockRiseFallInfo::default_instance_->InitAsDefaultInstance();
  RisestStockInfo::default_instance_->InitAsDefaultInstance();
  StockMsg::default_instance_->InitAsDefaultInstance();
  BlockMsg::default_instance_->InitAsDefaultInstance();
  KLine::default_instance_->InitAsDefaultInstance();
  Zhubi::default_instance_->InitAsDefaultInstance();
  PeriodKLine::default_instance_->InitAsDefaultInstance();
  UserLoginInfo::default_instance_->InitAsDefaultInstance();
  UserLoginKickInfo::default_instance_->InitAsDefaultInstance();
  OrdFeild::default_instance_->InitAsDefaultInstance();
  MoneyFeild::default_instance_->InitAsDefaultInstance();
  MoneyMsg::default_instance_->InitAsDefaultInstance();
  FundAbnormalMsg::default_instance_->InitAsDefaultInstance();
  BidMsg::default_instance_->InitAsDefaultInstance();
  BidBlockMsg::default_instance_->InitAsDefaultInstance();
  BidClientMsg::default_instance_->InitAsDefaultInstance();
  BlockFundAbnormalItem::default_instance_->InitAsDefaultInstance();
  RiseFallMonitorNumMsg::default_instance_->InitAsDefaultInstance();
  RateMsg::default_instance_->InitAsDefaultInstance();
  ShortMotionMsg::default_instance_->InitAsDefaultInstance();
  FenJia::default_instance_->InitAsDefaultInstance();
  MidAbnormalMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_public_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_public_5fmessage_2eproto {
  StaticDescriptorInitializer_public_5fmessage_2eproto() {
    protobuf_AddDesc_public_5fmessage_2eproto();
  }
} static_descriptor_initializer_public_5fmessage_2eproto_;

const ::google::protobuf::EnumDescriptor* Markets_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Markets_descriptor_;
}
bool Markets_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuoteInfoStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteInfoStatus_descriptor_;
}
bool QuoteInfoStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuoteFilterFlag_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuoteFilterFlag_descriptor_;
}
bool QuoteFilterFlag_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
    case 103:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SvrType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SvrType_descriptor_;
}
bool SvrType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FundAbnormalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FundAbnormalType_descriptor_;
}
bool FundAbnormalType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserPermissionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPermissionType_descriptor_;
}
bool UserPermissionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KlineType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KlineType_descriptor_;
}
bool KlineType_IsValid(int value) {
  switch(value) {
    case 1:
    case 5:
    case 15:
    case 60:
    case 1440:
    case 10080:
    case 43200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* emZhubiType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emZhubiType_descriptor_;
}
bool emZhubiType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RFMonitorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RFMonitorType_descriptor_;
}
bool RFMonitorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShortMotionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMotionType_descriptor_;
}
bool ShortMotionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ShortMotionClientType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMotionClientType_descriptor_;
}
bool ShortMotionClientType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MidAbnormalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidAbnormalType_descriptor_;
}
bool MidAbnormalType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMask::kMaskFieldNumber;
const int MsgMask::kMask2FieldNumber;
#endif  // !_MSC_VER

MsgMask::MsgMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgMask::InitAsDefaultInstance() {
}

MsgMask::MsgMask(const MsgMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgMask::SharedCtor() {
  _cached_size_ = 0;
  mask_ = GOOGLE_ULONGLONG(0);
  mask2_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMask::~MsgMask() {
  SharedDtor();
}

void MsgMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMask_descriptor_;
}

const MsgMask& MsgMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

MsgMask* MsgMask::default_instance_ = NULL;

MsgMask* MsgMask::New() const {
  return new MsgMask;
}

void MsgMask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mask_ = GOOGLE_ULONGLONG(0);
    mask2_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mask2;
        break;
      }
      
      // optional uint64 mask2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mask2_)));
          set_has_mask2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mask = 1;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mask(), output);
  }
  
  // optional uint64 mask2 = 2;
  if (has_mask2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mask2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mask = 1;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mask(), target);
  }
  
  // optional uint64 mask2 = 2;
  if (has_mask2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mask2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mask = 1;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mask());
    }
    
    // optional uint64 mask2 = 2;
    if (has_mask2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mask2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMask::MergeFrom(const MsgMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_mask2()) {
      set_mask2(from.mask2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMask::CopyFrom(const MsgMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMask::IsInitialized() const {
  
  return true;
}

void MsgMask::Swap(MsgMask* other) {
  if (other != this) {
    std::swap(mask_, other->mask_);
    std::swap(mask2_, other->mask2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMask_descriptor_;
  metadata.reflection = MsgMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockCodeTable::kStockCodeFieldNumber;
const int StockCodeTable::kStockNameFieldNumber;
const int StockCodeTable::kStockTypeFieldNumber;
const int StockCodeTable::kDealStatusFieldNumber;
#endif  // !_MSC_VER

StockCodeTable::StockCodeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockCodeTable::InitAsDefaultInstance() {
}

StockCodeTable::StockCodeTable(const StockCodeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockCodeTable::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deal_status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockCodeTable::~StockCodeTable() {
  SharedDtor();
}

void StockCodeTable::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_type_;
  }
  if (this != default_instance_) {
  }
}

void StockCodeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockCodeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockCodeTable_descriptor_;
}

const StockCodeTable& StockCodeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

StockCodeTable* StockCodeTable::default_instance_ = NULL;

StockCodeTable* StockCodeTable::New() const {
  return new StockCodeTable;
}

void StockCodeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    if (has_stock_type()) {
      if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
        stock_type_->clear();
      }
    }
    deal_status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockCodeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_name;
        break;
      }
      
      // required string stock_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_type;
        break;
      }
      
      // required string stock_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_type().data(), this->stock_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_deal_status;
        break;
      }
      
      // required int32 deal_status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deal_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deal_status_)));
          set_has_deal_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockCodeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // required string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_name(), output);
  }
  
  // required string stock_type = 3;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_type(), output);
  }
  
  // required int32 deal_status = 4;
  if (has_deal_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deal_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockCodeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // required string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_name(), target);
  }
  
  // required string stock_type = 3;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_type(), target);
  }
  
  // required int32 deal_status = 4;
  if (has_deal_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deal_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockCodeTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required string stock_name = 2;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // required string stock_type = 3;
    if (has_stock_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_type());
    }
    
    // required int32 deal_status = 4;
    if (has_deal_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deal_status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockCodeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockCodeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockCodeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockCodeTable::MergeFrom(const StockCodeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_stock_type()) {
      set_stock_type(from.stock_type());
    }
    if (from.has_deal_status()) {
      set_deal_status(from.deal_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockCodeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockCodeTable::CopyFrom(const StockCodeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCodeTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void StockCodeTable::Swap(StockCodeTable* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(stock_type_, other->stock_type_);
    std::swap(deal_status_, other->deal_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockCodeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockCodeTable_descriptor_;
  metadata.reflection = StockCodeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPermissionItem::kPidFieldNumber;
const int UserPermissionItem::kBeginTimeFieldNumber;
const int UserPermissionItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

UserPermissionItem::UserPermissionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPermissionItem::InitAsDefaultInstance() {
}

UserPermissionItem::UserPermissionItem(const UserPermissionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPermissionItem::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  begin_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPermissionItem::~UserPermissionItem() {
  SharedDtor();
}

void UserPermissionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserPermissionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPermissionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPermissionItem_descriptor_;
}

const UserPermissionItem& UserPermissionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

UserPermissionItem* UserPermissionItem::default_instance_ = NULL;

UserPermissionItem* UserPermissionItem::New() const {
  return new UserPermissionItem;
}

void UserPermissionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    begin_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPermissionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin_time;
        break;
      }
      
      // optional int32 begin_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end_time;
        break;
      }
      
      // optional int32 end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPermissionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  // optional int32 begin_time = 2;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_time(), output);
  }
  
  // optional int32 end_time = 3;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPermissionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  // optional int32 begin_time = 2;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_time(), target);
  }
  
  // optional int32 end_time = 3;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPermissionItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional int32 begin_time = 2;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_time());
    }
    
    // optional int32 end_time = 3;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPermissionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPermissionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPermissionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPermissionItem::MergeFrom(const UserPermissionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPermissionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPermissionItem::CopyFrom(const UserPermissionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPermissionItem::IsInitialized() const {
  
  return true;
}

void UserPermissionItem::Swap(UserPermissionItem* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPermissionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPermissionItem_descriptor_;
  metadata.reflection = UserPermissionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPermissionInfo::kPermissionsFieldNumber;
#endif  // !_MSC_VER

UserPermissionInfo::UserPermissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPermissionInfo::InitAsDefaultInstance() {
}

UserPermissionInfo::UserPermissionInfo(const UserPermissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPermissionInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPermissionInfo::~UserPermissionInfo() {
  SharedDtor();
}

void UserPermissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserPermissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPermissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPermissionInfo_descriptor_;
}

const UserPermissionInfo& UserPermissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

UserPermissionInfo* UserPermissionInfo::default_instance_ = NULL;

UserPermissionInfo* UserPermissionInfo::New() const {
  return new UserPermissionInfo;
}

void UserPermissionInfo::Clear() {
  permissions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPermissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuoteProto.UserPermissionItem permissions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_permissions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_permissions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_permissions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPermissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuoteProto.UserPermissionItem permissions = 1;
  for (int i = 0; i < this->permissions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->permissions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPermissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuoteProto.UserPermissionItem permissions = 1;
  for (int i = 0; i < this->permissions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->permissions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPermissionInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .QuoteProto.UserPermissionItem permissions = 1;
  total_size += 1 * this->permissions_size();
  for (int i = 0; i < this->permissions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->permissions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPermissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPermissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPermissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPermissionInfo::MergeFrom(const UserPermissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  permissions_.MergeFrom(from.permissions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPermissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPermissionInfo::CopyFrom(const UserPermissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPermissionInfo::IsInitialized() const {
  
  return true;
}

void UserPermissionInfo::Swap(UserPermissionInfo* other) {
  if (other != this) {
    permissions_.Swap(&other->permissions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPermissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPermissionInfo_descriptor_;
  metadata.reflection = UserPermissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockBase::kRateFieldNumber;
const int StockBase::kLastPiceFieldNumber;
const int StockBase::kRatioFieldNumber;
const int StockBase::kPbvFieldNumber;
const int StockBase::kTradingDayFieldNumber;
const int StockBase::kPreClosePriceFieldNumber;
const int StockBase::kOpenPriceFieldNumber;
const int StockBase::kHighestPriceFieldNumber;
const int StockBase::kLowestPriceFieldNumber;
const int StockBase::kVolumeFieldNumber;
const int StockBase::kCurVolumeFieldNumber;
const int StockBase::kTurnoverRateFieldNumber;
const int StockBase::kPesFieldNumber;
const int StockBase::kTurnoverFieldNumber;
const int StockBase::kAvgPriceFieldNumber;
const int StockBase::kUpdateTimeFieldNumber;
const int StockBase::kCommitteeFieldNumber;
const int StockBase::kCirStockFieldNumber;
const int StockBase::kTotStockFieldNumber;
const int StockBase::kCirValueFieldNumber;
const int StockBase::kTotValueFieldNumber;
const int StockBase::kNpVolumeFieldNumber;
const int StockBase::kWpVolumeFieldNumber;
const int StockBase::kTradeStatusFieldNumber;
const int StockBase::kBuySellBuyFieldNumber;
const int StockBase::kAvgStockFieldNumber;
const int StockBase::kRiseFieldNumber;
const int StockBase::kFallFieldNumber;
const int StockBase::kFlatFieldNumber;
const int StockBase::kRoFieldNumber;
const int StockBase::kRoeFieldNumber;
const int StockBase::kProfitFieldNumber;
const int StockBase::kUpperLimitRiceFieldNumber;
const int StockBase::kDownLimitPriceFieldNumber;
const int StockBase::kClearSigFieldNumber;
const int StockBase::kPedFieldNumber;
const int StockBase::kBuySellFieldNumber;
const int StockBase::kSpeedRateFieldNumber;
const int StockBase::kThreeRateFieldNumber;
const int StockBase::kThreeTuvRateFieldNumber;
const int StockBase::kFiveTuvRateFieldNumber;
const int StockBase::kDetailVolumeFieldNumber;
const int StockBase::kBlockNameFieldNumber;
const int StockBase::kRiseDayNumFieldNumber;
const int StockBase::kSecondRateFieldNumber;
const int StockBase::kFiveRateFieldNumber;
const int StockBase::kLimitUpFieldNumber;
#endif  // !_MSC_VER

StockBase::StockBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockBase::InitAsDefaultInstance() {
}

StockBase::StockBase(const StockBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockBase::SharedCtor() {
  _cached_size_ = 0;
  rate_ = 0;
  last_pice_ = 0u;
  ratio_ = 0;
  pbv_ = 0;
  trading_day_ = 0u;
  pre_close_price_ = 0u;
  open_price_ = 0u;
  highest_price_ = 0u;
  lowest_price_ = 0u;
  volume_ = GOOGLE_ULONGLONG(0);
  cur_volume_ = GOOGLE_ULONGLONG(0);
  turnover_rate_ = 0;
  pes_ = 0;
  turnover_ = GOOGLE_ULONGLONG(0);
  avg_price_ = 0u;
  update_time_ = 0u;
  committee_ = 0;
  cir_stock_ = GOOGLE_ULONGLONG(0);
  tot_stock_ = GOOGLE_ULONGLONG(0);
  cir_value_ = GOOGLE_ULONGLONG(0);
  tot_value_ = GOOGLE_ULONGLONG(0);
  np_volume_ = GOOGLE_ULONGLONG(0);
  wp_volume_ = GOOGLE_ULONGLONG(0);
  trade_status_ = 0u;
  buy_sell_buy_ = GOOGLE_LONGLONG(0);
  avg_stock_ = GOOGLE_ULONGLONG(0);
  rise_ = 0u;
  fall_ = 0u;
  flat_ = 0u;
  ro_ = 0;
  roe_ = 0;
  profit_ = 0;
  upper_limit_rice_ = 0u;
  down_limit_price_ = 0u;
  clear_sig_ = false;
  ped_ = 0;
  buy_sell_ = 0u;
  speed_rate_ = 0;
  three_rate_ = 0;
  three_tuv_rate_ = 0;
  five_tuv_rate_ = 0;
  detail_volume_ = GOOGLE_ULONGLONG(0);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rise_day_num_ = 0u;
  second_rate_ = 0;
  five_rate_ = 0;
  limit_up_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockBase::~StockBase() {
  SharedDtor();
}

void StockBase::SharedDtor() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (this != default_instance_) {
  }
}

void StockBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockBase_descriptor_;
}

const StockBase& StockBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

StockBase* StockBase::default_instance_ = NULL;

StockBase* StockBase::New() const {
  return new StockBase;
}

void StockBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rate_ = 0;
    last_pice_ = 0u;
    ratio_ = 0;
    pbv_ = 0;
    trading_day_ = 0u;
    pre_close_price_ = 0u;
    open_price_ = 0u;
    highest_price_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lowest_price_ = 0u;
    volume_ = GOOGLE_ULONGLONG(0);
    cur_volume_ = GOOGLE_ULONGLONG(0);
    turnover_rate_ = 0;
    pes_ = 0;
    turnover_ = GOOGLE_ULONGLONG(0);
    avg_price_ = 0u;
    update_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    committee_ = 0;
    cir_stock_ = GOOGLE_ULONGLONG(0);
    tot_stock_ = GOOGLE_ULONGLONG(0);
    cir_value_ = GOOGLE_ULONGLONG(0);
    tot_value_ = GOOGLE_ULONGLONG(0);
    np_volume_ = GOOGLE_ULONGLONG(0);
    wp_volume_ = GOOGLE_ULONGLONG(0);
    trade_status_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    buy_sell_buy_ = GOOGLE_LONGLONG(0);
    avg_stock_ = GOOGLE_ULONGLONG(0);
    rise_ = 0u;
    fall_ = 0u;
    flat_ = 0u;
    ro_ = 0;
    roe_ = 0;
    profit_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    upper_limit_rice_ = 0u;
    down_limit_price_ = 0u;
    clear_sig_ = false;
    ped_ = 0;
    buy_sell_ = 0u;
    speed_rate_ = 0;
    three_rate_ = 0;
    three_tuv_rate_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    five_tuv_rate_ = 0;
    detail_volume_ = GOOGLE_ULONGLONG(0);
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    rise_day_num_ = 0u;
    second_rate_ = 0;
    five_rate_ = 0;
    limit_up_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float rate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_pice;
        break;
      }
      
      // optional uint32 last_pice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_pice_)));
          set_has_last_pice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_ratio;
        break;
      }
      
      // optional float ratio = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_pbv;
        break;
      }
      
      // optional float pbv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pbv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pbv_)));
          set_has_pbv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trading_day;
        break;
      }
      
      // optional uint32 trading_day = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pre_close_price;
        break;
      }
      
      // optional uint32 pre_close_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_open_price;
        break;
      }
      
      // optional uint32 open_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_price_)));
          set_has_open_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_highest_price;
        break;
      }
      
      // optional uint32 highest_price = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_price_)));
          set_has_highest_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lowest_price;
        break;
      }
      
      // optional uint32 lowest_price = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowest_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_price_)));
          set_has_lowest_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_volume;
        break;
      }
      
      // optional uint64 volume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cur_volume;
        break;
      }
      
      // optional uint64 cur_volume = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_volume_)));
          set_has_cur_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_turnover_rate;
        break;
      }
      
      // optional float turnover_rate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnover_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnover_rate_)));
          set_has_turnover_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_pes;
        break;
      }
      
      // optional float pes = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pes_)));
          set_has_pes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_turnover;
        break;
      }
      
      // optional uint64 turnover = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_avg_price;
        break;
      }
      
      // optional uint32 avg_price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_price_)));
          set_has_avg_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_update_time;
        break;
      }
      
      // optional uint32 update_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_committee;
        break;
      }
      
      // optional float committee = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_committee:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &committee_)));
          set_has_committee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cir_stock;
        break;
      }
      
      // optional uint64 cir_stock = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cir_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cir_stock_)));
          set_has_cir_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tot_stock;
        break;
      }
      
      // optional uint64 tot_stock = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tot_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_stock_)));
          set_has_tot_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_cir_value;
        break;
      }
      
      // optional uint64 cir_value = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cir_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cir_value_)));
          set_has_cir_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_tot_value;
        break;
      }
      
      // optional uint64 tot_value = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tot_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_value_)));
          set_has_tot_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_np_volume;
        break;
      }
      
      // optional uint64 np_volume = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_np_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &np_volume_)));
          set_has_np_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_wp_volume;
        break;
      }
      
      // optional uint64 wp_volume = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wp_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wp_volume_)));
          set_has_wp_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_trade_status;
        break;
      }
      
      // optional uint32 trade_status = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_status_)));
          set_has_trade_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_buy_sell_buy;
        break;
      }
      
      // optional int64 buy_sell_buy = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_sell_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buy_sell_buy_)));
          set_has_buy_sell_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_avg_stock;
        break;
      }
      
      // optional uint64 avg_stock = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avg_stock_)));
          set_has_avg_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_rise;
        break;
      }
      
      // optional uint32 rise = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rise_)));
          set_has_rise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_fall;
        break;
      }
      
      // optional uint32 fall = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fall_)));
          set_has_fall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_flat;
        break;
      }
      
      // optional uint32 flat = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flat_)));
          set_has_flat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_ro;
        break;
      }
      
      // optional float ro = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ro_)));
          set_has_ro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_roe;
        break;
      }
      
      // optional float roe = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_roe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roe_)));
          set_has_roe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_profit;
        break;
      }
      
      // optional float profit = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_upper_limit_rice;
        break;
      }
      
      // optional uint32 upper_limit_rice = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upper_limit_rice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upper_limit_rice_)));
          set_has_upper_limit_rice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_down_limit_price;
        break;
      }
      
      // optional uint32 down_limit_price = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_limit_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_limit_price_)));
          set_has_down_limit_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_clear_sig;
        break;
      }
      
      // optional bool clear_sig = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear_sig:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_sig_)));
          set_has_clear_sig();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_ped;
        break;
      }
      
      // optional float ped = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ped_)));
          set_has_ped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_buy_sell;
        break;
      }
      
      // optional uint32 buy_sell = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_sell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_sell_)));
          set_has_buy_sell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(341)) goto parse_speed_rate;
        break;
      }
      
      // optional float speed_rate = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_rate_)));
          set_has_speed_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_three_rate;
        break;
      }
      
      // optional float three_rate = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_three_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &three_rate_)));
          set_has_three_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(357)) goto parse_three_tuv_rate;
        break;
      }
      
      // optional float three_tuv_rate = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_three_tuv_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &three_tuv_rate_)));
          set_has_three_tuv_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(365)) goto parse_five_tuv_rate;
        break;
      }
      
      // optional float five_tuv_rate = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_five_tuv_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &five_tuv_rate_)));
          set_has_five_tuv_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_detail_volume;
        break;
      }
      
      // optional uint64 detail_volume = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detail_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &detail_volume_)));
          set_has_detail_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_rise_day_num;
        break;
      }
      
      // optional uint32 rise_day_num = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rise_day_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rise_day_num_)));
          set_has_rise_day_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(397)) goto parse_second_rate;
        break;
      }
      
      // optional float second_rate = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_second_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &second_rate_)));
          set_has_second_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_five_rate;
        break;
      }
      
      // optional float five_rate = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_five_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &five_rate_)));
          set_has_five_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_limit_up;
        break;
      }
      
      // optional uint32 limit_up = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_up_)));
          set_has_limit_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float rate = 1;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->rate(), output);
  }
  
  // optional uint32 last_pice = 2;
  if (has_last_pice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_pice(), output);
  }
  
  // optional float ratio = 4;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ratio(), output);
  }
  
  // optional float pbv = 5;
  if (has_pbv()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pbv(), output);
  }
  
  // optional uint32 trading_day = 6;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->trading_day(), output);
  }
  
  // optional uint32 pre_close_price = 7;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pre_close_price(), output);
  }
  
  // optional uint32 open_price = 8;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->open_price(), output);
  }
  
  // optional uint32 highest_price = 9;
  if (has_highest_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->highest_price(), output);
  }
  
  // optional uint32 lowest_price = 10;
  if (has_lowest_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lowest_price(), output);
  }
  
  // optional uint64 volume = 11;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->volume(), output);
  }
  
  // optional uint64 cur_volume = 12;
  if (has_cur_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->cur_volume(), output);
  }
  
  // optional float turnover_rate = 13;
  if (has_turnover_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->turnover_rate(), output);
  }
  
  // optional float pes = 14;
  if (has_pes()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->pes(), output);
  }
  
  // optional uint64 turnover = 15;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->turnover(), output);
  }
  
  // optional uint32 avg_price = 16;
  if (has_avg_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->avg_price(), output);
  }
  
  // optional uint32 update_time = 17;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->update_time(), output);
  }
  
  // optional float committee = 18;
  if (has_committee()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->committee(), output);
  }
  
  // optional uint64 cir_stock = 19;
  if (has_cir_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->cir_stock(), output);
  }
  
  // optional uint64 tot_stock = 20;
  if (has_tot_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->tot_stock(), output);
  }
  
  // optional uint64 cir_value = 21;
  if (has_cir_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->cir_value(), output);
  }
  
  // optional uint64 tot_value = 22;
  if (has_tot_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->tot_value(), output);
  }
  
  // optional uint64 np_volume = 23;
  if (has_np_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->np_volume(), output);
  }
  
  // optional uint64 wp_volume = 24;
  if (has_wp_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->wp_volume(), output);
  }
  
  // optional uint32 trade_status = 25;
  if (has_trade_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->trade_status(), output);
  }
  
  // optional int64 buy_sell_buy = 26;
  if (has_buy_sell_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->buy_sell_buy(), output);
  }
  
  // optional uint64 avg_stock = 27;
  if (has_avg_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->avg_stock(), output);
  }
  
  // optional uint32 rise = 28;
  if (has_rise()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->rise(), output);
  }
  
  // optional uint32 fall = 29;
  if (has_fall()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->fall(), output);
  }
  
  // optional uint32 flat = 30;
  if (has_flat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->flat(), output);
  }
  
  // optional float ro = 32;
  if (has_ro()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->ro(), output);
  }
  
  // optional float roe = 33;
  if (has_roe()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->roe(), output);
  }
  
  // optional float profit = 34;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->profit(), output);
  }
  
  // optional uint32 upper_limit_rice = 35;
  if (has_upper_limit_rice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->upper_limit_rice(), output);
  }
  
  // optional uint32 down_limit_price = 36;
  if (has_down_limit_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->down_limit_price(), output);
  }
  
  // optional bool clear_sig = 37;
  if (has_clear_sig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->clear_sig(), output);
  }
  
  // optional float ped = 38;
  if (has_ped()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->ped(), output);
  }
  
  // optional uint32 buy_sell = 39;
  if (has_buy_sell()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->buy_sell(), output);
  }
  
  // optional float speed_rate = 42;
  if (has_speed_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->speed_rate(), output);
  }
  
  // optional float three_rate = 43;
  if (has_three_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->three_rate(), output);
  }
  
  // optional float three_tuv_rate = 44;
  if (has_three_tuv_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->three_tuv_rate(), output);
  }
  
  // optional float five_tuv_rate = 45;
  if (has_five_tuv_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->five_tuv_rate(), output);
  }
  
  // optional uint64 detail_volume = 46;
  if (has_detail_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(46, this->detail_volume(), output);
  }
  
  // optional string block_name = 47;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->block_name(), output);
  }
  
  // optional uint32 rise_day_num = 48;
  if (has_rise_day_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->rise_day_num(), output);
  }
  
  // optional float second_rate = 49;
  if (has_second_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->second_rate(), output);
  }
  
  // optional float five_rate = 50;
  if (has_five_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->five_rate(), output);
  }
  
  // optional uint32 limit_up = 51;
  if (has_limit_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->limit_up(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float rate = 1;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->rate(), target);
  }
  
  // optional uint32 last_pice = 2;
  if (has_last_pice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_pice(), target);
  }
  
  // optional float ratio = 4;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ratio(), target);
  }
  
  // optional float pbv = 5;
  if (has_pbv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pbv(), target);
  }
  
  // optional uint32 trading_day = 6;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->trading_day(), target);
  }
  
  // optional uint32 pre_close_price = 7;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pre_close_price(), target);
  }
  
  // optional uint32 open_price = 8;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->open_price(), target);
  }
  
  // optional uint32 highest_price = 9;
  if (has_highest_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->highest_price(), target);
  }
  
  // optional uint32 lowest_price = 10;
  if (has_lowest_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lowest_price(), target);
  }
  
  // optional uint64 volume = 11;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->volume(), target);
  }
  
  // optional uint64 cur_volume = 12;
  if (has_cur_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->cur_volume(), target);
  }
  
  // optional float turnover_rate = 13;
  if (has_turnover_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->turnover_rate(), target);
  }
  
  // optional float pes = 14;
  if (has_pes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->pes(), target);
  }
  
  // optional uint64 turnover = 15;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->turnover(), target);
  }
  
  // optional uint32 avg_price = 16;
  if (has_avg_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->avg_price(), target);
  }
  
  // optional uint32 update_time = 17;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->update_time(), target);
  }
  
  // optional float committee = 18;
  if (has_committee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->committee(), target);
  }
  
  // optional uint64 cir_stock = 19;
  if (has_cir_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->cir_stock(), target);
  }
  
  // optional uint64 tot_stock = 20;
  if (has_tot_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->tot_stock(), target);
  }
  
  // optional uint64 cir_value = 21;
  if (has_cir_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->cir_value(), target);
  }
  
  // optional uint64 tot_value = 22;
  if (has_tot_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->tot_value(), target);
  }
  
  // optional uint64 np_volume = 23;
  if (has_np_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->np_volume(), target);
  }
  
  // optional uint64 wp_volume = 24;
  if (has_wp_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->wp_volume(), target);
  }
  
  // optional uint32 trade_status = 25;
  if (has_trade_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->trade_status(), target);
  }
  
  // optional int64 buy_sell_buy = 26;
  if (has_buy_sell_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->buy_sell_buy(), target);
  }
  
  // optional uint64 avg_stock = 27;
  if (has_avg_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->avg_stock(), target);
  }
  
  // optional uint32 rise = 28;
  if (has_rise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->rise(), target);
  }
  
  // optional uint32 fall = 29;
  if (has_fall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->fall(), target);
  }
  
  // optional uint32 flat = 30;
  if (has_flat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->flat(), target);
  }
  
  // optional float ro = 32;
  if (has_ro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->ro(), target);
  }
  
  // optional float roe = 33;
  if (has_roe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->roe(), target);
  }
  
  // optional float profit = 34;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->profit(), target);
  }
  
  // optional uint32 upper_limit_rice = 35;
  if (has_upper_limit_rice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->upper_limit_rice(), target);
  }
  
  // optional uint32 down_limit_price = 36;
  if (has_down_limit_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->down_limit_price(), target);
  }
  
  // optional bool clear_sig = 37;
  if (has_clear_sig()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->clear_sig(), target);
  }
  
  // optional float ped = 38;
  if (has_ped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->ped(), target);
  }
  
  // optional uint32 buy_sell = 39;
  if (has_buy_sell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->buy_sell(), target);
  }
  
  // optional float speed_rate = 42;
  if (has_speed_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(42, this->speed_rate(), target);
  }
  
  // optional float three_rate = 43;
  if (has_three_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->three_rate(), target);
  }
  
  // optional float three_tuv_rate = 44;
  if (has_three_tuv_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(44, this->three_tuv_rate(), target);
  }
  
  // optional float five_tuv_rate = 45;
  if (has_five_tuv_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->five_tuv_rate(), target);
  }
  
  // optional uint64 detail_volume = 46;
  if (has_detail_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(46, this->detail_volume(), target);
  }
  
  // optional string block_name = 47;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->block_name(), target);
  }
  
  // optional uint32 rise_day_num = 48;
  if (has_rise_day_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->rise_day_num(), target);
  }
  
  // optional float second_rate = 49;
  if (has_second_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(49, this->second_rate(), target);
  }
  
  // optional float five_rate = 50;
  if (has_five_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->five_rate(), target);
  }
  
  // optional uint32 limit_up = 51;
  if (has_limit_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->limit_up(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockBase::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float rate = 1;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 last_pice = 2;
    if (has_last_pice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_pice());
    }
    
    // optional float ratio = 4;
    if (has_ratio()) {
      total_size += 1 + 4;
    }
    
    // optional float pbv = 5;
    if (has_pbv()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 trading_day = 6;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // optional uint32 pre_close_price = 7;
    if (has_pre_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_close_price());
    }
    
    // optional uint32 open_price = 8;
    if (has_open_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_price());
    }
    
    // optional uint32 highest_price = 9;
    if (has_highest_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_price());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 lowest_price = 10;
    if (has_lowest_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowest_price());
    }
    
    // optional uint64 volume = 11;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }
    
    // optional uint64 cur_volume = 12;
    if (has_cur_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_volume());
    }
    
    // optional float turnover_rate = 13;
    if (has_turnover_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float pes = 14;
    if (has_pes()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 turnover = 15;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->turnover());
    }
    
    // optional uint32 avg_price = 16;
    if (has_avg_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_price());
    }
    
    // optional uint32 update_time = 17;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float committee = 18;
    if (has_committee()) {
      total_size += 2 + 4;
    }
    
    // optional uint64 cir_stock = 19;
    if (has_cir_stock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cir_stock());
    }
    
    // optional uint64 tot_stock = 20;
    if (has_tot_stock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_stock());
    }
    
    // optional uint64 cir_value = 21;
    if (has_cir_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cir_value());
    }
    
    // optional uint64 tot_value = 22;
    if (has_tot_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_value());
    }
    
    // optional uint64 np_volume = 23;
    if (has_np_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->np_volume());
    }
    
    // optional uint64 wp_volume = 24;
    if (has_wp_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wp_volume());
    }
    
    // optional uint32 trade_status = 25;
    if (has_trade_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_status());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 buy_sell_buy = 26;
    if (has_buy_sell_buy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buy_sell_buy());
    }
    
    // optional uint64 avg_stock = 27;
    if (has_avg_stock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->avg_stock());
    }
    
    // optional uint32 rise = 28;
    if (has_rise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rise());
    }
    
    // optional uint32 fall = 29;
    if (has_fall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fall());
    }
    
    // optional uint32 flat = 30;
    if (has_flat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flat());
    }
    
    // optional float ro = 32;
    if (has_ro()) {
      total_size += 2 + 4;
    }
    
    // optional float roe = 33;
    if (has_roe()) {
      total_size += 2 + 4;
    }
    
    // optional float profit = 34;
    if (has_profit()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 upper_limit_rice = 35;
    if (has_upper_limit_rice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upper_limit_rice());
    }
    
    // optional uint32 down_limit_price = 36;
    if (has_down_limit_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_limit_price());
    }
    
    // optional bool clear_sig = 37;
    if (has_clear_sig()) {
      total_size += 2 + 1;
    }
    
    // optional float ped = 38;
    if (has_ped()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 buy_sell = 39;
    if (has_buy_sell()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_sell());
    }
    
    // optional float speed_rate = 42;
    if (has_speed_rate()) {
      total_size += 2 + 4;
    }
    
    // optional float three_rate = 43;
    if (has_three_rate()) {
      total_size += 2 + 4;
    }
    
    // optional float three_tuv_rate = 44;
    if (has_three_tuv_rate()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional float five_tuv_rate = 45;
    if (has_five_tuv_rate()) {
      total_size += 2 + 4;
    }
    
    // optional uint64 detail_volume = 46;
    if (has_detail_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->detail_volume());
    }
    
    // optional string block_name = 47;
    if (has_block_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional uint32 rise_day_num = 48;
    if (has_rise_day_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rise_day_num());
    }
    
    // optional float second_rate = 49;
    if (has_second_rate()) {
      total_size += 2 + 4;
    }
    
    // optional float five_rate = 50;
    if (has_five_rate()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 limit_up = 51;
    if (has_limit_up()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_up());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockBase::MergeFrom(const StockBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_last_pice()) {
      set_last_pice(from.last_pice());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_pbv()) {
      set_pbv(from.pbv());
    }
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_highest_price()) {
      set_highest_price(from.highest_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lowest_price()) {
      set_lowest_price(from.lowest_price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_cur_volume()) {
      set_cur_volume(from.cur_volume());
    }
    if (from.has_turnover_rate()) {
      set_turnover_rate(from.turnover_rate());
    }
    if (from.has_pes()) {
      set_pes(from.pes());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_avg_price()) {
      set_avg_price(from.avg_price());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_committee()) {
      set_committee(from.committee());
    }
    if (from.has_cir_stock()) {
      set_cir_stock(from.cir_stock());
    }
    if (from.has_tot_stock()) {
      set_tot_stock(from.tot_stock());
    }
    if (from.has_cir_value()) {
      set_cir_value(from.cir_value());
    }
    if (from.has_tot_value()) {
      set_tot_value(from.tot_value());
    }
    if (from.has_np_volume()) {
      set_np_volume(from.np_volume());
    }
    if (from.has_wp_volume()) {
      set_wp_volume(from.wp_volume());
    }
    if (from.has_trade_status()) {
      set_trade_status(from.trade_status());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_buy_sell_buy()) {
      set_buy_sell_buy(from.buy_sell_buy());
    }
    if (from.has_avg_stock()) {
      set_avg_stock(from.avg_stock());
    }
    if (from.has_rise()) {
      set_rise(from.rise());
    }
    if (from.has_fall()) {
      set_fall(from.fall());
    }
    if (from.has_flat()) {
      set_flat(from.flat());
    }
    if (from.has_ro()) {
      set_ro(from.ro());
    }
    if (from.has_roe()) {
      set_roe(from.roe());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_upper_limit_rice()) {
      set_upper_limit_rice(from.upper_limit_rice());
    }
    if (from.has_down_limit_price()) {
      set_down_limit_price(from.down_limit_price());
    }
    if (from.has_clear_sig()) {
      set_clear_sig(from.clear_sig());
    }
    if (from.has_ped()) {
      set_ped(from.ped());
    }
    if (from.has_buy_sell()) {
      set_buy_sell(from.buy_sell());
    }
    if (from.has_speed_rate()) {
      set_speed_rate(from.speed_rate());
    }
    if (from.has_three_rate()) {
      set_three_rate(from.three_rate());
    }
    if (from.has_three_tuv_rate()) {
      set_three_tuv_rate(from.three_tuv_rate());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_five_tuv_rate()) {
      set_five_tuv_rate(from.five_tuv_rate());
    }
    if (from.has_detail_volume()) {
      set_detail_volume(from.detail_volume());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_rise_day_num()) {
      set_rise_day_num(from.rise_day_num());
    }
    if (from.has_second_rate()) {
      set_second_rate(from.second_rate());
    }
    if (from.has_five_rate()) {
      set_five_rate(from.five_rate());
    }
    if (from.has_limit_up()) {
      set_limit_up(from.limit_up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockBase::CopyFrom(const StockBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockBase::IsInitialized() const {
  
  return true;
}

void StockBase::Swap(StockBase* other) {
  if (other != this) {
    std::swap(rate_, other->rate_);
    std::swap(last_pice_, other->last_pice_);
    std::swap(ratio_, other->ratio_);
    std::swap(pbv_, other->pbv_);
    std::swap(trading_day_, other->trading_day_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(open_price_, other->open_price_);
    std::swap(highest_price_, other->highest_price_);
    std::swap(lowest_price_, other->lowest_price_);
    std::swap(volume_, other->volume_);
    std::swap(cur_volume_, other->cur_volume_);
    std::swap(turnover_rate_, other->turnover_rate_);
    std::swap(pes_, other->pes_);
    std::swap(turnover_, other->turnover_);
    std::swap(avg_price_, other->avg_price_);
    std::swap(update_time_, other->update_time_);
    std::swap(committee_, other->committee_);
    std::swap(cir_stock_, other->cir_stock_);
    std::swap(tot_stock_, other->tot_stock_);
    std::swap(cir_value_, other->cir_value_);
    std::swap(tot_value_, other->tot_value_);
    std::swap(np_volume_, other->np_volume_);
    std::swap(wp_volume_, other->wp_volume_);
    std::swap(trade_status_, other->trade_status_);
    std::swap(buy_sell_buy_, other->buy_sell_buy_);
    std::swap(avg_stock_, other->avg_stock_);
    std::swap(rise_, other->rise_);
    std::swap(fall_, other->fall_);
    std::swap(flat_, other->flat_);
    std::swap(ro_, other->ro_);
    std::swap(roe_, other->roe_);
    std::swap(profit_, other->profit_);
    std::swap(upper_limit_rice_, other->upper_limit_rice_);
    std::swap(down_limit_price_, other->down_limit_price_);
    std::swap(clear_sig_, other->clear_sig_);
    std::swap(ped_, other->ped_);
    std::swap(buy_sell_, other->buy_sell_);
    std::swap(speed_rate_, other->speed_rate_);
    std::swap(three_rate_, other->three_rate_);
    std::swap(three_tuv_rate_, other->three_tuv_rate_);
    std::swap(five_tuv_rate_, other->five_tuv_rate_);
    std::swap(detail_volume_, other->detail_volume_);
    std::swap(block_name_, other->block_name_);
    std::swap(rise_day_num_, other->rise_day_num_);
    std::swap(second_rate_, other->second_rate_);
    std::swap(five_rate_, other->five_rate_);
    std::swap(limit_up_, other->limit_up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockBase_descriptor_;
  metadata.reflection = StockBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockMmp::kBuyPrice1FieldNumber;
const int StockMmp::kBuyPrice2FieldNumber;
const int StockMmp::kBuyPrice3FieldNumber;
const int StockMmp::kBuyPrice4FieldNumber;
const int StockMmp::kBuyPrice5FieldNumber;
const int StockMmp::kBuyVolume1FieldNumber;
const int StockMmp::kBuyVolume2FieldNumber;
const int StockMmp::kBuyVolume3FieldNumber;
const int StockMmp::kBuyVolume4FieldNumber;
const int StockMmp::kBuyVolume5FieldNumber;
const int StockMmp::kSellPrice1FieldNumber;
const int StockMmp::kSellPrice2FieldNumber;
const int StockMmp::kSellPrice3FieldNumber;
const int StockMmp::kSellPrice4FieldNumber;
const int StockMmp::kSellPrice5FieldNumber;
const int StockMmp::kSellVolume1FieldNumber;
const int StockMmp::kSellVolume2FieldNumber;
const int StockMmp::kSellVolume3FieldNumber;
const int StockMmp::kSellVolume4FieldNumber;
const int StockMmp::kSellVolume5FieldNumber;
#endif  // !_MSC_VER

StockMmp::StockMmp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockMmp::InitAsDefaultInstance() {
}

StockMmp::StockMmp(const StockMmp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockMmp::SharedCtor() {
  _cached_size_ = 0;
  buy_price1_ = 0u;
  buy_price2_ = 0u;
  buy_price3_ = 0u;
  buy_price4_ = 0u;
  buy_price5_ = 0u;
  buy_volume1_ = 0u;
  buy_volume2_ = 0u;
  buy_volume3_ = 0u;
  buy_volume4_ = 0u;
  buy_volume5_ = 0u;
  sell_price1_ = 0u;
  sell_price2_ = 0u;
  sell_price3_ = 0u;
  sell_price4_ = 0u;
  sell_price5_ = 0u;
  sell_volume1_ = 0u;
  sell_volume2_ = 0u;
  sell_volume3_ = 0u;
  sell_volume4_ = 0u;
  sell_volume5_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockMmp::~StockMmp() {
  SharedDtor();
}

void StockMmp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StockMmp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockMmp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockMmp_descriptor_;
}

const StockMmp& StockMmp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

StockMmp* StockMmp::default_instance_ = NULL;

StockMmp* StockMmp::New() const {
  return new StockMmp;
}

void StockMmp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buy_price1_ = 0u;
    buy_price2_ = 0u;
    buy_price3_ = 0u;
    buy_price4_ = 0u;
    buy_price5_ = 0u;
    buy_volume1_ = 0u;
    buy_volume2_ = 0u;
    buy_volume3_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buy_volume4_ = 0u;
    buy_volume5_ = 0u;
    sell_price1_ = 0u;
    sell_price2_ = 0u;
    sell_price3_ = 0u;
    sell_price4_ = 0u;
    sell_price5_ = 0u;
    sell_volume1_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sell_volume2_ = 0u;
    sell_volume3_ = 0u;
    sell_volume4_ = 0u;
    sell_volume5_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockMmp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 buy_price1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_price1_)));
          set_has_buy_price1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_price2;
        break;
      }
      
      // required uint32 buy_price2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_price2_)));
          set_has_buy_price2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_price3;
        break;
      }
      
      // required uint32 buy_price3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_price3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_price3_)));
          set_has_buy_price3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_price4;
        break;
      }
      
      // required uint32 buy_price4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_price4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_price4_)));
          set_has_buy_price4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_price5;
        break;
      }
      
      // required uint32 buy_price5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_price5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_price5_)));
          set_has_buy_price5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_buy_volume1;
        break;
      }
      
      // required uint32 buy_volume1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_volume1_)));
          set_has_buy_volume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buy_volume2;
        break;
      }
      
      // required uint32 buy_volume2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_volume2_)));
          set_has_buy_volume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_buy_volume3;
        break;
      }
      
      // required uint32 buy_volume3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_volume3_)));
          set_has_buy_volume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buy_volume4;
        break;
      }
      
      // required uint32 buy_volume4 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_volume4_)));
          set_has_buy_volume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buy_volume5;
        break;
      }
      
      // required uint32 buy_volume5 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_volume5_)));
          set_has_buy_volume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sell_price1;
        break;
      }
      
      // required uint32 sell_price1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_price1_)));
          set_has_sell_price1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sell_price2;
        break;
      }
      
      // required uint32 sell_price2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_price2_)));
          set_has_sell_price2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sell_price3;
        break;
      }
      
      // required uint32 sell_price3 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_price3_)));
          set_has_sell_price3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_sell_price4;
        break;
      }
      
      // required uint32 sell_price4 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_price4_)));
          set_has_sell_price4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sell_price5;
        break;
      }
      
      // required uint32 sell_price5 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_price5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_price5_)));
          set_has_sell_price5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sell_volume1;
        break;
      }
      
      // required uint32 sell_volume1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_volume1_)));
          set_has_sell_volume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sell_volume2;
        break;
      }
      
      // required uint32 sell_volume2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_volume2_)));
          set_has_sell_volume2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_sell_volume3;
        break;
      }
      
      // required uint32 sell_volume3 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_volume3_)));
          set_has_sell_volume3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sell_volume4;
        break;
      }
      
      // required uint32 sell_volume4 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_volume4_)));
          set_has_sell_volume4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_sell_volume5;
        break;
      }
      
      // required uint32 sell_volume5 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sell_volume5_)));
          set_has_sell_volume5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockMmp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 buy_price1 = 1;
  if (has_buy_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buy_price1(), output);
  }
  
  // required uint32 buy_price2 = 2;
  if (has_buy_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_price2(), output);
  }
  
  // required uint32 buy_price3 = 3;
  if (has_buy_price3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_price3(), output);
  }
  
  // required uint32 buy_price4 = 4;
  if (has_buy_price4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_price4(), output);
  }
  
  // required uint32 buy_price5 = 5;
  if (has_buy_price5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buy_price5(), output);
  }
  
  // required uint32 buy_volume1 = 6;
  if (has_buy_volume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buy_volume1(), output);
  }
  
  // required uint32 buy_volume2 = 7;
  if (has_buy_volume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buy_volume2(), output);
  }
  
  // required uint32 buy_volume3 = 8;
  if (has_buy_volume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->buy_volume3(), output);
  }
  
  // required uint32 buy_volume4 = 9;
  if (has_buy_volume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->buy_volume4(), output);
  }
  
  // required uint32 buy_volume5 = 10;
  if (has_buy_volume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->buy_volume5(), output);
  }
  
  // required uint32 sell_price1 = 11;
  if (has_sell_price1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sell_price1(), output);
  }
  
  // required uint32 sell_price2 = 12;
  if (has_sell_price2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->sell_price2(), output);
  }
  
  // required uint32 sell_price3 = 13;
  if (has_sell_price3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sell_price3(), output);
  }
  
  // required uint32 sell_price4 = 14;
  if (has_sell_price4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->sell_price4(), output);
  }
  
  // required uint32 sell_price5 = 15;
  if (has_sell_price5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->sell_price5(), output);
  }
  
  // required uint32 sell_volume1 = 16;
  if (has_sell_volume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->sell_volume1(), output);
  }
  
  // required uint32 sell_volume2 = 17;
  if (has_sell_volume2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sell_volume2(), output);
  }
  
  // required uint32 sell_volume3 = 18;
  if (has_sell_volume3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sell_volume3(), output);
  }
  
  // required uint32 sell_volume4 = 19;
  if (has_sell_volume4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->sell_volume4(), output);
  }
  
  // required uint32 sell_volume5 = 20;
  if (has_sell_volume5()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->sell_volume5(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockMmp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 buy_price1 = 1;
  if (has_buy_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buy_price1(), target);
  }
  
  // required uint32 buy_price2 = 2;
  if (has_buy_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_price2(), target);
  }
  
  // required uint32 buy_price3 = 3;
  if (has_buy_price3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_price3(), target);
  }
  
  // required uint32 buy_price4 = 4;
  if (has_buy_price4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_price4(), target);
  }
  
  // required uint32 buy_price5 = 5;
  if (has_buy_price5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buy_price5(), target);
  }
  
  // required uint32 buy_volume1 = 6;
  if (has_buy_volume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buy_volume1(), target);
  }
  
  // required uint32 buy_volume2 = 7;
  if (has_buy_volume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buy_volume2(), target);
  }
  
  // required uint32 buy_volume3 = 8;
  if (has_buy_volume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->buy_volume3(), target);
  }
  
  // required uint32 buy_volume4 = 9;
  if (has_buy_volume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->buy_volume4(), target);
  }
  
  // required uint32 buy_volume5 = 10;
  if (has_buy_volume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->buy_volume5(), target);
  }
  
  // required uint32 sell_price1 = 11;
  if (has_sell_price1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sell_price1(), target);
  }
  
  // required uint32 sell_price2 = 12;
  if (has_sell_price2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->sell_price2(), target);
  }
  
  // required uint32 sell_price3 = 13;
  if (has_sell_price3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sell_price3(), target);
  }
  
  // required uint32 sell_price4 = 14;
  if (has_sell_price4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->sell_price4(), target);
  }
  
  // required uint32 sell_price5 = 15;
  if (has_sell_price5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->sell_price5(), target);
  }
  
  // required uint32 sell_volume1 = 16;
  if (has_sell_volume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->sell_volume1(), target);
  }
  
  // required uint32 sell_volume2 = 17;
  if (has_sell_volume2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sell_volume2(), target);
  }
  
  // required uint32 sell_volume3 = 18;
  if (has_sell_volume3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->sell_volume3(), target);
  }
  
  // required uint32 sell_volume4 = 19;
  if (has_sell_volume4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->sell_volume4(), target);
  }
  
  // required uint32 sell_volume5 = 20;
  if (has_sell_volume5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->sell_volume5(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockMmp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 buy_price1 = 1;
    if (has_buy_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_price1());
    }
    
    // required uint32 buy_price2 = 2;
    if (has_buy_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_price2());
    }
    
    // required uint32 buy_price3 = 3;
    if (has_buy_price3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_price3());
    }
    
    // required uint32 buy_price4 = 4;
    if (has_buy_price4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_price4());
    }
    
    // required uint32 buy_price5 = 5;
    if (has_buy_price5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_price5());
    }
    
    // required uint32 buy_volume1 = 6;
    if (has_buy_volume1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_volume1());
    }
    
    // required uint32 buy_volume2 = 7;
    if (has_buy_volume2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_volume2());
    }
    
    // required uint32 buy_volume3 = 8;
    if (has_buy_volume3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_volume3());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 buy_volume4 = 9;
    if (has_buy_volume4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_volume4());
    }
    
    // required uint32 buy_volume5 = 10;
    if (has_buy_volume5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_volume5());
    }
    
    // required uint32 sell_price1 = 11;
    if (has_sell_price1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_price1());
    }
    
    // required uint32 sell_price2 = 12;
    if (has_sell_price2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_price2());
    }
    
    // required uint32 sell_price3 = 13;
    if (has_sell_price3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_price3());
    }
    
    // required uint32 sell_price4 = 14;
    if (has_sell_price4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_price4());
    }
    
    // required uint32 sell_price5 = 15;
    if (has_sell_price5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_price5());
    }
    
    // required uint32 sell_volume1 = 16;
    if (has_sell_volume1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_volume1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 sell_volume2 = 17;
    if (has_sell_volume2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_volume2());
    }
    
    // required uint32 sell_volume3 = 18;
    if (has_sell_volume3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_volume3());
    }
    
    // required uint32 sell_volume4 = 19;
    if (has_sell_volume4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_volume4());
    }
    
    // required uint32 sell_volume5 = 20;
    if (has_sell_volume5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sell_volume5());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockMmp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockMmp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockMmp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockMmp::MergeFrom(const StockMmp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buy_price1()) {
      set_buy_price1(from.buy_price1());
    }
    if (from.has_buy_price2()) {
      set_buy_price2(from.buy_price2());
    }
    if (from.has_buy_price3()) {
      set_buy_price3(from.buy_price3());
    }
    if (from.has_buy_price4()) {
      set_buy_price4(from.buy_price4());
    }
    if (from.has_buy_price5()) {
      set_buy_price5(from.buy_price5());
    }
    if (from.has_buy_volume1()) {
      set_buy_volume1(from.buy_volume1());
    }
    if (from.has_buy_volume2()) {
      set_buy_volume2(from.buy_volume2());
    }
    if (from.has_buy_volume3()) {
      set_buy_volume3(from.buy_volume3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buy_volume4()) {
      set_buy_volume4(from.buy_volume4());
    }
    if (from.has_buy_volume5()) {
      set_buy_volume5(from.buy_volume5());
    }
    if (from.has_sell_price1()) {
      set_sell_price1(from.sell_price1());
    }
    if (from.has_sell_price2()) {
      set_sell_price2(from.sell_price2());
    }
    if (from.has_sell_price3()) {
      set_sell_price3(from.sell_price3());
    }
    if (from.has_sell_price4()) {
      set_sell_price4(from.sell_price4());
    }
    if (from.has_sell_price5()) {
      set_sell_price5(from.sell_price5());
    }
    if (from.has_sell_volume1()) {
      set_sell_volume1(from.sell_volume1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sell_volume2()) {
      set_sell_volume2(from.sell_volume2());
    }
    if (from.has_sell_volume3()) {
      set_sell_volume3(from.sell_volume3());
    }
    if (from.has_sell_volume4()) {
      set_sell_volume4(from.sell_volume4());
    }
    if (from.has_sell_volume5()) {
      set_sell_volume5(from.sell_volume5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockMmp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockMmp::CopyFrom(const StockMmp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockMmp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;
  
  return true;
}

void StockMmp::Swap(StockMmp* other) {
  if (other != this) {
    std::swap(buy_price1_, other->buy_price1_);
    std::swap(buy_price2_, other->buy_price2_);
    std::swap(buy_price3_, other->buy_price3_);
    std::swap(buy_price4_, other->buy_price4_);
    std::swap(buy_price5_, other->buy_price5_);
    std::swap(buy_volume1_, other->buy_volume1_);
    std::swap(buy_volume2_, other->buy_volume2_);
    std::swap(buy_volume3_, other->buy_volume3_);
    std::swap(buy_volume4_, other->buy_volume4_);
    std::swap(buy_volume5_, other->buy_volume5_);
    std::swap(sell_price1_, other->sell_price1_);
    std::swap(sell_price2_, other->sell_price2_);
    std::swap(sell_price3_, other->sell_price3_);
    std::swap(sell_price4_, other->sell_price4_);
    std::swap(sell_price5_, other->sell_price5_);
    std::swap(sell_volume1_, other->sell_volume1_);
    std::swap(sell_volume2_, other->sell_volume2_);
    std::swap(sell_volume3_, other->sell_volume3_);
    std::swap(sell_volume4_, other->sell_volume4_);
    std::swap(sell_volume5_, other->sell_volume5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockMmp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockMmp_descriptor_;
  metadata.reflection = StockMmp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockRiseFallInfo::kBlockCodeFieldNumber;
const int StockRiseFallInfo::kBlockNameFieldNumber;
const int StockRiseFallInfo::kGreaterSevenFieldNumber;
const int StockRiseFallInfo::kUpFiveSevenFieldNumber;
const int StockRiseFallInfo::kUpTwoFiveFieldNumber;
const int StockRiseFallInfo::kUpZeroTwoFieldNumber;
const int StockRiseFallInfo::kDownZeroTwoFieldNumber;
const int StockRiseFallInfo::kDownTwoFiveFieldNumber;
const int StockRiseFallInfo::kDownFiveSevenFieldNumber;
const int StockRiseFallInfo::kLessSevenFieldNumber;
const int StockRiseFallInfo::kLimitUpNumFieldNumber;
const int StockRiseFallInfo::kUpNumFieldNumber;
const int StockRiseFallInfo::kLimitDownNumFieldNumber;
const int StockRiseFallInfo::kDownNumFieldNumber;
const int StockRiseFallInfo::kFlatNumFieldNumber;
const int StockRiseFallInfo::kStopNumFieldNumber;
#endif  // !_MSC_VER

StockRiseFallInfo::StockRiseFallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockRiseFallInfo::InitAsDefaultInstance() {
}

StockRiseFallInfo::StockRiseFallInfo(const StockRiseFallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockRiseFallInfo::SharedCtor() {
  _cached_size_ = 0;
  block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  greater_seven_ = 0u;
  up_five_seven_ = 0u;
  up_two_five_ = 0u;
  up_zero_two_ = 0u;
  down_zero_two_ = 0u;
  down_two_five_ = 0u;
  down_five_seven_ = 0u;
  less_seven_ = 0u;
  limit_up_num_ = 0u;
  up_num_ = 0u;
  limit_down_num_ = 0u;
  down_num_ = 0u;
  flat_num_ = 0u;
  stop_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockRiseFallInfo::~StockRiseFallInfo() {
  SharedDtor();
}

void StockRiseFallInfo::SharedDtor() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    delete block_code_;
  }
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (this != default_instance_) {
  }
}

void StockRiseFallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockRiseFallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockRiseFallInfo_descriptor_;
}

const StockRiseFallInfo& StockRiseFallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

StockRiseFallInfo* StockRiseFallInfo::default_instance_ = NULL;

StockRiseFallInfo* StockRiseFallInfo::New() const {
  return new StockRiseFallInfo;
}

void StockRiseFallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_code()) {
      if (block_code_ != &::google::protobuf::internal::kEmptyString) {
        block_code_->clear();
      }
    }
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    greater_seven_ = 0u;
    up_five_seven_ = 0u;
    up_two_five_ = 0u;
    up_zero_two_ = 0u;
    down_zero_two_ = 0u;
    down_two_five_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    down_five_seven_ = 0u;
    less_seven_ = 0u;
    limit_up_num_ = 0u;
    up_num_ = 0u;
    limit_down_num_ = 0u;
    down_num_ = 0u;
    flat_num_ = 0u;
    stop_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockRiseFallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_code().data(), this->block_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_greater_seven;
        break;
      }
      
      // optional uint32 greater_seven = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_greater_seven:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &greater_seven_)));
          set_has_greater_seven();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_up_five_seven;
        break;
      }
      
      // optional uint32 up_five_seven = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_five_seven:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_five_seven_)));
          set_has_up_five_seven();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_up_two_five;
        break;
      }
      
      // optional uint32 up_two_five = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_two_five:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_two_five_)));
          set_has_up_two_five();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_up_zero_two;
        break;
      }
      
      // optional uint32 up_zero_two = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_zero_two:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_zero_two_)));
          set_has_up_zero_two();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_down_zero_two;
        break;
      }
      
      // optional uint32 down_zero_two = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_zero_two:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_zero_two_)));
          set_has_down_zero_two();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_down_two_five;
        break;
      }
      
      // optional uint32 down_two_five = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_two_five:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_two_five_)));
          set_has_down_two_five();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_down_five_seven;
        break;
      }
      
      // optional uint32 down_five_seven = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_five_seven:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_five_seven_)));
          set_has_down_five_seven();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_less_seven;
        break;
      }
      
      // optional uint32 less_seven = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_less_seven:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &less_seven_)));
          set_has_less_seven();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_limit_up_num;
        break;
      }
      
      // optional uint32 limit_up_num = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_up_num_)));
          set_has_limit_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_up_num;
        break;
      }
      
      // optional uint32 up_num = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_num_)));
          set_has_up_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_limit_down_num;
        break;
      }
      
      // optional uint32 limit_down_num = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_down_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_down_num_)));
          set_has_limit_down_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_down_num;
        break;
      }
      
      // optional uint32 down_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_down_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_num_)));
          set_has_down_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_flat_num;
        break;
      }
      
      // optional uint32 flat_num = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flat_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flat_num_)));
          set_has_flat_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_stop_num;
        break;
      }
      
      // optional uint32 stop_num = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stop_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stop_num_)));
          set_has_stop_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockRiseFallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_code(), output);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->block_name(), output);
  }
  
  // optional uint32 greater_seven = 3;
  if (has_greater_seven()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->greater_seven(), output);
  }
  
  // optional uint32 up_five_seven = 4;
  if (has_up_five_seven()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->up_five_seven(), output);
  }
  
  // optional uint32 up_two_five = 5;
  if (has_up_two_five()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->up_two_five(), output);
  }
  
  // optional uint32 up_zero_two = 6;
  if (has_up_zero_two()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->up_zero_two(), output);
  }
  
  // optional uint32 down_zero_two = 7;
  if (has_down_zero_two()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->down_zero_two(), output);
  }
  
  // optional uint32 down_two_five = 8;
  if (has_down_two_five()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->down_two_five(), output);
  }
  
  // optional uint32 down_five_seven = 9;
  if (has_down_five_seven()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->down_five_seven(), output);
  }
  
  // optional uint32 less_seven = 10;
  if (has_less_seven()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->less_seven(), output);
  }
  
  // optional uint32 limit_up_num = 11;
  if (has_limit_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->limit_up_num(), output);
  }
  
  // optional uint32 up_num = 12;
  if (has_up_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->up_num(), output);
  }
  
  // optional uint32 limit_down_num = 13;
  if (has_limit_down_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->limit_down_num(), output);
  }
  
  // optional uint32 down_num = 14;
  if (has_down_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->down_num(), output);
  }
  
  // optional uint32 flat_num = 15;
  if (has_flat_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->flat_num(), output);
  }
  
  // optional uint32 stop_num = 16;
  if (has_stop_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->stop_num(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockRiseFallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_code(), target);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_name(), target);
  }
  
  // optional uint32 greater_seven = 3;
  if (has_greater_seven()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->greater_seven(), target);
  }
  
  // optional uint32 up_five_seven = 4;
  if (has_up_five_seven()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->up_five_seven(), target);
  }
  
  // optional uint32 up_two_five = 5;
  if (has_up_two_five()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->up_two_five(), target);
  }
  
  // optional uint32 up_zero_two = 6;
  if (has_up_zero_two()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->up_zero_two(), target);
  }
  
  // optional uint32 down_zero_two = 7;
  if (has_down_zero_two()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->down_zero_two(), target);
  }
  
  // optional uint32 down_two_five = 8;
  if (has_down_two_five()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->down_two_five(), target);
  }
  
  // optional uint32 down_five_seven = 9;
  if (has_down_five_seven()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->down_five_seven(), target);
  }
  
  // optional uint32 less_seven = 10;
  if (has_less_seven()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->less_seven(), target);
  }
  
  // optional uint32 limit_up_num = 11;
  if (has_limit_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->limit_up_num(), target);
  }
  
  // optional uint32 up_num = 12;
  if (has_up_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->up_num(), target);
  }
  
  // optional uint32 limit_down_num = 13;
  if (has_limit_down_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->limit_down_num(), target);
  }
  
  // optional uint32 down_num = 14;
  if (has_down_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->down_num(), target);
  }
  
  // optional uint32 flat_num = 15;
  if (has_flat_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->flat_num(), target);
  }
  
  // optional uint32 stop_num = 16;
  if (has_stop_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->stop_num(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockRiseFallInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string block_code = 1;
    if (has_block_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_code());
    }
    
    // optional string block_name = 2;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional uint32 greater_seven = 3;
    if (has_greater_seven()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->greater_seven());
    }
    
    // optional uint32 up_five_seven = 4;
    if (has_up_five_seven()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_five_seven());
    }
    
    // optional uint32 up_two_five = 5;
    if (has_up_two_five()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_two_five());
    }
    
    // optional uint32 up_zero_two = 6;
    if (has_up_zero_two()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_zero_two());
    }
    
    // optional uint32 down_zero_two = 7;
    if (has_down_zero_two()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_zero_two());
    }
    
    // optional uint32 down_two_five = 8;
    if (has_down_two_five()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_two_five());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 down_five_seven = 9;
    if (has_down_five_seven()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_five_seven());
    }
    
    // optional uint32 less_seven = 10;
    if (has_less_seven()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->less_seven());
    }
    
    // optional uint32 limit_up_num = 11;
    if (has_limit_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_up_num());
    }
    
    // optional uint32 up_num = 12;
    if (has_up_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_num());
    }
    
    // optional uint32 limit_down_num = 13;
    if (has_limit_down_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_down_num());
    }
    
    // optional uint32 down_num = 14;
    if (has_down_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_num());
    }
    
    // optional uint32 flat_num = 15;
    if (has_flat_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flat_num());
    }
    
    // optional uint32 stop_num = 16;
    if (has_stop_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stop_num());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockRiseFallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockRiseFallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockRiseFallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockRiseFallInfo::MergeFrom(const StockRiseFallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_code()) {
      set_block_code(from.block_code());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_greater_seven()) {
      set_greater_seven(from.greater_seven());
    }
    if (from.has_up_five_seven()) {
      set_up_five_seven(from.up_five_seven());
    }
    if (from.has_up_two_five()) {
      set_up_two_five(from.up_two_five());
    }
    if (from.has_up_zero_two()) {
      set_up_zero_two(from.up_zero_two());
    }
    if (from.has_down_zero_two()) {
      set_down_zero_two(from.down_zero_two());
    }
    if (from.has_down_two_five()) {
      set_down_two_five(from.down_two_five());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_down_five_seven()) {
      set_down_five_seven(from.down_five_seven());
    }
    if (from.has_less_seven()) {
      set_less_seven(from.less_seven());
    }
    if (from.has_limit_up_num()) {
      set_limit_up_num(from.limit_up_num());
    }
    if (from.has_up_num()) {
      set_up_num(from.up_num());
    }
    if (from.has_limit_down_num()) {
      set_limit_down_num(from.limit_down_num());
    }
    if (from.has_down_num()) {
      set_down_num(from.down_num());
    }
    if (from.has_flat_num()) {
      set_flat_num(from.flat_num());
    }
    if (from.has_stop_num()) {
      set_stop_num(from.stop_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockRiseFallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockRiseFallInfo::CopyFrom(const StockRiseFallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockRiseFallInfo::IsInitialized() const {
  
  return true;
}

void StockRiseFallInfo::Swap(StockRiseFallInfo* other) {
  if (other != this) {
    std::swap(block_code_, other->block_code_);
    std::swap(block_name_, other->block_name_);
    std::swap(greater_seven_, other->greater_seven_);
    std::swap(up_five_seven_, other->up_five_seven_);
    std::swap(up_two_five_, other->up_two_five_);
    std::swap(up_zero_two_, other->up_zero_two_);
    std::swap(down_zero_two_, other->down_zero_two_);
    std::swap(down_two_five_, other->down_two_five_);
    std::swap(down_five_seven_, other->down_five_seven_);
    std::swap(less_seven_, other->less_seven_);
    std::swap(limit_up_num_, other->limit_up_num_);
    std::swap(up_num_, other->up_num_);
    std::swap(limit_down_num_, other->limit_down_num_);
    std::swap(down_num_, other->down_num_);
    std::swap(flat_num_, other->flat_num_);
    std::swap(stop_num_, other->stop_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockRiseFallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockRiseFallInfo_descriptor_;
  metadata.reflection = StockRiseFallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RisestStockInfo::kStockCodeFieldNumber;
const int RisestStockInfo::kStockNameFieldNumber;
const int RisestStockInfo::kLastPiceFieldNumber;
const int RisestStockInfo::kPreClosePriceFieldNumber;
#endif  // !_MSC_VER

RisestStockInfo::RisestStockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RisestStockInfo::InitAsDefaultInstance() {
}

RisestStockInfo::RisestStockInfo(const RisestStockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RisestStockInfo::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_pice_ = 0u;
  pre_close_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RisestStockInfo::~RisestStockInfo() {
  SharedDtor();
}

void RisestStockInfo::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (this != default_instance_) {
  }
}

void RisestStockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RisestStockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RisestStockInfo_descriptor_;
}

const RisestStockInfo& RisestStockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

RisestStockInfo* RisestStockInfo::default_instance_ = NULL;

RisestStockInfo* RisestStockInfo::New() const {
  return new RisestStockInfo;
}

void RisestStockInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    last_pice_ = 0u;
    pre_close_price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RisestStockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_name;
        break;
      }
      
      // optional string stock_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_pice;
        break;
      }
      
      // optional uint32 last_pice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_pice_)));
          set_has_last_pice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pre_close_price;
        break;
      }
      
      // optional uint32 pre_close_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RisestStockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_name(), output);
  }
  
  // optional uint32 last_pice = 3;
  if (has_last_pice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_pice(), output);
  }
  
  // optional uint32 pre_close_price = 4;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pre_close_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RisestStockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_name(), target);
  }
  
  // optional uint32 last_pice = 3;
  if (has_last_pice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_pice(), target);
  }
  
  // optional uint32 pre_close_price = 4;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pre_close_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RisestStockInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional string stock_name = 2;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // optional uint32 last_pice = 3;
    if (has_last_pice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_pice());
    }
    
    // optional uint32 pre_close_price = 4;
    if (has_pre_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_close_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RisestStockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RisestStockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RisestStockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RisestStockInfo::MergeFrom(const RisestStockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_last_pice()) {
      set_last_pice(from.last_pice());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RisestStockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RisestStockInfo::CopyFrom(const RisestStockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RisestStockInfo::IsInitialized() const {
  
  return true;
}

void RisestStockInfo::Swap(RisestStockInfo* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(last_pice_, other->last_pice_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RisestStockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RisestStockInfo_descriptor_;
  metadata.reflection = RisestStockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockMsg::kStockCodeFieldNumber;
const int StockMsg::kStockNameFieldNumber;
const int StockMsg::kIsBlockFieldNumber;
const int StockMsg::kStkBaseFieldNumber;
const int StockMsg::kStkMmpFieldNumber;
const int StockMsg::kBlockTypeFieldNumber;
const int StockMsg::kRisestStockFieldNumber;
#endif  // !_MSC_VER

StockMsg::StockMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StockMsg::InitAsDefaultInstance() {
  stk_base_ = const_cast< ::QuoteProto::StockBase*>(&::QuoteProto::StockBase::default_instance());
  stk_mmp_ = const_cast< ::QuoteProto::StockMmp*>(&::QuoteProto::StockMmp::default_instance());
  risest_stock_ = const_cast< ::QuoteProto::RisestStockInfo*>(&::QuoteProto::RisestStockInfo::default_instance());
}

StockMsg::StockMsg(const StockMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StockMsg::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_block_ = false;
  stk_base_ = NULL;
  stk_mmp_ = NULL;
  block_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  risest_stock_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockMsg::~StockMsg() {
  SharedDtor();
}

void StockMsg::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (block_type_ != &::google::protobuf::internal::kEmptyString) {
    delete block_type_;
  }
  if (this != default_instance_) {
    delete stk_base_;
    delete stk_mmp_;
    delete risest_stock_;
  }
}

void StockMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StockMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockMsg_descriptor_;
}

const StockMsg& StockMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

StockMsg* StockMsg::default_instance_ = NULL;

StockMsg* StockMsg::New() const {
  return new StockMsg;
}

void StockMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    is_block_ = false;
    if (has_stk_base()) {
      if (stk_base_ != NULL) stk_base_->::QuoteProto::StockBase::Clear();
    }
    if (has_stk_mmp()) {
      if (stk_mmp_ != NULL) stk_mmp_->::QuoteProto::StockMmp::Clear();
    }
    if (has_block_type()) {
      if (block_type_ != &::google::protobuf::internal::kEmptyString) {
        block_type_->clear();
      }
    }
    if (has_risest_stock()) {
      if (risest_stock_ != NULL) risest_stock_->::QuoteProto::RisestStockInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_name;
        break;
      }
      
      // optional string stock_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_block;
        break;
      }
      
      // optional bool is_block = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_block_)));
          set_has_is_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stk_base;
        break;
      }
      
      // optional .QuoteProto.StockBase stk_base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stk_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stk_mmp;
        break;
      }
      
      // optional .QuoteProto.StockMmp stk_mmp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk_mmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stk_mmp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_block_type;
        break;
      }
      
      // optional string block_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_type().data(), this->block_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_risest_stock;
        break;
      }
      
      // optional .QuoteProto.RisestStockInfo risest_stock = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_risest_stock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_risest_stock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_name(), output);
  }
  
  // optional bool is_block = 3;
  if (has_is_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_block(), output);
  }
  
  // optional .QuoteProto.StockBase stk_base = 4;
  if (has_stk_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stk_base(), output);
  }
  
  // optional .QuoteProto.StockMmp stk_mmp = 5;
  if (has_stk_mmp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stk_mmp(), output);
  }
  
  // optional string block_type = 6;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_type().data(), this->block_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->block_type(), output);
  }
  
  // optional .QuoteProto.RisestStockInfo risest_stock = 7;
  if (has_risest_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->risest_stock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_name(), target);
  }
  
  // optional bool is_block = 3;
  if (has_is_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_block(), target);
  }
  
  // optional .QuoteProto.StockBase stk_base = 4;
  if (has_stk_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stk_base(), target);
  }
  
  // optional .QuoteProto.StockMmp stk_mmp = 5;
  if (has_stk_mmp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stk_mmp(), target);
  }
  
  // optional string block_type = 6;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_type().data(), this->block_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->block_type(), target);
  }
  
  // optional .QuoteProto.RisestStockInfo risest_stock = 7;
  if (has_risest_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->risest_stock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional string stock_name = 2;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // optional bool is_block = 3;
    if (has_is_block()) {
      total_size += 1 + 1;
    }
    
    // optional .QuoteProto.StockBase stk_base = 4;
    if (has_stk_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stk_base());
    }
    
    // optional .QuoteProto.StockMmp stk_mmp = 5;
    if (has_stk_mmp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stk_mmp());
    }
    
    // optional string block_type = 6;
    if (has_block_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_type());
    }
    
    // optional .QuoteProto.RisestStockInfo risest_stock = 7;
    if (has_risest_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->risest_stock());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StockMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockMsg::MergeFrom(const StockMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_is_block()) {
      set_is_block(from.is_block());
    }
    if (from.has_stk_base()) {
      mutable_stk_base()->::QuoteProto::StockBase::MergeFrom(from.stk_base());
    }
    if (from.has_stk_mmp()) {
      mutable_stk_mmp()->::QuoteProto::StockMmp::MergeFrom(from.stk_mmp());
    }
    if (from.has_block_type()) {
      set_block_type(from.block_type());
    }
    if (from.has_risest_stock()) {
      mutable_risest_stock()->::QuoteProto::RisestStockInfo::MergeFrom(from.risest_stock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockMsg::CopyFrom(const StockMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockMsg::IsInitialized() const {
  
  if (has_stk_mmp()) {
    if (!this->stk_mmp().IsInitialized()) return false;
  }
  return true;
}

void StockMsg::Swap(StockMsg* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(is_block_, other->is_block_);
    std::swap(stk_base_, other->stk_base_);
    std::swap(stk_mmp_, other->stk_mmp_);
    std::swap(block_type_, other->block_type_);
    std::swap(risest_stock_, other->risest_stock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockMsg_descriptor_;
  metadata.reflection = StockMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockMsg::kBlockCodeFieldNumber;
const int BlockMsg::kBlockNameFieldNumber;
const int BlockMsg::kPreClosePriceFieldNumber;
const int BlockMsg::kOpenPriceFieldNumber;
const int BlockMsg::kHighestPriceFieldNumber;
const int BlockMsg::kLowestPriceFieldNumber;
const int BlockMsg::kLastPiceFieldNumber;
const int BlockMsg::kVolumeFieldNumber;
const int BlockMsg::kTurnoverFieldNumber;
const int BlockMsg::kUpdateTimeFieldNumber;
const int BlockMsg::kCirStockFieldNumber;
const int BlockMsg::kTotStockFieldNumber;
const int BlockMsg::kCirValueFieldNumber;
const int BlockMsg::kTotValueFieldNumber;
const int BlockMsg::kAvgStockFieldNumber;
const int BlockMsg::kTurnoverRateFieldNumber;
const int BlockMsg::kNpVolumeFieldNumber;
const int BlockMsg::kWpVolumeFieldNumber;
const int BlockMsg::kRiseFieldNumber;
const int BlockMsg::kFallFieldNumber;
const int BlockMsg::kFlatFieldNumber;
const int BlockMsg::kTradingDayFieldNumber;
const int BlockMsg::kTradeStatusFieldNumber;
const int BlockMsg::kSpeedRateFieldNumber;
const int BlockMsg::kThreeRateFieldNumber;
const int BlockMsg::kThreeTuvRateFieldNumber;
const int BlockMsg::kFiveTuvRateFieldNumber;
const int BlockMsg::kRatioFieldNumber;
const int BlockMsg::kCurVolumeFieldNumber;
const int BlockMsg::kDetailVolumeFieldNumber;
const int BlockMsg::kBlockTypeFieldNumber;
const int BlockMsg::kRiseDayNumFieldNumber;
const int BlockMsg::kFiveRateFieldNumber;
const int BlockMsg::kLimitUpFieldNumber;
const int BlockMsg::kAvgPriceFieldNumber;
#endif  // !_MSC_VER

BlockMsg::BlockMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockMsg::InitAsDefaultInstance() {
}

BlockMsg::BlockMsg(const BlockMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockMsg::SharedCtor() {
  _cached_size_ = 0;
  block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pre_close_price_ = 0u;
  open_price_ = 0u;
  highest_price_ = 0u;
  lowest_price_ = 0u;
  last_pice_ = 0u;
  volume_ = GOOGLE_ULONGLONG(0);
  turnover_ = GOOGLE_ULONGLONG(0);
  update_time_ = 0u;
  cir_stock_ = GOOGLE_ULONGLONG(0);
  tot_stock_ = GOOGLE_ULONGLONG(0);
  cir_value_ = GOOGLE_ULONGLONG(0);
  tot_value_ = GOOGLE_ULONGLONG(0);
  avg_stock_ = GOOGLE_ULONGLONG(0);
  turnover_rate_ = 0;
  np_volume_ = GOOGLE_ULONGLONG(0);
  wp_volume_ = GOOGLE_ULONGLONG(0);
  rise_ = 0u;
  fall_ = 0u;
  flat_ = 0u;
  trading_day_ = 0u;
  trade_status_ = 0u;
  speed_rate_ = 0;
  three_rate_ = 0;
  three_tuv_rate_ = 0;
  five_tuv_rate_ = 0;
  ratio_ = 0;
  cur_volume_ = GOOGLE_ULONGLONG(0);
  detail_volume_ = GOOGLE_ULONGLONG(0);
  block_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rise_day_num_ = 0u;
  five_rate_ = 0;
  limit_up_ = 0u;
  avg_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockMsg::~BlockMsg() {
  SharedDtor();
}

void BlockMsg::SharedDtor() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    delete block_code_;
  }
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (block_type_ != &::google::protobuf::internal::kEmptyString) {
    delete block_type_;
  }
  if (this != default_instance_) {
  }
}

void BlockMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockMsg_descriptor_;
}

const BlockMsg& BlockMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

BlockMsg* BlockMsg::default_instance_ = NULL;

BlockMsg* BlockMsg::New() const {
  return new BlockMsg;
}

void BlockMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_code()) {
      if (block_code_ != &::google::protobuf::internal::kEmptyString) {
        block_code_->clear();
      }
    }
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    pre_close_price_ = 0u;
    open_price_ = 0u;
    highest_price_ = 0u;
    lowest_price_ = 0u;
    last_pice_ = 0u;
    volume_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    turnover_ = GOOGLE_ULONGLONG(0);
    update_time_ = 0u;
    cir_stock_ = GOOGLE_ULONGLONG(0);
    tot_stock_ = GOOGLE_ULONGLONG(0);
    cir_value_ = GOOGLE_ULONGLONG(0);
    tot_value_ = GOOGLE_ULONGLONG(0);
    avg_stock_ = GOOGLE_ULONGLONG(0);
    turnover_rate_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    np_volume_ = GOOGLE_ULONGLONG(0);
    wp_volume_ = GOOGLE_ULONGLONG(0);
    rise_ = 0u;
    fall_ = 0u;
    flat_ = 0u;
    trading_day_ = 0u;
    trade_status_ = 0u;
    speed_rate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    three_rate_ = 0;
    three_tuv_rate_ = 0;
    five_tuv_rate_ = 0;
    ratio_ = 0;
    cur_volume_ = GOOGLE_ULONGLONG(0);
    detail_volume_ = GOOGLE_ULONGLONG(0);
    if (has_block_type()) {
      if (block_type_ != &::google::protobuf::internal::kEmptyString) {
        block_type_->clear();
      }
    }
    rise_day_num_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    five_rate_ = 0;
    limit_up_ = 0u;
    avg_price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_code().data(), this->block_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pre_close_price;
        break;
      }
      
      // optional uint32 pre_close_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_open_price;
        break;
      }
      
      // optional uint32 open_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_price_)));
          set_has_open_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_highest_price;
        break;
      }
      
      // optional uint32 highest_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highest_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highest_price_)));
          set_has_highest_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lowest_price;
        break;
      }
      
      // optional uint32 lowest_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lowest_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lowest_price_)));
          set_has_lowest_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_pice;
        break;
      }
      
      // optional uint32 last_pice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_pice_)));
          set_has_last_pice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_volume;
        break;
      }
      
      // optional uint64 volume = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_turnover;
        break;
      }
      
      // optional uint64 turnover = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_update_time;
        break;
      }
      
      // optional uint32 update_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cir_stock;
        break;
      }
      
      // optional uint64 cir_stock = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cir_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cir_stock_)));
          set_has_cir_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tot_stock;
        break;
      }
      
      // optional uint64 tot_stock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tot_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_stock_)));
          set_has_tot_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_cir_value;
        break;
      }
      
      // optional uint64 cir_value = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cir_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cir_value_)));
          set_has_cir_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_tot_value;
        break;
      }
      
      // optional uint64 tot_value = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tot_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tot_value_)));
          set_has_tot_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_avg_stock;
        break;
      }
      
      // optional uint64 avg_stock = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_stock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &avg_stock_)));
          set_has_avg_stock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_turnover_rate;
        break;
      }
      
      // optional float turnover_rate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnover_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnover_rate_)));
          set_has_turnover_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_np_volume;
        break;
      }
      
      // optional uint64 np_volume = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_np_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &np_volume_)));
          set_has_np_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wp_volume;
        break;
      }
      
      // optional uint64 wp_volume = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wp_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &wp_volume_)));
          set_has_wp_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_rise;
        break;
      }
      
      // optional uint32 rise = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rise_)));
          set_has_rise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fall;
        break;
      }
      
      // optional uint32 fall = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fall_)));
          set_has_fall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_flat;
        break;
      }
      
      // optional uint32 flat = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flat_)));
          set_has_flat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_trading_day;
        break;
      }
      
      // optional uint32 trading_day = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_trade_status;
        break;
      }
      
      // optional uint32 trade_status = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_status_)));
          set_has_trade_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_speed_rate;
        break;
      }
      
      // optional float speed_rate = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_rate_)));
          set_has_speed_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_three_rate;
        break;
      }
      
      // optional float three_rate = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_three_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &three_rate_)));
          set_has_three_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_three_tuv_rate;
        break;
      }
      
      // optional float three_tuv_rate = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_three_tuv_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &three_tuv_rate_)));
          set_has_three_tuv_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_five_tuv_rate;
        break;
      }
      
      // optional float five_tuv_rate = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_five_tuv_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &five_tuv_rate_)));
          set_has_five_tuv_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_ratio;
        break;
      }
      
      // optional float ratio = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_cur_volume;
        break;
      }
      
      // optional uint64 cur_volume = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_volume_)));
          set_has_cur_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_detail_volume;
        break;
      }
      
      // optional uint64 detail_volume = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detail_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &detail_volume_)));
          set_has_detail_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_block_type;
        break;
      }
      
      // optional string block_type = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_type().data(), this->block_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_rise_day_num;
        break;
      }
      
      // optional uint32 rise_day_num = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rise_day_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rise_day_num_)));
          set_has_rise_day_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(405)) goto parse_five_rate;
        break;
      }
      
      // optional float five_rate = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_five_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &five_rate_)));
          set_has_five_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_limit_up;
        break;
      }
      
      // optional uint32 limit_up = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit_up:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_up_)));
          set_has_limit_up();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_avg_price;
        break;
      }
      
      // optional uint32 avg_price = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_price_)));
          set_has_avg_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_code(), output);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->block_name(), output);
  }
  
  // optional uint32 pre_close_price = 3;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pre_close_price(), output);
  }
  
  // optional uint32 open_price = 4;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->open_price(), output);
  }
  
  // optional uint32 highest_price = 5;
  if (has_highest_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->highest_price(), output);
  }
  
  // optional uint32 lowest_price = 6;
  if (has_lowest_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lowest_price(), output);
  }
  
  // optional uint32 last_pice = 7;
  if (has_last_pice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_pice(), output);
  }
  
  // optional uint64 volume = 10;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->volume(), output);
  }
  
  // optional uint64 turnover = 11;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->turnover(), output);
  }
  
  // optional uint32 update_time = 12;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->update_time(), output);
  }
  
  // optional uint64 cir_stock = 13;
  if (has_cir_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->cir_stock(), output);
  }
  
  // optional uint64 tot_stock = 14;
  if (has_tot_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tot_stock(), output);
  }
  
  // optional uint64 cir_value = 15;
  if (has_cir_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->cir_value(), output);
  }
  
  // optional uint64 tot_value = 16;
  if (has_tot_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->tot_value(), output);
  }
  
  // optional uint64 avg_stock = 17;
  if (has_avg_stock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->avg_stock(), output);
  }
  
  // optional float turnover_rate = 18;
  if (has_turnover_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->turnover_rate(), output);
  }
  
  // optional uint64 np_volume = 19;
  if (has_np_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->np_volume(), output);
  }
  
  // optional uint64 wp_volume = 20;
  if (has_wp_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->wp_volume(), output);
  }
  
  // optional uint32 rise = 21;
  if (has_rise()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->rise(), output);
  }
  
  // optional uint32 fall = 22;
  if (has_fall()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->fall(), output);
  }
  
  // optional uint32 flat = 23;
  if (has_flat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->flat(), output);
  }
  
  // optional uint32 trading_day = 25;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->trading_day(), output);
  }
  
  // optional uint32 trade_status = 26;
  if (has_trade_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->trade_status(), output);
  }
  
  // optional float speed_rate = 27;
  if (has_speed_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->speed_rate(), output);
  }
  
  // optional float three_rate = 28;
  if (has_three_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->three_rate(), output);
  }
  
  // optional float three_tuv_rate = 29;
  if (has_three_tuv_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->three_tuv_rate(), output);
  }
  
  // optional float five_tuv_rate = 30;
  if (has_five_tuv_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->five_tuv_rate(), output);
  }
  
  // optional float ratio = 31;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->ratio(), output);
  }
  
  // optional uint64 cur_volume = 33;
  if (has_cur_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->cur_volume(), output);
  }
  
  // optional uint64 detail_volume = 34;
  if (has_detail_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->detail_volume(), output);
  }
  
  // optional string block_type = 35;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_type().data(), this->block_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->block_type(), output);
  }
  
  // optional uint32 rise_day_num = 36;
  if (has_rise_day_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->rise_day_num(), output);
  }
  
  // optional float five_rate = 50;
  if (has_five_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->five_rate(), output);
  }
  
  // optional uint32 limit_up = 51;
  if (has_limit_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->limit_up(), output);
  }
  
  // optional uint32 avg_price = 52;
  if (has_avg_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->avg_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_code(), target);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_name(), target);
  }
  
  // optional uint32 pre_close_price = 3;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pre_close_price(), target);
  }
  
  // optional uint32 open_price = 4;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->open_price(), target);
  }
  
  // optional uint32 highest_price = 5;
  if (has_highest_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->highest_price(), target);
  }
  
  // optional uint32 lowest_price = 6;
  if (has_lowest_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lowest_price(), target);
  }
  
  // optional uint32 last_pice = 7;
  if (has_last_pice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_pice(), target);
  }
  
  // optional uint64 volume = 10;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->volume(), target);
  }
  
  // optional uint64 turnover = 11;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->turnover(), target);
  }
  
  // optional uint32 update_time = 12;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->update_time(), target);
  }
  
  // optional uint64 cir_stock = 13;
  if (has_cir_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->cir_stock(), target);
  }
  
  // optional uint64 tot_stock = 14;
  if (has_tot_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tot_stock(), target);
  }
  
  // optional uint64 cir_value = 15;
  if (has_cir_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->cir_value(), target);
  }
  
  // optional uint64 tot_value = 16;
  if (has_tot_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->tot_value(), target);
  }
  
  // optional uint64 avg_stock = 17;
  if (has_avg_stock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->avg_stock(), target);
  }
  
  // optional float turnover_rate = 18;
  if (has_turnover_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->turnover_rate(), target);
  }
  
  // optional uint64 np_volume = 19;
  if (has_np_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->np_volume(), target);
  }
  
  // optional uint64 wp_volume = 20;
  if (has_wp_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->wp_volume(), target);
  }
  
  // optional uint32 rise = 21;
  if (has_rise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->rise(), target);
  }
  
  // optional uint32 fall = 22;
  if (has_fall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->fall(), target);
  }
  
  // optional uint32 flat = 23;
  if (has_flat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->flat(), target);
  }
  
  // optional uint32 trading_day = 25;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->trading_day(), target);
  }
  
  // optional uint32 trade_status = 26;
  if (has_trade_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->trade_status(), target);
  }
  
  // optional float speed_rate = 27;
  if (has_speed_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->speed_rate(), target);
  }
  
  // optional float three_rate = 28;
  if (has_three_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->three_rate(), target);
  }
  
  // optional float three_tuv_rate = 29;
  if (has_three_tuv_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->three_tuv_rate(), target);
  }
  
  // optional float five_tuv_rate = 30;
  if (has_five_tuv_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->five_tuv_rate(), target);
  }
  
  // optional float ratio = 31;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->ratio(), target);
  }
  
  // optional uint64 cur_volume = 33;
  if (has_cur_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->cur_volume(), target);
  }
  
  // optional uint64 detail_volume = 34;
  if (has_detail_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->detail_volume(), target);
  }
  
  // optional string block_type = 35;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_type().data(), this->block_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->block_type(), target);
  }
  
  // optional uint32 rise_day_num = 36;
  if (has_rise_day_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->rise_day_num(), target);
  }
  
  // optional float five_rate = 50;
  if (has_five_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(50, this->five_rate(), target);
  }
  
  // optional uint32 limit_up = 51;
  if (has_limit_up()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->limit_up(), target);
  }
  
  // optional uint32 avg_price = 52;
  if (has_avg_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->avg_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string block_code = 1;
    if (has_block_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_code());
    }
    
    // optional string block_name = 2;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional uint32 pre_close_price = 3;
    if (has_pre_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_close_price());
    }
    
    // optional uint32 open_price = 4;
    if (has_open_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_price());
    }
    
    // optional uint32 highest_price = 5;
    if (has_highest_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highest_price());
    }
    
    // optional uint32 lowest_price = 6;
    if (has_lowest_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lowest_price());
    }
    
    // optional uint32 last_pice = 7;
    if (has_last_pice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_pice());
    }
    
    // optional uint64 volume = 10;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 turnover = 11;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->turnover());
    }
    
    // optional uint32 update_time = 12;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
    // optional uint64 cir_stock = 13;
    if (has_cir_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cir_stock());
    }
    
    // optional uint64 tot_stock = 14;
    if (has_tot_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_stock());
    }
    
    // optional uint64 cir_value = 15;
    if (has_cir_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cir_value());
    }
    
    // optional uint64 tot_value = 16;
    if (has_tot_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tot_value());
    }
    
    // optional uint64 avg_stock = 17;
    if (has_avg_stock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->avg_stock());
    }
    
    // optional float turnover_rate = 18;
    if (has_turnover_rate()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 np_volume = 19;
    if (has_np_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->np_volume());
    }
    
    // optional uint64 wp_volume = 20;
    if (has_wp_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->wp_volume());
    }
    
    // optional uint32 rise = 21;
    if (has_rise()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rise());
    }
    
    // optional uint32 fall = 22;
    if (has_fall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fall());
    }
    
    // optional uint32 flat = 23;
    if (has_flat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flat());
    }
    
    // optional uint32 trading_day = 25;
    if (has_trading_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // optional uint32 trade_status = 26;
    if (has_trade_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_status());
    }
    
    // optional float speed_rate = 27;
    if (has_speed_rate()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float three_rate = 28;
    if (has_three_rate()) {
      total_size += 2 + 4;
    }
    
    // optional float three_tuv_rate = 29;
    if (has_three_tuv_rate()) {
      total_size += 2 + 4;
    }
    
    // optional float five_tuv_rate = 30;
    if (has_five_tuv_rate()) {
      total_size += 2 + 4;
    }
    
    // optional float ratio = 31;
    if (has_ratio()) {
      total_size += 2 + 4;
    }
    
    // optional uint64 cur_volume = 33;
    if (has_cur_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_volume());
    }
    
    // optional uint64 detail_volume = 34;
    if (has_detail_volume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->detail_volume());
    }
    
    // optional string block_type = 35;
    if (has_block_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_type());
    }
    
    // optional uint32 rise_day_num = 36;
    if (has_rise_day_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rise_day_num());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float five_rate = 50;
    if (has_five_rate()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 limit_up = 51;
    if (has_limit_up()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit_up());
    }
    
    // optional uint32 avg_price = 52;
    if (has_avg_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockMsg::MergeFrom(const BlockMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_code()) {
      set_block_code(from.block_code());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_highest_price()) {
      set_highest_price(from.highest_price());
    }
    if (from.has_lowest_price()) {
      set_lowest_price(from.lowest_price());
    }
    if (from.has_last_pice()) {
      set_last_pice(from.last_pice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_cir_stock()) {
      set_cir_stock(from.cir_stock());
    }
    if (from.has_tot_stock()) {
      set_tot_stock(from.tot_stock());
    }
    if (from.has_cir_value()) {
      set_cir_value(from.cir_value());
    }
    if (from.has_tot_value()) {
      set_tot_value(from.tot_value());
    }
    if (from.has_avg_stock()) {
      set_avg_stock(from.avg_stock());
    }
    if (from.has_turnover_rate()) {
      set_turnover_rate(from.turnover_rate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_np_volume()) {
      set_np_volume(from.np_volume());
    }
    if (from.has_wp_volume()) {
      set_wp_volume(from.wp_volume());
    }
    if (from.has_rise()) {
      set_rise(from.rise());
    }
    if (from.has_fall()) {
      set_fall(from.fall());
    }
    if (from.has_flat()) {
      set_flat(from.flat());
    }
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_trade_status()) {
      set_trade_status(from.trade_status());
    }
    if (from.has_speed_rate()) {
      set_speed_rate(from.speed_rate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_three_rate()) {
      set_three_rate(from.three_rate());
    }
    if (from.has_three_tuv_rate()) {
      set_three_tuv_rate(from.three_tuv_rate());
    }
    if (from.has_five_tuv_rate()) {
      set_five_tuv_rate(from.five_tuv_rate());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_cur_volume()) {
      set_cur_volume(from.cur_volume());
    }
    if (from.has_detail_volume()) {
      set_detail_volume(from.detail_volume());
    }
    if (from.has_block_type()) {
      set_block_type(from.block_type());
    }
    if (from.has_rise_day_num()) {
      set_rise_day_num(from.rise_day_num());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_five_rate()) {
      set_five_rate(from.five_rate());
    }
    if (from.has_limit_up()) {
      set_limit_up(from.limit_up());
    }
    if (from.has_avg_price()) {
      set_avg_price(from.avg_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockMsg::CopyFrom(const BlockMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMsg::IsInitialized() const {
  
  return true;
}

void BlockMsg::Swap(BlockMsg* other) {
  if (other != this) {
    std::swap(block_code_, other->block_code_);
    std::swap(block_name_, other->block_name_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(open_price_, other->open_price_);
    std::swap(highest_price_, other->highest_price_);
    std::swap(lowest_price_, other->lowest_price_);
    std::swap(last_pice_, other->last_pice_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(update_time_, other->update_time_);
    std::swap(cir_stock_, other->cir_stock_);
    std::swap(tot_stock_, other->tot_stock_);
    std::swap(cir_value_, other->cir_value_);
    std::swap(tot_value_, other->tot_value_);
    std::swap(avg_stock_, other->avg_stock_);
    std::swap(turnover_rate_, other->turnover_rate_);
    std::swap(np_volume_, other->np_volume_);
    std::swap(wp_volume_, other->wp_volume_);
    std::swap(rise_, other->rise_);
    std::swap(fall_, other->fall_);
    std::swap(flat_, other->flat_);
    std::swap(trading_day_, other->trading_day_);
    std::swap(trade_status_, other->trade_status_);
    std::swap(speed_rate_, other->speed_rate_);
    std::swap(three_rate_, other->three_rate_);
    std::swap(three_tuv_rate_, other->three_tuv_rate_);
    std::swap(five_tuv_rate_, other->five_tuv_rate_);
    std::swap(ratio_, other->ratio_);
    std::swap(cur_volume_, other->cur_volume_);
    std::swap(detail_volume_, other->detail_volume_);
    std::swap(block_type_, other->block_type_);
    std::swap(rise_day_num_, other->rise_day_num_);
    std::swap(five_rate_, other->five_rate_);
    std::swap(limit_up_, other->limit_up_);
    std::swap(avg_price_, other->avg_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockMsg_descriptor_;
  metadata.reflection = BlockMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KLine::kTradingDayFieldNumber;
const int KLine::kUpdateTimeFieldNumber;
const int KLine::kUpsertTimeFieldNumber;
const int KLine::kHighPriceFieldNumber;
const int KLine::kOpenPriceFieldNumber;
const int KLine::kLowPriceFieldNumber;
const int KLine::kClosePriceFieldNumber;
const int KLine::kVolumeFieldNumber;
const int KLine::kTurnoverFieldNumber;
const int KLine::kPreClosePriceFieldNumber;
const int KLine::kAvgPriceFieldNumber;
#endif  // !_MSC_VER

KLine::KLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KLine::InitAsDefaultInstance() {
}

KLine::KLine(const KLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KLine::SharedCtor() {
  _cached_size_ = 0;
  trading_day_ = 0u;
  update_time_ = 0u;
  upsert_time_ = 0u;
  high_price_ = 0u;
  open_price_ = 0u;
  low_price_ = 0u;
  close_price_ = 0u;
  volume_ = GOOGLE_ULONGLONG(0);
  turnover_ = GOOGLE_ULONGLONG(0);
  pre_close_price_ = 0u;
  avg_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KLine::~KLine() {
  SharedDtor();
}

void KLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KLine_descriptor_;
}

const KLine& KLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

KLine* KLine::default_instance_ = NULL;

KLine* KLine::New() const {
  return new KLine;
}

void KLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_day_ = 0u;
    update_time_ = 0u;
    upsert_time_ = 0u;
    high_price_ = 0u;
    open_price_ = 0u;
    low_price_ = 0u;
    close_price_ = 0u;
    volume_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    turnover_ = GOOGLE_ULONGLONG(0);
    pre_close_price_ = 0u;
    avg_price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 trading_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_time;
        break;
      }
      
      // required uint32 update_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_upsert_time;
        break;
      }
      
      // required uint32 upsert_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upsert_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upsert_time_)));
          set_has_upsert_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_high_price;
        break;
      }
      
      // required uint32 high_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_price_)));
          set_has_high_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_open_price;
        break;
      }
      
      // required uint32 open_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_price_)));
          set_has_open_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_low_price;
        break;
      }
      
      // required uint32 low_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_price_)));
          set_has_low_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_close_price;
        break;
      }
      
      // required uint32 close_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_price_)));
          set_has_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }
      
      // required uint64 volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_turnover;
        break;
      }
      
      // required uint64 turnover = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pre_close_price;
        break;
      }
      
      // required uint32 pre_close_price = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_avg_price;
        break;
      }
      
      // required uint32 avg_price = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avg_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_price_)));
          set_has_avg_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 trading_day = 1;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trading_day(), output);
  }
  
  // required uint32 update_time = 2;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_time(), output);
  }
  
  // required uint32 upsert_time = 3;
  if (has_upsert_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->upsert_time(), output);
  }
  
  // required uint32 high_price = 4;
  if (has_high_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->high_price(), output);
  }
  
  // required uint32 open_price = 5;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->open_price(), output);
  }
  
  // required uint32 low_price = 6;
  if (has_low_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->low_price(), output);
  }
  
  // required uint32 close_price = 7;
  if (has_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->close_price(), output);
  }
  
  // required uint64 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->volume(), output);
  }
  
  // required uint64 turnover = 9;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->turnover(), output);
  }
  
  // required uint32 pre_close_price = 10;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pre_close_price(), output);
  }
  
  // required uint32 avg_price = 11;
  if (has_avg_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avg_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 trading_day = 1;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trading_day(), target);
  }
  
  // required uint32 update_time = 2;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_time(), target);
  }
  
  // required uint32 upsert_time = 3;
  if (has_upsert_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->upsert_time(), target);
  }
  
  // required uint32 high_price = 4;
  if (has_high_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->high_price(), target);
  }
  
  // required uint32 open_price = 5;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->open_price(), target);
  }
  
  // required uint32 low_price = 6;
  if (has_low_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->low_price(), target);
  }
  
  // required uint32 close_price = 7;
  if (has_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->close_price(), target);
  }
  
  // required uint64 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->volume(), target);
  }
  
  // required uint64 turnover = 9;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->turnover(), target);
  }
  
  // required uint32 pre_close_price = 10;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pre_close_price(), target);
  }
  
  // required uint32 avg_price = 11;
  if (has_avg_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avg_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 trading_day = 1;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // required uint32 update_time = 2;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
    // required uint32 upsert_time = 3;
    if (has_upsert_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upsert_time());
    }
    
    // required uint32 high_price = 4;
    if (has_high_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_price());
    }
    
    // required uint32 open_price = 5;
    if (has_open_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_price());
    }
    
    // required uint32 low_price = 6;
    if (has_low_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_price());
    }
    
    // required uint32 close_price = 7;
    if (has_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->close_price());
    }
    
    // required uint64 volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 turnover = 9;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->turnover());
    }
    
    // required uint32 pre_close_price = 10;
    if (has_pre_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_close_price());
    }
    
    // required uint32 avg_price = 11;
    if (has_avg_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KLine::MergeFrom(const KLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_upsert_time()) {
      set_upsert_time(from.upsert_time());
    }
    if (from.has_high_price()) {
      set_high_price(from.high_price());
    }
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_low_price()) {
      set_low_price(from.low_price());
    }
    if (from.has_close_price()) {
      set_close_price(from.close_price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
    if (from.has_avg_price()) {
      set_avg_price(from.avg_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KLine::CopyFrom(const KLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;
  
  return true;
}

void KLine::Swap(KLine* other) {
  if (other != this) {
    std::swap(trading_day_, other->trading_day_);
    std::swap(update_time_, other->update_time_);
    std::swap(upsert_time_, other->upsert_time_);
    std::swap(high_price_, other->high_price_);
    std::swap(open_price_, other->open_price_);
    std::swap(low_price_, other->low_price_);
    std::swap(close_price_, other->close_price_);
    std::swap(volume_, other->volume_);
    std::swap(turnover_, other->turnover_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(avg_price_, other->avg_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KLine_descriptor_;
  metadata.reflection = KLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zhubi::kTradingDayFieldNumber;
const int Zhubi::kPriceFieldNumber;
const int Zhubi::kVolumeFieldNumber;
const int Zhubi::kAccessWayFieldNumber;
const int Zhubi::kUpdateTimeFieldNumber;
const int Zhubi::kTurnoverFieldNumber;
#endif  // !_MSC_VER

Zhubi::Zhubi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zhubi::InitAsDefaultInstance() {
}

Zhubi::Zhubi(const Zhubi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zhubi::SharedCtor() {
  _cached_size_ = 0;
  trading_day_ = 0u;
  price_ = 0u;
  volume_ = GOOGLE_ULONGLONG(0);
  access_way_ = 0u;
  update_time_ = 0u;
  turnover_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zhubi::~Zhubi() {
  SharedDtor();
}

void Zhubi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zhubi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zhubi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zhubi_descriptor_;
}

const Zhubi& Zhubi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

Zhubi* Zhubi::default_instance_ = NULL;

Zhubi* Zhubi::New() const {
  return new Zhubi;
}

void Zhubi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_day_ = 0u;
    price_ = 0u;
    volume_ = GOOGLE_ULONGLONG(0);
    access_way_ = 0u;
    update_time_ = 0u;
    turnover_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zhubi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 trading_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }
      
      // required uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }
      
      // required uint64 volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_access_way;
        break;
      }
      
      // required uint32 access_way = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_access_way:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &access_way_)));
          set_has_access_way();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }
      
      // required uint32 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turnover;
        break;
      }
      
      // required uint64 turnover = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zhubi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 trading_day = 1;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trading_day(), output);
  }
  
  // required uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }
  
  // required uint64 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->volume(), output);
  }
  
  // required uint32 access_way = 5;
  if (has_access_way()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->access_way(), output);
  }
  
  // required uint32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_time(), output);
  }
  
  // required uint64 turnover = 7;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->turnover(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zhubi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 trading_day = 1;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trading_day(), target);
  }
  
  // required uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }
  
  // required uint64 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->volume(), target);
  }
  
  // required uint32 access_way = 5;
  if (has_access_way()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->access_way(), target);
  }
  
  // required uint32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->update_time(), target);
  }
  
  // required uint64 turnover = 7;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->turnover(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zhubi::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 trading_day = 1;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // required uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }
    
    // required uint64 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }
    
    // required uint32 access_way = 5;
    if (has_access_way()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->access_way());
    }
    
    // required uint32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
    // required uint64 turnover = 7;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->turnover());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zhubi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zhubi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zhubi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zhubi::MergeFrom(const Zhubi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_access_way()) {
      set_access_way(from.access_way());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zhubi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zhubi::CopyFrom(const Zhubi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zhubi::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void Zhubi::Swap(Zhubi* other) {
  if (other != this) {
    std::swap(trading_day_, other->trading_day_);
    std::swap(price_, other->price_);
    std::swap(volume_, other->volume_);
    std::swap(access_way_, other->access_way_);
    std::swap(update_time_, other->update_time_);
    std::swap(turnover_, other->turnover_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zhubi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zhubi_descriptor_;
  metadata.reflection = Zhubi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PeriodKLine::kKlineTypeFieldNumber;
const int PeriodKLine::kStockCodeFieldNumber;
const int PeriodKLine::kKlineInfoFieldNumber;
#endif  // !_MSC_VER

PeriodKLine::PeriodKLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PeriodKLine::InitAsDefaultInstance() {
  kline_info_ = const_cast< ::QuoteProto::KLine*>(&::QuoteProto::KLine::default_instance());
}

PeriodKLine::PeriodKLine(const PeriodKLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PeriodKLine::SharedCtor() {
  _cached_size_ = 0;
  kline_type_ = 0u;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kline_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PeriodKLine::~PeriodKLine() {
  SharedDtor();
}

void PeriodKLine::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (this != default_instance_) {
    delete kline_info_;
  }
}

void PeriodKLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PeriodKLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PeriodKLine_descriptor_;
}

const PeriodKLine& PeriodKLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

PeriodKLine* PeriodKLine::default_instance_ = NULL;

PeriodKLine* PeriodKLine::New() const {
  return new PeriodKLine;
}

void PeriodKLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kline_type_ = 0u;
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_kline_info()) {
      if (kline_info_ != NULL) kline_info_->::QuoteProto::KLine::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PeriodKLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 kline_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kline_type_)));
          set_has_kline_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        break;
      }
      
      // required string stock_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kline_info;
        break;
      }
      
      // required .QuoteProto.KLine kline_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kline_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kline_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PeriodKLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 kline_type = 1;
  if (has_kline_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kline_type(), output);
  }
  
  // required string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_code(), output);
  }
  
  // required .QuoteProto.KLine kline_info = 3;
  if (has_kline_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->kline_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PeriodKLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 kline_type = 1;
  if (has_kline_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kline_type(), target);
  }
  
  // required string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_code(), target);
  }
  
  // required .QuoteProto.KLine kline_info = 3;
  if (has_kline_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->kline_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PeriodKLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 kline_type = 1;
    if (has_kline_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kline_type());
    }
    
    // required string stock_code = 2;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required .QuoteProto.KLine kline_info = 3;
    if (has_kline_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kline_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeriodKLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PeriodKLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PeriodKLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PeriodKLine::MergeFrom(const PeriodKLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kline_type()) {
      set_kline_type(from.kline_type());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_kline_info()) {
      mutable_kline_info()->::QuoteProto::KLine::MergeFrom(from.kline_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PeriodKLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeriodKLine::CopyFrom(const PeriodKLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodKLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_kline_info()) {
    if (!this->kline_info().IsInitialized()) return false;
  }
  return true;
}

void PeriodKLine::Swap(PeriodKLine* other) {
  if (other != this) {
    std::swap(kline_type_, other->kline_type_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(kline_info_, other->kline_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PeriodKLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PeriodKLine_descriptor_;
  metadata.reflection = PeriodKLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginInfo::kUidFieldNumber;
const int UserLoginInfo::kDeviceTypeFieldNumber;
const int UserLoginInfo::kOfflineFieldNumber;
#endif  // !_MSC_VER

UserLoginInfo::UserLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginInfo::InitAsDefaultInstance() {
}

UserLoginInfo::UserLoginInfo(const UserLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  device_type_ = 1;
  offline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginInfo::~UserLoginInfo() {
  SharedDtor();
}

void UserLoginInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginInfo_descriptor_;
}

const UserLoginInfo& UserLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

UserLoginInfo* UserLoginInfo::default_instance_ = NULL;

UserLoginInfo* UserLoginInfo::New() const {
  return new UserLoginInfo;
}

void UserLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    device_type_ = 1;
    offline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }
      
      // required .QuoteProto.DeviceType device_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::DeviceType_IsValid(value)) {
            set_device_type(static_cast< QuoteProto::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offline;
        break;
      }
      
      // optional bool offline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offline_)));
          set_has_offline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // required .QuoteProto.DeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }
  
  // optional bool offline = 3;
  if (has_offline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->offline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // required .QuoteProto.DeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }
  
  // optional bool offline = 3;
  if (has_offline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->offline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // required .QuoteProto.DeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }
    
    // optional bool offline = 3;
    if (has_offline()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginInfo::MergeFrom(const UserLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_offline()) {
      set_offline(from.offline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginInfo::CopyFrom(const UserLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void UserLoginInfo::Swap(UserLoginInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(device_type_, other->device_type_);
    std::swap(offline_, other->offline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginInfo_descriptor_;
  metadata.reflection = UserLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginKickInfo::kUidFieldNumber;
const int UserLoginKickInfo::kDeviceTypeFieldNumber;
const int UserLoginKickInfo::kKickDescFieldNumber;
#endif  // !_MSC_VER

UserLoginKickInfo::UserLoginKickInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginKickInfo::InitAsDefaultInstance() {
}

UserLoginKickInfo::UserLoginKickInfo(const UserLoginKickInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginKickInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  device_type_ = 1;
  kick_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginKickInfo::~UserLoginKickInfo() {
  SharedDtor();
}

void UserLoginKickInfo::SharedDtor() {
  if (kick_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete kick_desc_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginKickInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginKickInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginKickInfo_descriptor_;
}

const UserLoginKickInfo& UserLoginKickInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

UserLoginKickInfo* UserLoginKickInfo::default_instance_ = NULL;

UserLoginKickInfo* UserLoginKickInfo::New() const {
  return new UserLoginKickInfo;
}

void UserLoginKickInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    device_type_ = 1;
    if (has_kick_desc()) {
      if (kick_desc_ != &::google::protobuf::internal::kEmptyString) {
        kick_desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginKickInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_device_type;
        break;
      }
      
      // optional .QuoteProto.DeviceType device_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::DeviceType_IsValid(value)) {
            set_device_type(static_cast< QuoteProto::DeviceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_kick_desc;
        break;
      }
      
      // optional string kick_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kick_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kick_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kick_desc().data(), this->kick_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginKickInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }
  
  // optional .QuoteProto.DeviceType device_type = 2;
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->device_type(), output);
  }
  
  // optional string kick_desc = 3;
  if (has_kick_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kick_desc().data(), this->kick_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->kick_desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginKickInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }
  
  // optional .QuoteProto.DeviceType device_type = 2;
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->device_type(), target);
  }
  
  // optional string kick_desc = 3;
  if (has_kick_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kick_desc().data(), this->kick_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->kick_desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginKickInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }
    
    // optional .QuoteProto.DeviceType device_type = 2;
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
    }
    
    // optional string kick_desc = 3;
    if (has_kick_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kick_desc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginKickInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginKickInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginKickInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginKickInfo::MergeFrom(const UserLoginKickInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_kick_desc()) {
      set_kick_desc(from.kick_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginKickInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginKickInfo::CopyFrom(const UserLoginKickInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginKickInfo::IsInitialized() const {
  
  return true;
}

void UserLoginKickInfo::Swap(UserLoginKickInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(device_type_, other->device_type_);
    std::swap(kick_desc_, other->kick_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginKickInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginKickInfo_descriptor_;
  metadata.reflection = UserLoginKickInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrdFeild::kMoneyInputFieldNumber;
const int OrdFeild::kMoneyOutputFieldNumber;
const int OrdFeild::kMoneyNetputFieldNumber;
const int OrdFeild::kMoneyRateFieldNumber;
#endif  // !_MSC_VER

OrdFeild::OrdFeild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrdFeild::InitAsDefaultInstance() {
}

OrdFeild::OrdFeild(const OrdFeild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrdFeild::SharedCtor() {
  _cached_size_ = 0;
  money_input_ = GOOGLE_LONGLONG(0);
  money_output_ = GOOGLE_LONGLONG(0);
  money_netput_ = GOOGLE_LONGLONG(0);
  money_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrdFeild::~OrdFeild() {
  SharedDtor();
}

void OrdFeild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrdFeild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrdFeild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrdFeild_descriptor_;
}

const OrdFeild& OrdFeild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

OrdFeild* OrdFeild::default_instance_ = NULL;

OrdFeild* OrdFeild::New() const {
  return new OrdFeild;
}

void OrdFeild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    money_input_ = GOOGLE_LONGLONG(0);
    money_output_ = GOOGLE_LONGLONG(0);
    money_netput_ = GOOGLE_LONGLONG(0);
    money_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrdFeild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 money_input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_input_)));
          set_has_money_input();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money_output;
        break;
      }
      
      // optional int64 money_output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_output:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_output_)));
          set_has_money_output();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money_netput;
        break;
      }
      
      // optional int64 money_netput = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money_netput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_netput_)));
          set_has_money_netput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_money_rate;
        break;
      }
      
      // optional float money_rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_rate_)));
          set_has_money_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrdFeild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 money_input = 1;
  if (has_money_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->money_input(), output);
  }
  
  // optional int64 money_output = 2;
  if (has_money_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money_output(), output);
  }
  
  // optional int64 money_netput = 3;
  if (has_money_netput()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money_netput(), output);
  }
  
  // optional float money_rate = 4;
  if (has_money_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->money_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrdFeild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 money_input = 1;
  if (has_money_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->money_input(), target);
  }
  
  // optional int64 money_output = 2;
  if (has_money_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money_output(), target);
  }
  
  // optional int64 money_netput = 3;
  if (has_money_netput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money_netput(), target);
  }
  
  // optional float money_rate = 4;
  if (has_money_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->money_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrdFeild::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 money_input = 1;
    if (has_money_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money_input());
    }
    
    // optional int64 money_output = 2;
    if (has_money_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money_output());
    }
    
    // optional int64 money_netput = 3;
    if (has_money_netput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money_netput());
    }
    
    // optional float money_rate = 4;
    if (has_money_rate()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrdFeild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrdFeild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrdFeild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrdFeild::MergeFrom(const OrdFeild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money_input()) {
      set_money_input(from.money_input());
    }
    if (from.has_money_output()) {
      set_money_output(from.money_output());
    }
    if (from.has_money_netput()) {
      set_money_netput(from.money_netput());
    }
    if (from.has_money_rate()) {
      set_money_rate(from.money_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrdFeild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdFeild::CopyFrom(const OrdFeild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdFeild::IsInitialized() const {
  
  return true;
}

void OrdFeild::Swap(OrdFeild* other) {
  if (other != this) {
    std::swap(money_input_, other->money_input_);
    std::swap(money_output_, other->money_output_);
    std::swap(money_netput_, other->money_netput_);
    std::swap(money_rate_, other->money_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrdFeild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrdFeild_descriptor_;
  metadata.reflection = OrdFeild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyFeild::kTradingDayFieldNumber;
const int MoneyFeild::kLastPriceFieldNumber;
const int MoneyFeild::kPreClosePriceFieldNumber;
const int MoneyFeild::kRateFieldNumber;
const int MoneyFeild::kAuctionVolumeFieldNumber;
const int MoneyFeild::kAuctionTurnoverFieldNumber;
const int MoneyFeild::kActiveMoneyFieldNumber;
const int MoneyFeild::kLeaderMoneyFieldNumber;
const int MoneyFeild::kMaxordMoneyFieldNumber;
const int MoneyFeild::kBigordMoneyFieldNumber;
const int MoneyFeild::kMidordMoneyFieldNumber;
const int MoneyFeild::kMinordMoneyFieldNumber;
const int MoneyFeild::kAvgLessThreeFieldNumber;
const int MoneyFeild::kAvgLessFiveFieldNumber;
const int MoneyFeild::kLeaderNetVolumeFieldNumber;
const int MoneyFeild::kUpDownPriceFieldNumber;
#endif  // !_MSC_VER

MoneyFeild::MoneyFeild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyFeild::InitAsDefaultInstance() {
  active_money_ = const_cast< ::QuoteProto::OrdFeild*>(&::QuoteProto::OrdFeild::default_instance());
  leader_money_ = const_cast< ::QuoteProto::OrdFeild*>(&::QuoteProto::OrdFeild::default_instance());
  maxord_money_ = const_cast< ::QuoteProto::OrdFeild*>(&::QuoteProto::OrdFeild::default_instance());
  bigord_money_ = const_cast< ::QuoteProto::OrdFeild*>(&::QuoteProto::OrdFeild::default_instance());
  midord_money_ = const_cast< ::QuoteProto::OrdFeild*>(&::QuoteProto::OrdFeild::default_instance());
  minord_money_ = const_cast< ::QuoteProto::OrdFeild*>(&::QuoteProto::OrdFeild::default_instance());
}

MoneyFeild::MoneyFeild(const MoneyFeild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyFeild::SharedCtor() {
  _cached_size_ = 0;
  trading_day_ = 0u;
  last_price_ = 0u;
  pre_close_price_ = 0u;
  rate_ = 0;
  auction_volume_ = GOOGLE_ULONGLONG(0);
  auction_turnover_ = GOOGLE_ULONGLONG(0);
  active_money_ = NULL;
  leader_money_ = NULL;
  maxord_money_ = NULL;
  bigord_money_ = NULL;
  midord_money_ = NULL;
  minord_money_ = NULL;
  avg_less_three_ = 0;
  avg_less_five_ = 0;
  leader_net_volume_ = 0;
  up_down_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyFeild::~MoneyFeild() {
  SharedDtor();
}

void MoneyFeild::SharedDtor() {
  if (this != default_instance_) {
    delete active_money_;
    delete leader_money_;
    delete maxord_money_;
    delete bigord_money_;
    delete midord_money_;
    delete minord_money_;
  }
}

void MoneyFeild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyFeild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyFeild_descriptor_;
}

const MoneyFeild& MoneyFeild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

MoneyFeild* MoneyFeild::default_instance_ = NULL;

MoneyFeild* MoneyFeild::New() const {
  return new MoneyFeild;
}

void MoneyFeild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_day_ = 0u;
    last_price_ = 0u;
    pre_close_price_ = 0u;
    rate_ = 0;
    auction_volume_ = GOOGLE_ULONGLONG(0);
    auction_turnover_ = GOOGLE_ULONGLONG(0);
    if (has_active_money()) {
      if (active_money_ != NULL) active_money_->::QuoteProto::OrdFeild::Clear();
    }
    if (has_leader_money()) {
      if (leader_money_ != NULL) leader_money_->::QuoteProto::OrdFeild::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_maxord_money()) {
      if (maxord_money_ != NULL) maxord_money_->::QuoteProto::OrdFeild::Clear();
    }
    if (has_bigord_money()) {
      if (bigord_money_ != NULL) bigord_money_->::QuoteProto::OrdFeild::Clear();
    }
    if (has_midord_money()) {
      if (midord_money_ != NULL) midord_money_->::QuoteProto::OrdFeild::Clear();
    }
    if (has_minord_money()) {
      if (minord_money_ != NULL) minord_money_->::QuoteProto::OrdFeild::Clear();
    }
    avg_less_three_ = 0;
    avg_less_five_ = 0;
    leader_net_volume_ = 0;
    up_down_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyFeild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trading_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_price;
        break;
      }
      
      // optional uint32 last_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_price_)));
          set_has_last_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pre_close_price;
        break;
      }
      
      // optional uint32 pre_close_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_rate;
        break;
      }
      
      // optional float rate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_auction_volume;
        break;
      }
      
      // optional uint64 auction_volume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auction_volume_)));
          set_has_auction_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_auction_turnover;
        break;
      }
      
      // optional uint64 auction_turnover = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auction_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auction_turnover_)));
          set_has_auction_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_active_money;
        break;
      }
      
      // optional .QuoteProto.OrdFeild active_money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_leader_money;
        break;
      }
      
      // optional .QuoteProto.OrdFeild leader_money = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leader_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leader_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_maxord_money;
        break;
      }
      
      // optional .QuoteProto.OrdFeild maxord_money = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maxord_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxord_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bigord_money;
        break;
      }
      
      // optional .QuoteProto.OrdFeild bigord_money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bigord_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bigord_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_midord_money;
        break;
      }
      
      // optional .QuoteProto.OrdFeild midord_money = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_midord_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_midord_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_minord_money;
        break;
      }
      
      // optional .QuoteProto.OrdFeild minord_money = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_minord_money:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minord_money()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_avg_less_three;
        break;
      }
      
      // optional float avg_less_three = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_avg_less_three:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_less_three_)));
          set_has_avg_less_three();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_avg_less_five;
        break;
      }
      
      // optional float avg_less_five = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_avg_less_five:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avg_less_five_)));
          set_has_avg_less_five();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_leader_net_volume;
        break;
      }
      
      // optional float leader_net_volume = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leader_net_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leader_net_volume_)));
          set_has_leader_net_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_up_down_price;
        break;
      }
      
      // optional int32 up_down_price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_down_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &up_down_price_)));
          set_has_up_down_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyFeild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trading_day = 1;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trading_day(), output);
  }
  
  // optional uint32 last_price = 2;
  if (has_last_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_price(), output);
  }
  
  // optional uint32 pre_close_price = 3;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pre_close_price(), output);
  }
  
  // optional float rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rate(), output);
  }
  
  // optional uint64 auction_volume = 5;
  if (has_auction_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->auction_volume(), output);
  }
  
  // optional uint64 auction_turnover = 6;
  if (has_auction_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->auction_turnover(), output);
  }
  
  // optional .QuoteProto.OrdFeild active_money = 7;
  if (has_active_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->active_money(), output);
  }
  
  // optional .QuoteProto.OrdFeild leader_money = 8;
  if (has_leader_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->leader_money(), output);
  }
  
  // optional .QuoteProto.OrdFeild maxord_money = 9;
  if (has_maxord_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->maxord_money(), output);
  }
  
  // optional .QuoteProto.OrdFeild bigord_money = 10;
  if (has_bigord_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bigord_money(), output);
  }
  
  // optional .QuoteProto.OrdFeild midord_money = 11;
  if (has_midord_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->midord_money(), output);
  }
  
  // optional .QuoteProto.OrdFeild minord_money = 12;
  if (has_minord_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->minord_money(), output);
  }
  
  // optional float avg_less_three = 13;
  if (has_avg_less_three()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->avg_less_three(), output);
  }
  
  // optional float avg_less_five = 14;
  if (has_avg_less_five()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->avg_less_five(), output);
  }
  
  // optional float leader_net_volume = 15;
  if (has_leader_net_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->leader_net_volume(), output);
  }
  
  // optional int32 up_down_price = 16;
  if (has_up_down_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->up_down_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyFeild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trading_day = 1;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trading_day(), target);
  }
  
  // optional uint32 last_price = 2;
  if (has_last_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_price(), target);
  }
  
  // optional uint32 pre_close_price = 3;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pre_close_price(), target);
  }
  
  // optional float rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rate(), target);
  }
  
  // optional uint64 auction_volume = 5;
  if (has_auction_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->auction_volume(), target);
  }
  
  // optional uint64 auction_turnover = 6;
  if (has_auction_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->auction_turnover(), target);
  }
  
  // optional .QuoteProto.OrdFeild active_money = 7;
  if (has_active_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->active_money(), target);
  }
  
  // optional .QuoteProto.OrdFeild leader_money = 8;
  if (has_leader_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->leader_money(), target);
  }
  
  // optional .QuoteProto.OrdFeild maxord_money = 9;
  if (has_maxord_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->maxord_money(), target);
  }
  
  // optional .QuoteProto.OrdFeild bigord_money = 10;
  if (has_bigord_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bigord_money(), target);
  }
  
  // optional .QuoteProto.OrdFeild midord_money = 11;
  if (has_midord_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->midord_money(), target);
  }
  
  // optional .QuoteProto.OrdFeild minord_money = 12;
  if (has_minord_money()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->minord_money(), target);
  }
  
  // optional float avg_less_three = 13;
  if (has_avg_less_three()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->avg_less_three(), target);
  }
  
  // optional float avg_less_five = 14;
  if (has_avg_less_five()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->avg_less_five(), target);
  }
  
  // optional float leader_net_volume = 15;
  if (has_leader_net_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->leader_net_volume(), target);
  }
  
  // optional int32 up_down_price = 16;
  if (has_up_down_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->up_down_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyFeild::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trading_day = 1;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // optional uint32 last_price = 2;
    if (has_last_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_price());
    }
    
    // optional uint32 pre_close_price = 3;
    if (has_pre_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_close_price());
    }
    
    // optional float rate = 4;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 auction_volume = 5;
    if (has_auction_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auction_volume());
    }
    
    // optional uint64 auction_turnover = 6;
    if (has_auction_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auction_turnover());
    }
    
    // optional .QuoteProto.OrdFeild active_money = 7;
    if (has_active_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active_money());
    }
    
    // optional .QuoteProto.OrdFeild leader_money = 8;
    if (has_leader_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leader_money());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .QuoteProto.OrdFeild maxord_money = 9;
    if (has_maxord_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maxord_money());
    }
    
    // optional .QuoteProto.OrdFeild bigord_money = 10;
    if (has_bigord_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bigord_money());
    }
    
    // optional .QuoteProto.OrdFeild midord_money = 11;
    if (has_midord_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->midord_money());
    }
    
    // optional .QuoteProto.OrdFeild minord_money = 12;
    if (has_minord_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->minord_money());
    }
    
    // optional float avg_less_three = 13;
    if (has_avg_less_three()) {
      total_size += 1 + 4;
    }
    
    // optional float avg_less_five = 14;
    if (has_avg_less_five()) {
      total_size += 1 + 4;
    }
    
    // optional float leader_net_volume = 15;
    if (has_leader_net_volume()) {
      total_size += 1 + 4;
    }
    
    // optional int32 up_down_price = 16;
    if (has_up_down_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->up_down_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyFeild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyFeild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyFeild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyFeild::MergeFrom(const MoneyFeild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_last_price()) {
      set_last_price(from.last_price());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_auction_volume()) {
      set_auction_volume(from.auction_volume());
    }
    if (from.has_auction_turnover()) {
      set_auction_turnover(from.auction_turnover());
    }
    if (from.has_active_money()) {
      mutable_active_money()->::QuoteProto::OrdFeild::MergeFrom(from.active_money());
    }
    if (from.has_leader_money()) {
      mutable_leader_money()->::QuoteProto::OrdFeild::MergeFrom(from.leader_money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxord_money()) {
      mutable_maxord_money()->::QuoteProto::OrdFeild::MergeFrom(from.maxord_money());
    }
    if (from.has_bigord_money()) {
      mutable_bigord_money()->::QuoteProto::OrdFeild::MergeFrom(from.bigord_money());
    }
    if (from.has_midord_money()) {
      mutable_midord_money()->::QuoteProto::OrdFeild::MergeFrom(from.midord_money());
    }
    if (from.has_minord_money()) {
      mutable_minord_money()->::QuoteProto::OrdFeild::MergeFrom(from.minord_money());
    }
    if (from.has_avg_less_three()) {
      set_avg_less_three(from.avg_less_three());
    }
    if (from.has_avg_less_five()) {
      set_avg_less_five(from.avg_less_five());
    }
    if (from.has_leader_net_volume()) {
      set_leader_net_volume(from.leader_net_volume());
    }
    if (from.has_up_down_price()) {
      set_up_down_price(from.up_down_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyFeild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyFeild::CopyFrom(const MoneyFeild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyFeild::IsInitialized() const {
  
  return true;
}

void MoneyFeild::Swap(MoneyFeild* other) {
  if (other != this) {
    std::swap(trading_day_, other->trading_day_);
    std::swap(last_price_, other->last_price_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(rate_, other->rate_);
    std::swap(auction_volume_, other->auction_volume_);
    std::swap(auction_turnover_, other->auction_turnover_);
    std::swap(active_money_, other->active_money_);
    std::swap(leader_money_, other->leader_money_);
    std::swap(maxord_money_, other->maxord_money_);
    std::swap(bigord_money_, other->bigord_money_);
    std::swap(midord_money_, other->midord_money_);
    std::swap(minord_money_, other->minord_money_);
    std::swap(avg_less_three_, other->avg_less_three_);
    std::swap(avg_less_five_, other->avg_less_five_);
    std::swap(leader_net_volume_, other->leader_net_volume_);
    std::swap(up_down_price_, other->up_down_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyFeild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyFeild_descriptor_;
  metadata.reflection = MoneyFeild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyMsg::kStockCodeFieldNumber;
const int MoneyMsg::kStockNameFieldNumber;
const int MoneyMsg::kBlockNameFieldNumber;
const int MoneyMsg::kStockTypeFieldNumber;
const int MoneyMsg::kMoneyOneDayFieldNumber;
const int MoneyMsg::kMoneyThreeDayFieldNumber;
const int MoneyMsg::kMoneyFiveDayFieldNumber;
const int MoneyMsg::kMoneyTenDayFieldNumber;
#endif  // !_MSC_VER

MoneyMsg::MoneyMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyMsg::InitAsDefaultInstance() {
  money_one_day_ = const_cast< ::QuoteProto::MoneyFeild*>(&::QuoteProto::MoneyFeild::default_instance());
  money_three_day_ = const_cast< ::QuoteProto::MoneyFeild*>(&::QuoteProto::MoneyFeild::default_instance());
  money_five_day_ = const_cast< ::QuoteProto::MoneyFeild*>(&::QuoteProto::MoneyFeild::default_instance());
  money_ten_day_ = const_cast< ::QuoteProto::MoneyFeild*>(&::QuoteProto::MoneyFeild::default_instance());
}

MoneyMsg::MoneyMsg(const MoneyMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyMsg::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_one_day_ = NULL;
  money_three_day_ = NULL;
  money_five_day_ = NULL;
  money_ten_day_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyMsg::~MoneyMsg() {
  SharedDtor();
}

void MoneyMsg::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_type_;
  }
  if (this != default_instance_) {
    delete money_one_day_;
    delete money_three_day_;
    delete money_five_day_;
    delete money_ten_day_;
  }
}

void MoneyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyMsg_descriptor_;
}

const MoneyMsg& MoneyMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

MoneyMsg* MoneyMsg::default_instance_ = NULL;

MoneyMsg* MoneyMsg::New() const {
  return new MoneyMsg;
}

void MoneyMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    if (has_stock_type()) {
      if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
        stock_type_->clear();
      }
    }
    if (has_money_one_day()) {
      if (money_one_day_ != NULL) money_one_day_->::QuoteProto::MoneyFeild::Clear();
    }
    if (has_money_three_day()) {
      if (money_three_day_ != NULL) money_three_day_->::QuoteProto::MoneyFeild::Clear();
    }
    if (has_money_five_day()) {
      if (money_five_day_ != NULL) money_five_day_->::QuoteProto::MoneyFeild::Clear();
    }
    if (has_money_ten_day()) {
      if (money_ten_day_ != NULL) money_ten_day_->::QuoteProto::MoneyFeild::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_name;
        break;
      }
      
      // optional string stock_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stock_type;
        break;
      }
      
      // optional string stock_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_type().data(), this->stock_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_money_one_day;
        break;
      }
      
      // optional .QuoteProto.MoneyFeild money_one_day = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_one_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money_one_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_money_three_day;
        break;
      }
      
      // optional .QuoteProto.MoneyFeild money_three_day = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_three_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money_three_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_money_five_day;
        break;
      }
      
      // optional .QuoteProto.MoneyFeild money_five_day = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_five_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money_five_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_money_ten_day;
        break;
      }
      
      // optional .QuoteProto.MoneyFeild money_ten_day = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_money_ten_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_money_ten_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_name(), output);
  }
  
  // optional string block_name = 3;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->block_name(), output);
  }
  
  // optional string stock_type = 4;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stock_type(), output);
  }
  
  // optional .QuoteProto.MoneyFeild money_one_day = 5;
  if (has_money_one_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->money_one_day(), output);
  }
  
  // optional .QuoteProto.MoneyFeild money_three_day = 6;
  if (has_money_three_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->money_three_day(), output);
  }
  
  // optional .QuoteProto.MoneyFeild money_five_day = 7;
  if (has_money_five_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->money_five_day(), output);
  }
  
  // optional .QuoteProto.MoneyFeild money_ten_day = 8;
  if (has_money_ten_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->money_ten_day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_name(), target);
  }
  
  // optional string block_name = 3;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->block_name(), target);
  }
  
  // optional string stock_type = 4;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stock_type(), target);
  }
  
  // optional .QuoteProto.MoneyFeild money_one_day = 5;
  if (has_money_one_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->money_one_day(), target);
  }
  
  // optional .QuoteProto.MoneyFeild money_three_day = 6;
  if (has_money_three_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->money_three_day(), target);
  }
  
  // optional .QuoteProto.MoneyFeild money_five_day = 7;
  if (has_money_five_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->money_five_day(), target);
  }
  
  // optional .QuoteProto.MoneyFeild money_ten_day = 8;
  if (has_money_ten_day()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->money_ten_day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional string stock_name = 2;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // optional string block_name = 3;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional string stock_type = 4;
    if (has_stock_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_type());
    }
    
    // optional .QuoteProto.MoneyFeild money_one_day = 5;
    if (has_money_one_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money_one_day());
    }
    
    // optional .QuoteProto.MoneyFeild money_three_day = 6;
    if (has_money_three_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money_three_day());
    }
    
    // optional .QuoteProto.MoneyFeild money_five_day = 7;
    if (has_money_five_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money_five_day());
    }
    
    // optional .QuoteProto.MoneyFeild money_ten_day = 8;
    if (has_money_ten_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->money_ten_day());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyMsg::MergeFrom(const MoneyMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_stock_type()) {
      set_stock_type(from.stock_type());
    }
    if (from.has_money_one_day()) {
      mutable_money_one_day()->::QuoteProto::MoneyFeild::MergeFrom(from.money_one_day());
    }
    if (from.has_money_three_day()) {
      mutable_money_three_day()->::QuoteProto::MoneyFeild::MergeFrom(from.money_three_day());
    }
    if (from.has_money_five_day()) {
      mutable_money_five_day()->::QuoteProto::MoneyFeild::MergeFrom(from.money_five_day());
    }
    if (from.has_money_ten_day()) {
      mutable_money_ten_day()->::QuoteProto::MoneyFeild::MergeFrom(from.money_ten_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyMsg::CopyFrom(const MoneyMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyMsg::IsInitialized() const {
  
  return true;
}

void MoneyMsg::Swap(MoneyMsg* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(block_name_, other->block_name_);
    std::swap(stock_type_, other->stock_type_);
    std::swap(money_one_day_, other->money_one_day_);
    std::swap(money_three_day_, other->money_three_day_);
    std::swap(money_five_day_, other->money_five_day_);
    std::swap(money_ten_day_, other->money_ten_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyMsg_descriptor_;
  metadata.reflection = MoneyMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FundAbnormalMsg::kStockCodeFieldNumber;
const int FundAbnormalMsg::kStockNameFieldNumber;
const int FundAbnormalMsg::kStockTypeFieldNumber;
const int FundAbnormalMsg::kBlockNameFieldNumber;
const int FundAbnormalMsg::kRateFieldNumber;
const int FundAbnormalMsg::kThirtyRateFieldNumber;
const int FundAbnormalMsg::kActiveNetputFieldNumber;
const int FundAbnormalMsg::kThirtyActiveNetputFieldNumber;
const int FundAbnormalMsg::kLeaderNetputFieldNumber;
const int FundAbnormalMsg::kAvtiveRateFieldNumber;
const int FundAbnormalMsg::kLeaderRateFieldNumber;
const int FundAbnormalMsg::kTurnoverRateFieldNumber;
const int FundAbnormalMsg::kRatioFieldNumber;
const int FundAbnormalMsg::kCirValueFieldNumber;
const int FundAbnormalMsg::kPedFieldNumber;
const int FundAbnormalMsg::kThreeAvtiveNetputFieldNumber;
const int FundAbnormalMsg::kThreeRateFieldNumber;
const int FundAbnormalMsg::kFiveAvtiveNetputFieldNumber;
const int FundAbnormalMsg::kFiveRateFieldNumber;
const int FundAbnormalMsg::kLastPiceFieldNumber;
#endif  // !_MSC_VER

FundAbnormalMsg::FundAbnormalMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FundAbnormalMsg::InitAsDefaultInstance() {
}

FundAbnormalMsg::FundAbnormalMsg(const FundAbnormalMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FundAbnormalMsg::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = 0;
  thirty_rate_ = 0;
  active_netput_ = GOOGLE_LONGLONG(0);
  thirty_active_netput_ = GOOGLE_LONGLONG(0);
  leader_netput_ = GOOGLE_LONGLONG(0);
  avtive_rate_ = 0;
  leader_rate_ = 0;
  turnover_rate_ = 0;
  ratio_ = 0;
  cir_value_ = GOOGLE_ULONGLONG(0);
  ped_ = 0;
  three_avtive_netput_ = GOOGLE_LONGLONG(0);
  three_rate_ = 0;
  five_avtive_netput_ = GOOGLE_LONGLONG(0);
  five_rate_ = 0;
  last_pice_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FundAbnormalMsg::~FundAbnormalMsg() {
  SharedDtor();
}

void FundAbnormalMsg::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_type_;
  }
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (this != default_instance_) {
  }
}

void FundAbnormalMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FundAbnormalMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FundAbnormalMsg_descriptor_;
}

const FundAbnormalMsg& FundAbnormalMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

FundAbnormalMsg* FundAbnormalMsg::default_instance_ = NULL;

FundAbnormalMsg* FundAbnormalMsg::New() const {
  return new FundAbnormalMsg;
}

void FundAbnormalMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    if (has_stock_type()) {
      if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
        stock_type_->clear();
      }
    }
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    rate_ = 0;
    thirty_rate_ = 0;
    active_netput_ = GOOGLE_LONGLONG(0);
    thirty_active_netput_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    leader_netput_ = GOOGLE_LONGLONG(0);
    avtive_rate_ = 0;
    leader_rate_ = 0;
    turnover_rate_ = 0;
    ratio_ = 0;
    cir_value_ = GOOGLE_ULONGLONG(0);
    ped_ = 0;
    three_avtive_netput_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    three_rate_ = 0;
    five_avtive_netput_ = GOOGLE_LONGLONG(0);
    five_rate_ = 0;
    last_pice_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FundAbnormalMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_name;
        break;
      }
      
      // optional string stock_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_type;
        break;
      }
      
      // optional string stock_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_type().data(), this->stock_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rate;
        break;
      }
      
      // optional float rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_thirty_rate;
        break;
      }
      
      // optional float thirty_rate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_thirty_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thirty_rate_)));
          set_has_thirty_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_active_netput;
        break;
      }
      
      // optional int64 active_netput = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_netput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_netput_)));
          set_has_active_netput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_thirty_active_netput;
        break;
      }
      
      // optional int64 thirty_active_netput = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thirty_active_netput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &thirty_active_netput_)));
          set_has_thirty_active_netput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_leader_netput;
        break;
      }
      
      // optional int64 leader_netput = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_netput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leader_netput_)));
          set_has_leader_netput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_avtive_rate;
        break;
      }
      
      // optional float avtive_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_avtive_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &avtive_rate_)));
          set_has_avtive_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_leader_rate;
        break;
      }
      
      // optional float leader_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leader_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leader_rate_)));
          set_has_leader_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_turnover_rate;
        break;
      }
      
      // optional float turnover_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_turnover_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &turnover_rate_)));
          set_has_turnover_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_ratio;
        break;
      }
      
      // optional float ratio = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cir_value;
        break;
      }
      
      // optional uint64 cir_value = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cir_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cir_value_)));
          set_has_cir_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_ped;
        break;
      }
      
      // optional float ped = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ped_)));
          set_has_ped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_three_avtive_netput;
        break;
      }
      
      // optional int64 three_avtive_netput = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_three_avtive_netput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &three_avtive_netput_)));
          set_has_three_avtive_netput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_three_rate;
        break;
      }
      
      // optional float three_rate = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_three_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &three_rate_)));
          set_has_three_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_five_avtive_netput;
        break;
      }
      
      // optional int64 five_avtive_netput = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_five_avtive_netput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &five_avtive_netput_)));
          set_has_five_avtive_netput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_five_rate;
        break;
      }
      
      // optional float five_rate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_five_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &five_rate_)));
          set_has_five_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_last_pice;
        break;
      }
      
      // optional uint32 last_pice = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_pice_)));
          set_has_last_pice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FundAbnormalMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_name(), output);
  }
  
  // optional string stock_type = 3;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_type(), output);
  }
  
  // optional string block_name = 4;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->block_name(), output);
  }
  
  // optional float rate = 5;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rate(), output);
  }
  
  // optional float thirty_rate = 6;
  if (has_thirty_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thirty_rate(), output);
  }
  
  // optional int64 active_netput = 7;
  if (has_active_netput()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->active_netput(), output);
  }
  
  // optional int64 thirty_active_netput = 8;
  if (has_thirty_active_netput()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->thirty_active_netput(), output);
  }
  
  // optional int64 leader_netput = 9;
  if (has_leader_netput()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->leader_netput(), output);
  }
  
  // optional float avtive_rate = 10;
  if (has_avtive_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->avtive_rate(), output);
  }
  
  // optional float leader_rate = 11;
  if (has_leader_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->leader_rate(), output);
  }
  
  // optional float turnover_rate = 12;
  if (has_turnover_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->turnover_rate(), output);
  }
  
  // optional float ratio = 13;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->ratio(), output);
  }
  
  // optional uint64 cir_value = 14;
  if (has_cir_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->cir_value(), output);
  }
  
  // optional float ped = 15;
  if (has_ped()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->ped(), output);
  }
  
  // optional int64 three_avtive_netput = 16;
  if (has_three_avtive_netput()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->three_avtive_netput(), output);
  }
  
  // optional float three_rate = 17;
  if (has_three_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->three_rate(), output);
  }
  
  // optional int64 five_avtive_netput = 18;
  if (has_five_avtive_netput()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->five_avtive_netput(), output);
  }
  
  // optional float five_rate = 19;
  if (has_five_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->five_rate(), output);
  }
  
  // optional uint32 last_pice = 20;
  if (has_last_pice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->last_pice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FundAbnormalMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // optional string stock_name = 2;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_name(), target);
  }
  
  // optional string stock_type = 3;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_type(), target);
  }
  
  // optional string block_name = 4;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->block_name(), target);
  }
  
  // optional float rate = 5;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rate(), target);
  }
  
  // optional float thirty_rate = 6;
  if (has_thirty_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thirty_rate(), target);
  }
  
  // optional int64 active_netput = 7;
  if (has_active_netput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->active_netput(), target);
  }
  
  // optional int64 thirty_active_netput = 8;
  if (has_thirty_active_netput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->thirty_active_netput(), target);
  }
  
  // optional int64 leader_netput = 9;
  if (has_leader_netput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->leader_netput(), target);
  }
  
  // optional float avtive_rate = 10;
  if (has_avtive_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->avtive_rate(), target);
  }
  
  // optional float leader_rate = 11;
  if (has_leader_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->leader_rate(), target);
  }
  
  // optional float turnover_rate = 12;
  if (has_turnover_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->turnover_rate(), target);
  }
  
  // optional float ratio = 13;
  if (has_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->ratio(), target);
  }
  
  // optional uint64 cir_value = 14;
  if (has_cir_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->cir_value(), target);
  }
  
  // optional float ped = 15;
  if (has_ped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->ped(), target);
  }
  
  // optional int64 three_avtive_netput = 16;
  if (has_three_avtive_netput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->three_avtive_netput(), target);
  }
  
  // optional float three_rate = 17;
  if (has_three_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->three_rate(), target);
  }
  
  // optional int64 five_avtive_netput = 18;
  if (has_five_avtive_netput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->five_avtive_netput(), target);
  }
  
  // optional float five_rate = 19;
  if (has_five_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->five_rate(), target);
  }
  
  // optional uint32 last_pice = 20;
  if (has_last_pice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->last_pice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FundAbnormalMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional string stock_name = 2;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // optional string stock_type = 3;
    if (has_stock_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_type());
    }
    
    // optional string block_name = 4;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional float rate = 5;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float thirty_rate = 6;
    if (has_thirty_rate()) {
      total_size += 1 + 4;
    }
    
    // optional int64 active_netput = 7;
    if (has_active_netput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->active_netput());
    }
    
    // optional int64 thirty_active_netput = 8;
    if (has_thirty_active_netput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->thirty_active_netput());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 leader_netput = 9;
    if (has_leader_netput()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leader_netput());
    }
    
    // optional float avtive_rate = 10;
    if (has_avtive_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float leader_rate = 11;
    if (has_leader_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float turnover_rate = 12;
    if (has_turnover_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float ratio = 13;
    if (has_ratio()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 cir_value = 14;
    if (has_cir_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cir_value());
    }
    
    // optional float ped = 15;
    if (has_ped()) {
      total_size += 1 + 4;
    }
    
    // optional int64 three_avtive_netput = 16;
    if (has_three_avtive_netput()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->three_avtive_netput());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float three_rate = 17;
    if (has_three_rate()) {
      total_size += 2 + 4;
    }
    
    // optional int64 five_avtive_netput = 18;
    if (has_five_avtive_netput()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->five_avtive_netput());
    }
    
    // optional float five_rate = 19;
    if (has_five_rate()) {
      total_size += 2 + 4;
    }
    
    // optional uint32 last_pice = 20;
    if (has_last_pice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_pice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FundAbnormalMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FundAbnormalMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FundAbnormalMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FundAbnormalMsg::MergeFrom(const FundAbnormalMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_stock_type()) {
      set_stock_type(from.stock_type());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_thirty_rate()) {
      set_thirty_rate(from.thirty_rate());
    }
    if (from.has_active_netput()) {
      set_active_netput(from.active_netput());
    }
    if (from.has_thirty_active_netput()) {
      set_thirty_active_netput(from.thirty_active_netput());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leader_netput()) {
      set_leader_netput(from.leader_netput());
    }
    if (from.has_avtive_rate()) {
      set_avtive_rate(from.avtive_rate());
    }
    if (from.has_leader_rate()) {
      set_leader_rate(from.leader_rate());
    }
    if (from.has_turnover_rate()) {
      set_turnover_rate(from.turnover_rate());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_cir_value()) {
      set_cir_value(from.cir_value());
    }
    if (from.has_ped()) {
      set_ped(from.ped());
    }
    if (from.has_three_avtive_netput()) {
      set_three_avtive_netput(from.three_avtive_netput());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_three_rate()) {
      set_three_rate(from.three_rate());
    }
    if (from.has_five_avtive_netput()) {
      set_five_avtive_netput(from.five_avtive_netput());
    }
    if (from.has_five_rate()) {
      set_five_rate(from.five_rate());
    }
    if (from.has_last_pice()) {
      set_last_pice(from.last_pice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FundAbnormalMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundAbnormalMsg::CopyFrom(const FundAbnormalMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundAbnormalMsg::IsInitialized() const {
  
  return true;
}

void FundAbnormalMsg::Swap(FundAbnormalMsg* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(stock_type_, other->stock_type_);
    std::swap(block_name_, other->block_name_);
    std::swap(rate_, other->rate_);
    std::swap(thirty_rate_, other->thirty_rate_);
    std::swap(active_netput_, other->active_netput_);
    std::swap(thirty_active_netput_, other->thirty_active_netput_);
    std::swap(leader_netput_, other->leader_netput_);
    std::swap(avtive_rate_, other->avtive_rate_);
    std::swap(leader_rate_, other->leader_rate_);
    std::swap(turnover_rate_, other->turnover_rate_);
    std::swap(ratio_, other->ratio_);
    std::swap(cir_value_, other->cir_value_);
    std::swap(ped_, other->ped_);
    std::swap(three_avtive_netput_, other->three_avtive_netput_);
    std::swap(three_rate_, other->three_rate_);
    std::swap(five_avtive_netput_, other->five_avtive_netput_);
    std::swap(five_rate_, other->five_rate_);
    std::swap(last_pice_, other->last_pice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FundAbnormalMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FundAbnormalMsg_descriptor_;
  metadata.reflection = FundAbnormalMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidMsg::kStockCodeFieldNumber;
const int BidMsg::kStockTypeFieldNumber;
const int BidMsg::kStockNameFieldNumber;
const int BidMsg::kTradingDayFieldNumber;
const int BidMsg::kBiddingRiseFieldNumber;
const int BidMsg::kMainFundsFieldNumber;
const int BidMsg::kBiddingQuantityThanFieldNumber;
const int BidMsg::kPlateFieldNumber;
const int BidMsg::kBiddingVolumeFieldNumber;
const int BidMsg::kBiddingTurnoverFieldNumber;
const int BidMsg::kBiddingPriceFieldNumber;
const int BidMsg::kBiddingVolume1FieldNumber;
const int BidMsg::kCurrentValueFieldNumber;
const int BidMsg::kYesterdayRateFieldNumber;
const int BidMsg::kTradeStatusFieldNumber;
const int BidMsg::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

BidMsg::BidMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidMsg::InitAsDefaultInstance() {
}

BidMsg::BidMsg(const BidMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidMsg::SharedCtor() {
  _cached_size_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trading_day_ = 0u;
  bidding_rise_ = 0;
  main_funds_ = GOOGLE_ULONGLONG(0);
  bidding_quantity_than_ = GOOGLE_LONGLONG(0);
  plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bidding_volume_ = GOOGLE_ULONGLONG(0);
  bidding_turnover_ = GOOGLE_ULONGLONG(0);
  bidding_price_ = 0u;
  bidding_volume1_ = GOOGLE_ULONGLONG(0);
  current_value_ = GOOGLE_ULONGLONG(0);
  yesterday_rate_ = 0;
  trade_status_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidMsg::~BidMsg() {
  SharedDtor();
}

void BidMsg::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_type_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (plate_ != &::google::protobuf::internal::kEmptyString) {
    delete plate_;
  }
  if (this != default_instance_) {
  }
}

void BidMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidMsg_descriptor_;
}

const BidMsg& BidMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

BidMsg* BidMsg::default_instance_ = NULL;

BidMsg* BidMsg::New() const {
  return new BidMsg;
}

void BidMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_type()) {
      if (stock_type_ != &::google::protobuf::internal::kEmptyString) {
        stock_type_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    trading_day_ = 0u;
    bidding_rise_ = 0;
    main_funds_ = GOOGLE_ULONGLONG(0);
    bidding_quantity_than_ = GOOGLE_LONGLONG(0);
    if (has_plate()) {
      if (plate_ != &::google::protobuf::internal::kEmptyString) {
        plate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bidding_volume_ = GOOGLE_ULONGLONG(0);
    bidding_turnover_ = GOOGLE_ULONGLONG(0);
    bidding_price_ = 0u;
    bidding_volume1_ = GOOGLE_ULONGLONG(0);
    current_value_ = GOOGLE_ULONGLONG(0);
    yesterday_rate_ = 0;
    trade_status_ = 0u;
    update_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string stock_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_type;
        break;
      }
      
      // optional string stock_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_type().data(), this->stock_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_name;
        break;
      }
      
      // optional string stock_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_trading_day;
        break;
      }
      
      // optional uint32 trading_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_bidding_rise;
        break;
      }
      
      // optional float bidding_rise = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bidding_rise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bidding_rise_)));
          set_has_bidding_rise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_main_funds;
        break;
      }
      
      // optional uint64 main_funds = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_funds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &main_funds_)));
          set_has_main_funds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bidding_quantity_than;
        break;
      }
      
      // optional int64 bidding_quantity_than = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidding_quantity_than:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bidding_quantity_than_)));
          set_has_bidding_quantity_than();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_plate;
        break;
      }
      
      // optional string plate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plate().data(), this->plate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bidding_volume;
        break;
      }
      
      // optional uint64 bidding_volume = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidding_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bidding_volume_)));
          set_has_bidding_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bidding_turnover;
        break;
      }
      
      // optional uint64 bidding_turnover = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidding_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bidding_turnover_)));
          set_has_bidding_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bidding_price;
        break;
      }
      
      // optional uint32 bidding_price = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidding_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bidding_price_)));
          set_has_bidding_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bidding_volume1;
        break;
      }
      
      // optional uint64 bidding_volume1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidding_volume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bidding_volume1_)));
          set_has_bidding_volume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_current_value;
        break;
      }
      
      // optional uint64 current_value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &current_value_)));
          set_has_current_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_yesterday_rate;
        break;
      }
      
      // optional float yesterday_rate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yesterday_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yesterday_rate_)));
          set_has_yesterday_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_trade_status;
        break;
      }
      
      // optional uint32 trade_status = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trade_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trade_status_)));
          set_has_trade_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_update_time;
        break;
      }
      
      // optional uint32 update_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stock_code(), output);
  }
  
  // optional string stock_type = 2;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_type(), output);
  }
  
  // optional string stock_name = 3;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_name(), output);
  }
  
  // optional uint32 trading_day = 4;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->trading_day(), output);
  }
  
  // optional float bidding_rise = 5;
  if (has_bidding_rise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bidding_rise(), output);
  }
  
  // optional uint64 main_funds = 6;
  if (has_main_funds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->main_funds(), output);
  }
  
  // optional int64 bidding_quantity_than = 7;
  if (has_bidding_quantity_than()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->bidding_quantity_than(), output);
  }
  
  // optional string plate = 8;
  if (has_plate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plate().data(), this->plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->plate(), output);
  }
  
  // optional uint64 bidding_volume = 9;
  if (has_bidding_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->bidding_volume(), output);
  }
  
  // optional uint64 bidding_turnover = 10;
  if (has_bidding_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->bidding_turnover(), output);
  }
  
  // optional uint32 bidding_price = 11;
  if (has_bidding_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bidding_price(), output);
  }
  
  // optional uint64 bidding_volume1 = 12;
  if (has_bidding_volume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->bidding_volume1(), output);
  }
  
  // optional uint64 current_value = 13;
  if (has_current_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->current_value(), output);
  }
  
  // optional float yesterday_rate = 14;
  if (has_yesterday_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->yesterday_rate(), output);
  }
  
  // optional uint32 trade_status = 15;
  if (has_trade_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->trade_status(), output);
  }
  
  // optional uint32 update_time = 16;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->update_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string stock_code = 1;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stock_code(), target);
  }
  
  // optional string stock_type = 2;
  if (has_stock_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_type().data(), this->stock_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_type(), target);
  }
  
  // optional string stock_name = 3;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_name(), target);
  }
  
  // optional uint32 trading_day = 4;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->trading_day(), target);
  }
  
  // optional float bidding_rise = 5;
  if (has_bidding_rise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->bidding_rise(), target);
  }
  
  // optional uint64 main_funds = 6;
  if (has_main_funds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->main_funds(), target);
  }
  
  // optional int64 bidding_quantity_than = 7;
  if (has_bidding_quantity_than()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->bidding_quantity_than(), target);
  }
  
  // optional string plate = 8;
  if (has_plate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plate().data(), this->plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->plate(), target);
  }
  
  // optional uint64 bidding_volume = 9;
  if (has_bidding_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->bidding_volume(), target);
  }
  
  // optional uint64 bidding_turnover = 10;
  if (has_bidding_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->bidding_turnover(), target);
  }
  
  // optional uint32 bidding_price = 11;
  if (has_bidding_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bidding_price(), target);
  }
  
  // optional uint64 bidding_volume1 = 12;
  if (has_bidding_volume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->bidding_volume1(), target);
  }
  
  // optional uint64 current_value = 13;
  if (has_current_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->current_value(), target);
  }
  
  // optional float yesterday_rate = 14;
  if (has_yesterday_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->yesterday_rate(), target);
  }
  
  // optional uint32 trade_status = 15;
  if (has_trade_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->trade_status(), target);
  }
  
  // optional uint32 update_time = 16;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->update_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string stock_code = 1;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional string stock_type = 2;
    if (has_stock_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_type());
    }
    
    // optional string stock_name = 3;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // optional uint32 trading_day = 4;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // optional float bidding_rise = 5;
    if (has_bidding_rise()) {
      total_size += 1 + 4;
    }
    
    // optional uint64 main_funds = 6;
    if (has_main_funds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->main_funds());
    }
    
    // optional int64 bidding_quantity_than = 7;
    if (has_bidding_quantity_than()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bidding_quantity_than());
    }
    
    // optional string plate = 8;
    if (has_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 bidding_volume = 9;
    if (has_bidding_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bidding_volume());
    }
    
    // optional uint64 bidding_turnover = 10;
    if (has_bidding_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bidding_turnover());
    }
    
    // optional uint32 bidding_price = 11;
    if (has_bidding_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bidding_price());
    }
    
    // optional uint64 bidding_volume1 = 12;
    if (has_bidding_volume1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bidding_volume1());
    }
    
    // optional uint64 current_value = 13;
    if (has_current_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->current_value());
    }
    
    // optional float yesterday_rate = 14;
    if (has_yesterday_rate()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 trade_status = 15;
    if (has_trade_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trade_status());
    }
    
    // optional uint32 update_time = 16;
    if (has_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidMsg::MergeFrom(const BidMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_type()) {
      set_stock_type(from.stock_type());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_bidding_rise()) {
      set_bidding_rise(from.bidding_rise());
    }
    if (from.has_main_funds()) {
      set_main_funds(from.main_funds());
    }
    if (from.has_bidding_quantity_than()) {
      set_bidding_quantity_than(from.bidding_quantity_than());
    }
    if (from.has_plate()) {
      set_plate(from.plate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidding_volume()) {
      set_bidding_volume(from.bidding_volume());
    }
    if (from.has_bidding_turnover()) {
      set_bidding_turnover(from.bidding_turnover());
    }
    if (from.has_bidding_price()) {
      set_bidding_price(from.bidding_price());
    }
    if (from.has_bidding_volume1()) {
      set_bidding_volume1(from.bidding_volume1());
    }
    if (from.has_current_value()) {
      set_current_value(from.current_value());
    }
    if (from.has_yesterday_rate()) {
      set_yesterday_rate(from.yesterday_rate());
    }
    if (from.has_trade_status()) {
      set_trade_status(from.trade_status());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidMsg::CopyFrom(const BidMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidMsg::IsInitialized() const {
  
  return true;
}

void BidMsg::Swap(BidMsg* other) {
  if (other != this) {
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_type_, other->stock_type_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(trading_day_, other->trading_day_);
    std::swap(bidding_rise_, other->bidding_rise_);
    std::swap(main_funds_, other->main_funds_);
    std::swap(bidding_quantity_than_, other->bidding_quantity_than_);
    std::swap(plate_, other->plate_);
    std::swap(bidding_volume_, other->bidding_volume_);
    std::swap(bidding_turnover_, other->bidding_turnover_);
    std::swap(bidding_price_, other->bidding_price_);
    std::swap(bidding_volume1_, other->bidding_volume1_);
    std::swap(current_value_, other->current_value_);
    std::swap(yesterday_rate_, other->yesterday_rate_);
    std::swap(trade_status_, other->trade_status_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidMsg_descriptor_;
  metadata.reflection = BidMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidBlockMsg::kBlockCodeFieldNumber;
const int BidBlockMsg::kBlockNameFieldNumber;
const int BidBlockMsg::kRateFieldNumber;
const int BidBlockMsg::kUpdateTimeSecFieldNumber;
#endif  // !_MSC_VER

BidBlockMsg::BidBlockMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidBlockMsg::InitAsDefaultInstance() {
}

BidBlockMsg::BidBlockMsg(const BidBlockMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidBlockMsg::SharedCtor() {
  _cached_size_ = 0;
  block_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = 0;
  update_time_sec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidBlockMsg::~BidBlockMsg() {
  SharedDtor();
}

void BidBlockMsg::SharedDtor() {
  if (block_code_ != &::google::protobuf::internal::kEmptyString) {
    delete block_code_;
  }
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (this != default_instance_) {
  }
}

void BidBlockMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidBlockMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidBlockMsg_descriptor_;
}

const BidBlockMsg& BidBlockMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

BidBlockMsg* BidBlockMsg::default_instance_ = NULL;

BidBlockMsg* BidBlockMsg::New() const {
  return new BidBlockMsg;
}

void BidBlockMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_code()) {
      if (block_code_ != &::google::protobuf::internal::kEmptyString) {
        block_code_->clear();
      }
    }
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    rate_ = 0;
    update_time_sec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidBlockMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_code().data(), this->block_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rate;
        break;
      }
      
      // optional float rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time_sec;
        break;
      }
      
      // optional uint32 update_time_sec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_sec_)));
          set_has_update_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidBlockMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_code(), output);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->block_name(), output);
  }
  
  // optional float rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rate(), output);
  }
  
  // optional uint32 update_time_sec = 4;
  if (has_update_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time_sec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidBlockMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string block_code = 1;
  if (has_block_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_code().data(), this->block_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_code(), target);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_name(), target);
  }
  
  // optional float rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rate(), target);
  }
  
  // optional uint32 update_time_sec = 4;
  if (has_update_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_time_sec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidBlockMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string block_code = 1;
    if (has_block_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_code());
    }
    
    // optional string block_name = 2;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional float rate = 3;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 update_time_sec = 4;
    if (has_update_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time_sec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidBlockMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidBlockMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidBlockMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidBlockMsg::MergeFrom(const BidBlockMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_code()) {
      set_block_code(from.block_code());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_update_time_sec()) {
      set_update_time_sec(from.update_time_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidBlockMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidBlockMsg::CopyFrom(const BidBlockMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidBlockMsg::IsInitialized() const {
  
  return true;
}

void BidBlockMsg::Swap(BidBlockMsg* other) {
  if (other != this) {
    std::swap(block_code_, other->block_code_);
    std::swap(block_name_, other->block_name_);
    std::swap(rate_, other->rate_);
    std::swap(update_time_sec_, other->update_time_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidBlockMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidBlockMsg_descriptor_;
  metadata.reflection = BidBlockMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BidClientMsg::kBaseInfoFieldNumber;
const int BidClientMsg::kLastPiceFieldNumber;
const int BidClientMsg::kRateFieldNumber;
const int BidClientMsg::kPreClosePriceFieldNumber;
const int BidClientMsg::kUpsertTimeFieldNumber;
#endif  // !_MSC_VER

BidClientMsg::BidClientMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BidClientMsg::InitAsDefaultInstance() {
  base_info_ = const_cast< ::QuoteProto::BidMsg*>(&::QuoteProto::BidMsg::default_instance());
}

BidClientMsg::BidClientMsg(const BidClientMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BidClientMsg::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  last_pice_ = 0u;
  rate_ = 0;
  pre_close_price_ = 0u;
  upsert_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BidClientMsg::~BidClientMsg() {
  SharedDtor();
}

void BidClientMsg::SharedDtor() {
  if (this != default_instance_) {
    delete base_info_;
  }
}

void BidClientMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BidClientMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BidClientMsg_descriptor_;
}

const BidClientMsg& BidClientMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

BidClientMsg* BidClientMsg::default_instance_ = NULL;

BidClientMsg* BidClientMsg::New() const {
  return new BidClientMsg;
}

void BidClientMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::QuoteProto::BidMsg::Clear();
    }
    last_pice_ = 0u;
    rate_ = 0;
    pre_close_price_ = 0u;
    upsert_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BidClientMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuoteProto.BidMsg base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_pice;
        break;
      }
      
      // optional uint32 last_pice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_pice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_pice_)));
          set_has_last_pice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rate;
        break;
      }
      
      // optional float rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pre_close_price;
        break;
      }
      
      // optional uint32 pre_close_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pre_close_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_close_price_)));
          set_has_pre_close_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_upsert_time;
        break;
      }
      
      // optional uint64 upsert_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upsert_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upsert_time_)));
          set_has_upsert_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BidClientMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuoteProto.BidMsg base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_info(), output);
  }
  
  // optional uint32 last_pice = 2;
  if (has_last_pice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_pice(), output);
  }
  
  // optional float rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rate(), output);
  }
  
  // optional uint32 pre_close_price = 4;
  if (has_pre_close_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pre_close_price(), output);
  }
  
  // optional uint64 upsert_time = 5;
  if (has_upsert_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->upsert_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BidClientMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuoteProto.BidMsg base_info = 1;
  if (has_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_info(), target);
  }
  
  // optional uint32 last_pice = 2;
  if (has_last_pice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_pice(), target);
  }
  
  // optional float rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rate(), target);
  }
  
  // optional uint32 pre_close_price = 4;
  if (has_pre_close_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pre_close_price(), target);
  }
  
  // optional uint64 upsert_time = 5;
  if (has_upsert_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->upsert_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BidClientMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuoteProto.BidMsg base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }
    
    // optional uint32 last_pice = 2;
    if (has_last_pice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_pice());
    }
    
    // optional float rate = 3;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 pre_close_price = 4;
    if (has_pre_close_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_close_price());
    }
    
    // optional uint64 upsert_time = 5;
    if (has_upsert_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upsert_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BidClientMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BidClientMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BidClientMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BidClientMsg::MergeFrom(const BidClientMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::QuoteProto::BidMsg::MergeFrom(from.base_info());
    }
    if (from.has_last_pice()) {
      set_last_pice(from.last_pice());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_pre_close_price()) {
      set_pre_close_price(from.pre_close_price());
    }
    if (from.has_upsert_time()) {
      set_upsert_time(from.upsert_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BidClientMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BidClientMsg::CopyFrom(const BidClientMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BidClientMsg::IsInitialized() const {
  
  return true;
}

void BidClientMsg::Swap(BidClientMsg* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(last_pice_, other->last_pice_);
    std::swap(rate_, other->rate_);
    std::swap(pre_close_price_, other->pre_close_price_);
    std::swap(upsert_time_, other->upsert_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BidClientMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BidClientMsg_descriptor_;
  metadata.reflection = BidClientMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockFundAbnormalItem::kBlockInfoFieldNumber;
const int BlockFundAbnormalItem::kStkFieldNumber;
#endif  // !_MSC_VER

BlockFundAbnormalItem::BlockFundAbnormalItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockFundAbnormalItem::InitAsDefaultInstance() {
  block_info_ = const_cast< ::QuoteProto::StockMsg*>(&::QuoteProto::StockMsg::default_instance());
}

BlockFundAbnormalItem::BlockFundAbnormalItem(const BlockFundAbnormalItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockFundAbnormalItem::SharedCtor() {
  _cached_size_ = 0;
  block_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockFundAbnormalItem::~BlockFundAbnormalItem() {
  SharedDtor();
}

void BlockFundAbnormalItem::SharedDtor() {
  if (this != default_instance_) {
    delete block_info_;
  }
}

void BlockFundAbnormalItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockFundAbnormalItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockFundAbnormalItem_descriptor_;
}

const BlockFundAbnormalItem& BlockFundAbnormalItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

BlockFundAbnormalItem* BlockFundAbnormalItem::default_instance_ = NULL;

BlockFundAbnormalItem* BlockFundAbnormalItem::New() const {
  return new BlockFundAbnormalItem;
}

void BlockFundAbnormalItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_info()) {
      if (block_info_ != NULL) block_info_->::QuoteProto::StockMsg::Clear();
    }
  }
  stk_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockFundAbnormalItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .QuoteProto.StockMsg block_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        break;
      }
      
      // repeated .QuoteProto.StockMsg stk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stk;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockFundAbnormalItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .QuoteProto.StockMsg block_info = 1;
  if (has_block_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block_info(), output);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stk(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockFundAbnormalItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .QuoteProto.StockMsg block_info = 1;
  if (has_block_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block_info(), target);
  }
  
  // repeated .QuoteProto.StockMsg stk = 2;
  for (int i = 0; i < this->stk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stk(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockFundAbnormalItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .QuoteProto.StockMsg block_info = 1;
    if (has_block_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_info());
    }
    
  }
  // repeated .QuoteProto.StockMsg stk = 2;
  total_size += 1 * this->stk_size();
  for (int i = 0; i < this->stk_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stk(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockFundAbnormalItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockFundAbnormalItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockFundAbnormalItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockFundAbnormalItem::MergeFrom(const BlockFundAbnormalItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  stk_.MergeFrom(from.stk_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_info()) {
      mutable_block_info()->::QuoteProto::StockMsg::MergeFrom(from.block_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockFundAbnormalItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockFundAbnormalItem::CopyFrom(const BlockFundAbnormalItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockFundAbnormalItem::IsInitialized() const {
  
  if (has_block_info()) {
    if (!this->block_info().IsInitialized()) return false;
  }
  for (int i = 0; i < stk_size(); i++) {
    if (!this->stk(i).IsInitialized()) return false;
  }
  return true;
}

void BlockFundAbnormalItem::Swap(BlockFundAbnormalItem* other) {
  if (other != this) {
    std::swap(block_info_, other->block_info_);
    stk_.Swap(&other->stk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockFundAbnormalItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockFundAbnormalItem_descriptor_;
  metadata.reflection = BlockFundAbnormalItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RiseFallMonitorNumMsg::kRealTimeNumFieldNumber;
const int RiseFallMonitorNumMsg::kNaturalNumFieldNumber;
const int RiseFallMonitorNumMsg::kContinuousNumFieldNumber;
const int RiseFallMonitorNumMsg::kAwordPlateFieldNumber;
const int RiseFallMonitorNumMsg::kSealingPlateRateFieldNumber;
const int RiseFallMonitorNumMsg::kFriedPlateFieldNumber;
const int RiseFallMonitorNumMsg::kYeaterdayLimitRateFieldNumber;
const int RiseFallMonitorNumMsg::kYeaterdayHighOpenRateFieldNumber;
const int RiseFallMonitorNumMsg::kYeaterdayProfitRateFieldNumber;
const int RiseFallMonitorNumMsg::kYeaterdayContinuousLimitRateFieldNumber;
const int RiseFallMonitorNumMsg::kYeaterdayContinuousHighOpenRateFieldNumber;
const int RiseFallMonitorNumMsg::kYeaterdayContinuousProfitRateFieldNumber;
const int RiseFallMonitorNumMsg::kUpdateTimeSecFieldNumber;
const int RiseFallMonitorNumMsg::kTradingDayFieldNumber;
#endif  // !_MSC_VER

RiseFallMonitorNumMsg::RiseFallMonitorNumMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RiseFallMonitorNumMsg::InitAsDefaultInstance() {
}

RiseFallMonitorNumMsg::RiseFallMonitorNumMsg(const RiseFallMonitorNumMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RiseFallMonitorNumMsg::SharedCtor() {
  _cached_size_ = 0;
  real_time_num_ = 0;
  natural_num_ = 0u;
  continuous_num_ = 0u;
  aword_plate_ = 0u;
  sealing_plate_rate_ = 0;
  fried_plate_ = 0u;
  yeaterday_limit_rate_ = 0;
  yeaterday_high_open_rate_ = 0;
  yeaterday_profit_rate_ = 0;
  yeaterday_continuous_limit_rate_ = 0;
  yeaterday_continuous_high_open_rate_ = 0;
  yeaterday_continuous_profit_rate_ = 0;
  update_time_sec_ = 0u;
  trading_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RiseFallMonitorNumMsg::~RiseFallMonitorNumMsg() {
  SharedDtor();
}

void RiseFallMonitorNumMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RiseFallMonitorNumMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RiseFallMonitorNumMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RiseFallMonitorNumMsg_descriptor_;
}

const RiseFallMonitorNumMsg& RiseFallMonitorNumMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

RiseFallMonitorNumMsg* RiseFallMonitorNumMsg::default_instance_ = NULL;

RiseFallMonitorNumMsg* RiseFallMonitorNumMsg::New() const {
  return new RiseFallMonitorNumMsg;
}

void RiseFallMonitorNumMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    real_time_num_ = 0;
    natural_num_ = 0u;
    continuous_num_ = 0u;
    aword_plate_ = 0u;
    sealing_plate_rate_ = 0;
    fried_plate_ = 0u;
    yeaterday_limit_rate_ = 0;
    yeaterday_high_open_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    yeaterday_profit_rate_ = 0;
    yeaterday_continuous_limit_rate_ = 0;
    yeaterday_continuous_high_open_rate_ = 0;
    yeaterday_continuous_profit_rate_ = 0;
    update_time_sec_ = 0u;
    trading_day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RiseFallMonitorNumMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 real_time_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &real_time_num_)));
          set_has_real_time_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_natural_num;
        break;
      }
      
      // optional uint32 natural_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_natural_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &natural_num_)));
          set_has_natural_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_continuous_num;
        break;
      }
      
      // optional uint32 continuous_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continuous_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &continuous_num_)));
          set_has_continuous_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_aword_plate;
        break;
      }
      
      // optional uint32 aword_plate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aword_plate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aword_plate_)));
          set_has_aword_plate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_sealing_plate_rate;
        break;
      }
      
      // optional float sealing_plate_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sealing_plate_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sealing_plate_rate_)));
          set_has_sealing_plate_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fried_plate;
        break;
      }
      
      // optional uint32 fried_plate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fried_plate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fried_plate_)));
          set_has_fried_plate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_yeaterday_limit_rate;
        break;
      }
      
      // optional float yeaterday_limit_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yeaterday_limit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yeaterday_limit_rate_)));
          set_has_yeaterday_limit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_yeaterday_high_open_rate;
        break;
      }
      
      // optional float yeaterday_high_open_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yeaterday_high_open_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yeaterday_high_open_rate_)));
          set_has_yeaterday_high_open_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_yeaterday_profit_rate;
        break;
      }
      
      // optional int32 yeaterday_profit_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yeaterday_profit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yeaterday_profit_rate_)));
          set_has_yeaterday_profit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_yeaterday_continuous_limit_rate;
        break;
      }
      
      // optional float yeaterday_continuous_limit_rate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yeaterday_continuous_limit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yeaterday_continuous_limit_rate_)));
          set_has_yeaterday_continuous_limit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_yeaterday_continuous_high_open_rate;
        break;
      }
      
      // optional float yeaterday_continuous_high_open_rate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yeaterday_continuous_high_open_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yeaterday_continuous_high_open_rate_)));
          set_has_yeaterday_continuous_high_open_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_yeaterday_continuous_profit_rate;
        break;
      }
      
      // optional int32 yeaterday_continuous_profit_rate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yeaterday_continuous_profit_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yeaterday_continuous_profit_rate_)));
          set_has_yeaterday_continuous_profit_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_update_time_sec;
        break;
      }
      
      // optional uint32 update_time_sec = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_sec_)));
          set_has_update_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_trading_day;
        break;
      }
      
      // optional uint32 trading_day = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trading_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RiseFallMonitorNumMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 real_time_num = 1;
  if (has_real_time_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->real_time_num(), output);
  }
  
  // optional uint32 natural_num = 2;
  if (has_natural_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->natural_num(), output);
  }
  
  // optional uint32 continuous_num = 3;
  if (has_continuous_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->continuous_num(), output);
  }
  
  // optional uint32 aword_plate = 4;
  if (has_aword_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->aword_plate(), output);
  }
  
  // optional float sealing_plate_rate = 5;
  if (has_sealing_plate_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sealing_plate_rate(), output);
  }
  
  // optional uint32 fried_plate = 6;
  if (has_fried_plate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fried_plate(), output);
  }
  
  // optional float yeaterday_limit_rate = 7;
  if (has_yeaterday_limit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yeaterday_limit_rate(), output);
  }
  
  // optional float yeaterday_high_open_rate = 8;
  if (has_yeaterday_high_open_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yeaterday_high_open_rate(), output);
  }
  
  // optional int32 yeaterday_profit_rate = 9;
  if (has_yeaterday_profit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->yeaterday_profit_rate(), output);
  }
  
  // optional float yeaterday_continuous_limit_rate = 10;
  if (has_yeaterday_continuous_limit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->yeaterday_continuous_limit_rate(), output);
  }
  
  // optional float yeaterday_continuous_high_open_rate = 11;
  if (has_yeaterday_continuous_high_open_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->yeaterday_continuous_high_open_rate(), output);
  }
  
  // optional int32 yeaterday_continuous_profit_rate = 12;
  if (has_yeaterday_continuous_profit_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->yeaterday_continuous_profit_rate(), output);
  }
  
  // optional uint32 update_time_sec = 13;
  if (has_update_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->update_time_sec(), output);
  }
  
  // optional uint32 trading_day = 14;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->trading_day(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RiseFallMonitorNumMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 real_time_num = 1;
  if (has_real_time_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->real_time_num(), target);
  }
  
  // optional uint32 natural_num = 2;
  if (has_natural_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->natural_num(), target);
  }
  
  // optional uint32 continuous_num = 3;
  if (has_continuous_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->continuous_num(), target);
  }
  
  // optional uint32 aword_plate = 4;
  if (has_aword_plate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->aword_plate(), target);
  }
  
  // optional float sealing_plate_rate = 5;
  if (has_sealing_plate_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sealing_plate_rate(), target);
  }
  
  // optional uint32 fried_plate = 6;
  if (has_fried_plate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fried_plate(), target);
  }
  
  // optional float yeaterday_limit_rate = 7;
  if (has_yeaterday_limit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yeaterday_limit_rate(), target);
  }
  
  // optional float yeaterday_high_open_rate = 8;
  if (has_yeaterday_high_open_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yeaterday_high_open_rate(), target);
  }
  
  // optional int32 yeaterday_profit_rate = 9;
  if (has_yeaterday_profit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->yeaterday_profit_rate(), target);
  }
  
  // optional float yeaterday_continuous_limit_rate = 10;
  if (has_yeaterday_continuous_limit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->yeaterday_continuous_limit_rate(), target);
  }
  
  // optional float yeaterday_continuous_high_open_rate = 11;
  if (has_yeaterday_continuous_high_open_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->yeaterday_continuous_high_open_rate(), target);
  }
  
  // optional int32 yeaterday_continuous_profit_rate = 12;
  if (has_yeaterday_continuous_profit_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->yeaterday_continuous_profit_rate(), target);
  }
  
  // optional uint32 update_time_sec = 13;
  if (has_update_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->update_time_sec(), target);
  }
  
  // optional uint32 trading_day = 14;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->trading_day(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RiseFallMonitorNumMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 real_time_num = 1;
    if (has_real_time_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_time_num());
    }
    
    // optional uint32 natural_num = 2;
    if (has_natural_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->natural_num());
    }
    
    // optional uint32 continuous_num = 3;
    if (has_continuous_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->continuous_num());
    }
    
    // optional uint32 aword_plate = 4;
    if (has_aword_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aword_plate());
    }
    
    // optional float sealing_plate_rate = 5;
    if (has_sealing_plate_rate()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 fried_plate = 6;
    if (has_fried_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fried_plate());
    }
    
    // optional float yeaterday_limit_rate = 7;
    if (has_yeaterday_limit_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float yeaterday_high_open_rate = 8;
    if (has_yeaterday_high_open_rate()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 yeaterday_profit_rate = 9;
    if (has_yeaterday_profit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yeaterday_profit_rate());
    }
    
    // optional float yeaterday_continuous_limit_rate = 10;
    if (has_yeaterday_continuous_limit_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float yeaterday_continuous_high_open_rate = 11;
    if (has_yeaterday_continuous_high_open_rate()) {
      total_size += 1 + 4;
    }
    
    // optional int32 yeaterday_continuous_profit_rate = 12;
    if (has_yeaterday_continuous_profit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yeaterday_continuous_profit_rate());
    }
    
    // optional uint32 update_time_sec = 13;
    if (has_update_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time_sec());
    }
    
    // optional uint32 trading_day = 14;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RiseFallMonitorNumMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RiseFallMonitorNumMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RiseFallMonitorNumMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RiseFallMonitorNumMsg::MergeFrom(const RiseFallMonitorNumMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_real_time_num()) {
      set_real_time_num(from.real_time_num());
    }
    if (from.has_natural_num()) {
      set_natural_num(from.natural_num());
    }
    if (from.has_continuous_num()) {
      set_continuous_num(from.continuous_num());
    }
    if (from.has_aword_plate()) {
      set_aword_plate(from.aword_plate());
    }
    if (from.has_sealing_plate_rate()) {
      set_sealing_plate_rate(from.sealing_plate_rate());
    }
    if (from.has_fried_plate()) {
      set_fried_plate(from.fried_plate());
    }
    if (from.has_yeaterday_limit_rate()) {
      set_yeaterday_limit_rate(from.yeaterday_limit_rate());
    }
    if (from.has_yeaterday_high_open_rate()) {
      set_yeaterday_high_open_rate(from.yeaterday_high_open_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yeaterday_profit_rate()) {
      set_yeaterday_profit_rate(from.yeaterday_profit_rate());
    }
    if (from.has_yeaterday_continuous_limit_rate()) {
      set_yeaterday_continuous_limit_rate(from.yeaterday_continuous_limit_rate());
    }
    if (from.has_yeaterday_continuous_high_open_rate()) {
      set_yeaterday_continuous_high_open_rate(from.yeaterday_continuous_high_open_rate());
    }
    if (from.has_yeaterday_continuous_profit_rate()) {
      set_yeaterday_continuous_profit_rate(from.yeaterday_continuous_profit_rate());
    }
    if (from.has_update_time_sec()) {
      set_update_time_sec(from.update_time_sec());
    }
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RiseFallMonitorNumMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RiseFallMonitorNumMsg::CopyFrom(const RiseFallMonitorNumMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RiseFallMonitorNumMsg::IsInitialized() const {
  
  return true;
}

void RiseFallMonitorNumMsg::Swap(RiseFallMonitorNumMsg* other) {
  if (other != this) {
    std::swap(real_time_num_, other->real_time_num_);
    std::swap(natural_num_, other->natural_num_);
    std::swap(continuous_num_, other->continuous_num_);
    std::swap(aword_plate_, other->aword_plate_);
    std::swap(sealing_plate_rate_, other->sealing_plate_rate_);
    std::swap(fried_plate_, other->fried_plate_);
    std::swap(yeaterday_limit_rate_, other->yeaterday_limit_rate_);
    std::swap(yeaterday_high_open_rate_, other->yeaterday_high_open_rate_);
    std::swap(yeaterday_profit_rate_, other->yeaterday_profit_rate_);
    std::swap(yeaterday_continuous_limit_rate_, other->yeaterday_continuous_limit_rate_);
    std::swap(yeaterday_continuous_high_open_rate_, other->yeaterday_continuous_high_open_rate_);
    std::swap(yeaterday_continuous_profit_rate_, other->yeaterday_continuous_profit_rate_);
    std::swap(update_time_sec_, other->update_time_sec_);
    std::swap(trading_day_, other->trading_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RiseFallMonitorNumMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RiseFallMonitorNumMsg_descriptor_;
  metadata.reflection = RiseFallMonitorNumMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RateMsg::kMessageTypeFieldNumber;
const int RateMsg::kSecurityCodeFieldNumber;
const int RateMsg::kSecurityTypeFieldNumber;
const int RateMsg::kSecurityNameFieldNumber;
const int RateMsg::kRiseFieldNumber;
const int RateMsg::kPlateFieldNumber;
const int RateMsg::kUpLimitRateTimeFieldNumber;
const int RateMsg::kContinuousUpLimitRateFieldNumber;
const int RateMsg::kContinuousLowerLimitRateFieldNumber;
const int RateMsg::kUpLimitVolumeFieldNumber;
const int RateMsg::kLowerLimitVolumeFieldNumber;
const int RateMsg::kLowerLimitRateTimeFieldNumber;
const int RateMsg::kFriedTimeFieldNumber;
const int RateMsg::kFriedNumFieldNumber;
const int RateMsg::kMainFundsFieldNumber;
const int RateMsg::kToUpLimitTimeFieldNumber;
const int RateMsg::kToLowerLimitTimeFieldNumber;
const int RateMsg::kHistoryContinuousFieldNumber;
const int RateMsg::kUpdateTimeSecFieldNumber;
const int RateMsg::kTradingdayFieldNumber;
const int RateMsg::kLastPriceFieldNumber;
#endif  // !_MSC_VER

RateMsg::RateMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RateMsg::InitAsDefaultInstance() {
}

RateMsg::RateMsg(const RateMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RateMsg::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0u;
  security_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  security_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rise_ = 0;
  plate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  up_limit_rate_time_ = 0u;
  continuous_up_limit_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  continuous_lower_limit_rate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  up_limit_volume_ = GOOGLE_ULONGLONG(0);
  lower_limit_volume_ = GOOGLE_ULONGLONG(0);
  lower_limit_rate_time_ = 0u;
  fried_time_ = 0u;
  fried_num_ = 0u;
  main_funds_ = GOOGLE_LONGLONG(0);
  to_up_limit_time_ = 0u;
  to_lower_limit_time_ = 0u;
  history_continuous_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_sec_ = 0u;
  tradingday_ = 0u;
  last_price_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RateMsg::~RateMsg() {
  SharedDtor();
}

void RateMsg::SharedDtor() {
  if (security_code_ != &::google::protobuf::internal::kEmptyString) {
    delete security_code_;
  }
  if (security_type_ != &::google::protobuf::internal::kEmptyString) {
    delete security_type_;
  }
  if (security_name_ != &::google::protobuf::internal::kEmptyString) {
    delete security_name_;
  }
  if (plate_ != &::google::protobuf::internal::kEmptyString) {
    delete plate_;
  }
  if (continuous_up_limit_rate_ != &::google::protobuf::internal::kEmptyString) {
    delete continuous_up_limit_rate_;
  }
  if (continuous_lower_limit_rate_ != &::google::protobuf::internal::kEmptyString) {
    delete continuous_lower_limit_rate_;
  }
  if (history_continuous_ != &::google::protobuf::internal::kEmptyString) {
    delete history_continuous_;
  }
  if (this != default_instance_) {
  }
}

void RateMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RateMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RateMsg_descriptor_;
}

const RateMsg& RateMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

RateMsg* RateMsg::default_instance_ = NULL;

RateMsg* RateMsg::New() const {
  return new RateMsg;
}

void RateMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 0u;
    if (has_security_code()) {
      if (security_code_ != &::google::protobuf::internal::kEmptyString) {
        security_code_->clear();
      }
    }
    if (has_security_type()) {
      if (security_type_ != &::google::protobuf::internal::kEmptyString) {
        security_type_->clear();
      }
    }
    if (has_security_name()) {
      if (security_name_ != &::google::protobuf::internal::kEmptyString) {
        security_name_->clear();
      }
    }
    rise_ = 0;
    if (has_plate()) {
      if (plate_ != &::google::protobuf::internal::kEmptyString) {
        plate_->clear();
      }
    }
    up_limit_rate_time_ = 0u;
    if (has_continuous_up_limit_rate()) {
      if (continuous_up_limit_rate_ != &::google::protobuf::internal::kEmptyString) {
        continuous_up_limit_rate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_continuous_lower_limit_rate()) {
      if (continuous_lower_limit_rate_ != &::google::protobuf::internal::kEmptyString) {
        continuous_lower_limit_rate_->clear();
      }
    }
    up_limit_volume_ = GOOGLE_ULONGLONG(0);
    lower_limit_volume_ = GOOGLE_ULONGLONG(0);
    lower_limit_rate_time_ = 0u;
    fried_time_ = 0u;
    fried_num_ = 0u;
    main_funds_ = GOOGLE_LONGLONG(0);
    to_up_limit_time_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    to_lower_limit_time_ = 0u;
    if (has_history_continuous()) {
      if (history_continuous_ != &::google::protobuf::internal::kEmptyString) {
        history_continuous_->clear();
      }
    }
    update_time_sec_ = 0u;
    tradingday_ = 0u;
    last_price_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RateMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_security_code;
        break;
      }
      
      // optional string security_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_code().data(), this->security_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_security_type;
        break;
      }
      
      // optional string security_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_type().data(), this->security_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_security_name;
        break;
      }
      
      // optional string security_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_security_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_security_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->security_name().data(), this->security_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rise;
        break;
      }
      
      // optional float rise = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rise_)));
          set_has_rise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_plate;
        break;
      }
      
      // optional string plate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plate().data(), this->plate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_up_limit_rate_time;
        break;
      }
      
      // optional uint32 up_limit_rate_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_limit_rate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_limit_rate_time_)));
          set_has_up_limit_rate_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_continuous_up_limit_rate;
        break;
      }
      
      // optional string continuous_up_limit_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continuous_up_limit_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continuous_up_limit_rate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->continuous_up_limit_rate().data(), this->continuous_up_limit_rate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_continuous_lower_limit_rate;
        break;
      }
      
      // optional string continuous_lower_limit_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_continuous_lower_limit_rate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continuous_lower_limit_rate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->continuous_lower_limit_rate().data(), this->continuous_lower_limit_rate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_up_limit_volume;
        break;
      }
      
      // optional uint64 up_limit_volume = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_up_limit_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &up_limit_volume_)));
          set_has_up_limit_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lower_limit_volume;
        break;
      }
      
      // optional uint64 lower_limit_volume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lower_limit_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lower_limit_volume_)));
          set_has_lower_limit_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lower_limit_rate_time;
        break;
      }
      
      // optional uint32 lower_limit_rate_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lower_limit_rate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lower_limit_rate_time_)));
          set_has_lower_limit_rate_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fried_time;
        break;
      }
      
      // optional uint32 fried_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fried_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fried_time_)));
          set_has_fried_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fried_num;
        break;
      }
      
      // optional uint32 fried_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fried_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fried_num_)));
          set_has_fried_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_main_funds;
        break;
      }
      
      // optional int64 main_funds = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_main_funds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &main_funds_)));
          set_has_main_funds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_to_up_limit_time;
        break;
      }
      
      // optional uint32 to_up_limit_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_up_limit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_up_limit_time_)));
          set_has_to_up_limit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_to_lower_limit_time;
        break;
      }
      
      // optional uint32 to_lower_limit_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_to_lower_limit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &to_lower_limit_time_)));
          set_has_to_lower_limit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_history_continuous;
        break;
      }
      
      // optional string history_continuous = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_history_continuous:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_history_continuous()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->history_continuous().data(), this->history_continuous().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_update_time_sec;
        break;
      }
      
      // optional uint32 update_time_sec = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_sec_)));
          set_has_update_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tradingday;
        break;
      }
      
      // optional uint32 tradingday = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradingday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tradingday_)));
          set_has_tradingday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_last_price;
        break;
      }
      
      // optional uint32 last_price = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_price_)));
          set_has_last_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RateMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_type(), output);
  }
  
  // optional string security_code = 2;
  if (has_security_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_code().data(), this->security_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->security_code(), output);
  }
  
  // optional string security_type = 3;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->security_type(), output);
  }
  
  // optional string security_name = 4;
  if (has_security_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_name().data(), this->security_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->security_name(), output);
  }
  
  // optional float rise = 5;
  if (has_rise()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rise(), output);
  }
  
  // optional string plate = 6;
  if (has_plate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plate().data(), this->plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->plate(), output);
  }
  
  // optional uint32 up_limit_rate_time = 7;
  if (has_up_limit_rate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->up_limit_rate_time(), output);
  }
  
  // optional string continuous_up_limit_rate = 8;
  if (has_continuous_up_limit_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continuous_up_limit_rate().data(), this->continuous_up_limit_rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->continuous_up_limit_rate(), output);
  }
  
  // optional string continuous_lower_limit_rate = 9;
  if (has_continuous_lower_limit_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continuous_lower_limit_rate().data(), this->continuous_lower_limit_rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->continuous_lower_limit_rate(), output);
  }
  
  // optional uint64 up_limit_volume = 10;
  if (has_up_limit_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->up_limit_volume(), output);
  }
  
  // optional uint64 lower_limit_volume = 11;
  if (has_lower_limit_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lower_limit_volume(), output);
  }
  
  // optional uint32 lower_limit_rate_time = 12;
  if (has_lower_limit_rate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->lower_limit_rate_time(), output);
  }
  
  // optional uint32 fried_time = 13;
  if (has_fried_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fried_time(), output);
  }
  
  // optional uint32 fried_num = 14;
  if (has_fried_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fried_num(), output);
  }
  
  // optional int64 main_funds = 15;
  if (has_main_funds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->main_funds(), output);
  }
  
  // optional uint32 to_up_limit_time = 16;
  if (has_to_up_limit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->to_up_limit_time(), output);
  }
  
  // optional uint32 to_lower_limit_time = 17;
  if (has_to_lower_limit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->to_lower_limit_time(), output);
  }
  
  // optional string history_continuous = 18;
  if (has_history_continuous()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->history_continuous().data(), this->history_continuous().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->history_continuous(), output);
  }
  
  // optional uint32 update_time_sec = 19;
  if (has_update_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->update_time_sec(), output);
  }
  
  // optional uint32 tradingday = 20;
  if (has_tradingday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tradingday(), output);
  }
  
  // optional uint32 last_price = 21;
  if (has_last_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->last_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RateMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_type(), target);
  }
  
  // optional string security_code = 2;
  if (has_security_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_code().data(), this->security_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->security_code(), target);
  }
  
  // optional string security_type = 3;
  if (has_security_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_type().data(), this->security_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->security_type(), target);
  }
  
  // optional string security_name = 4;
  if (has_security_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->security_name().data(), this->security_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->security_name(), target);
  }
  
  // optional float rise = 5;
  if (has_rise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rise(), target);
  }
  
  // optional string plate = 6;
  if (has_plate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plate().data(), this->plate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->plate(), target);
  }
  
  // optional uint32 up_limit_rate_time = 7;
  if (has_up_limit_rate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->up_limit_rate_time(), target);
  }
  
  // optional string continuous_up_limit_rate = 8;
  if (has_continuous_up_limit_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continuous_up_limit_rate().data(), this->continuous_up_limit_rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->continuous_up_limit_rate(), target);
  }
  
  // optional string continuous_lower_limit_rate = 9;
  if (has_continuous_lower_limit_rate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continuous_lower_limit_rate().data(), this->continuous_lower_limit_rate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->continuous_lower_limit_rate(), target);
  }
  
  // optional uint64 up_limit_volume = 10;
  if (has_up_limit_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->up_limit_volume(), target);
  }
  
  // optional uint64 lower_limit_volume = 11;
  if (has_lower_limit_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lower_limit_volume(), target);
  }
  
  // optional uint32 lower_limit_rate_time = 12;
  if (has_lower_limit_rate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->lower_limit_rate_time(), target);
  }
  
  // optional uint32 fried_time = 13;
  if (has_fried_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->fried_time(), target);
  }
  
  // optional uint32 fried_num = 14;
  if (has_fried_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fried_num(), target);
  }
  
  // optional int64 main_funds = 15;
  if (has_main_funds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->main_funds(), target);
  }
  
  // optional uint32 to_up_limit_time = 16;
  if (has_to_up_limit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->to_up_limit_time(), target);
  }
  
  // optional uint32 to_lower_limit_time = 17;
  if (has_to_lower_limit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->to_lower_limit_time(), target);
  }
  
  // optional string history_continuous = 18;
  if (has_history_continuous()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->history_continuous().data(), this->history_continuous().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->history_continuous(), target);
  }
  
  // optional uint32 update_time_sec = 19;
  if (has_update_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->update_time_sec(), target);
  }
  
  // optional uint32 tradingday = 20;
  if (has_tradingday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tradingday(), target);
  }
  
  // optional uint32 last_price = 21;
  if (has_last_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->last_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RateMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }
    
    // optional string security_code = 2;
    if (has_security_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_code());
    }
    
    // optional string security_type = 3;
    if (has_security_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_type());
    }
    
    // optional string security_name = 4;
    if (has_security_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->security_name());
    }
    
    // optional float rise = 5;
    if (has_rise()) {
      total_size += 1 + 4;
    }
    
    // optional string plate = 6;
    if (has_plate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plate());
    }
    
    // optional uint32 up_limit_rate_time = 7;
    if (has_up_limit_rate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_limit_rate_time());
    }
    
    // optional string continuous_up_limit_rate = 8;
    if (has_continuous_up_limit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continuous_up_limit_rate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string continuous_lower_limit_rate = 9;
    if (has_continuous_lower_limit_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continuous_lower_limit_rate());
    }
    
    // optional uint64 up_limit_volume = 10;
    if (has_up_limit_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->up_limit_volume());
    }
    
    // optional uint64 lower_limit_volume = 11;
    if (has_lower_limit_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lower_limit_volume());
    }
    
    // optional uint32 lower_limit_rate_time = 12;
    if (has_lower_limit_rate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lower_limit_rate_time());
    }
    
    // optional uint32 fried_time = 13;
    if (has_fried_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fried_time());
    }
    
    // optional uint32 fried_num = 14;
    if (has_fried_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fried_num());
    }
    
    // optional int64 main_funds = 15;
    if (has_main_funds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->main_funds());
    }
    
    // optional uint32 to_up_limit_time = 16;
    if (has_to_up_limit_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_up_limit_time());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 to_lower_limit_time = 17;
    if (has_to_lower_limit_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->to_lower_limit_time());
    }
    
    // optional string history_continuous = 18;
    if (has_history_continuous()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->history_continuous());
    }
    
    // optional uint32 update_time_sec = 19;
    if (has_update_time_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time_sec());
    }
    
    // optional uint32 tradingday = 20;
    if (has_tradingday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tradingday());
    }
    
    // optional uint32 last_price = 21;
    if (has_last_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_price());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RateMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RateMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RateMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RateMsg::MergeFrom(const RateMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_security_code()) {
      set_security_code(from.security_code());
    }
    if (from.has_security_type()) {
      set_security_type(from.security_type());
    }
    if (from.has_security_name()) {
      set_security_name(from.security_name());
    }
    if (from.has_rise()) {
      set_rise(from.rise());
    }
    if (from.has_plate()) {
      set_plate(from.plate());
    }
    if (from.has_up_limit_rate_time()) {
      set_up_limit_rate_time(from.up_limit_rate_time());
    }
    if (from.has_continuous_up_limit_rate()) {
      set_continuous_up_limit_rate(from.continuous_up_limit_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_continuous_lower_limit_rate()) {
      set_continuous_lower_limit_rate(from.continuous_lower_limit_rate());
    }
    if (from.has_up_limit_volume()) {
      set_up_limit_volume(from.up_limit_volume());
    }
    if (from.has_lower_limit_volume()) {
      set_lower_limit_volume(from.lower_limit_volume());
    }
    if (from.has_lower_limit_rate_time()) {
      set_lower_limit_rate_time(from.lower_limit_rate_time());
    }
    if (from.has_fried_time()) {
      set_fried_time(from.fried_time());
    }
    if (from.has_fried_num()) {
      set_fried_num(from.fried_num());
    }
    if (from.has_main_funds()) {
      set_main_funds(from.main_funds());
    }
    if (from.has_to_up_limit_time()) {
      set_to_up_limit_time(from.to_up_limit_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_to_lower_limit_time()) {
      set_to_lower_limit_time(from.to_lower_limit_time());
    }
    if (from.has_history_continuous()) {
      set_history_continuous(from.history_continuous());
    }
    if (from.has_update_time_sec()) {
      set_update_time_sec(from.update_time_sec());
    }
    if (from.has_tradingday()) {
      set_tradingday(from.tradingday());
    }
    if (from.has_last_price()) {
      set_last_price(from.last_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RateMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateMsg::CopyFrom(const RateMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateMsg::IsInitialized() const {
  
  return true;
}

void RateMsg::Swap(RateMsg* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(security_code_, other->security_code_);
    std::swap(security_type_, other->security_type_);
    std::swap(security_name_, other->security_name_);
    std::swap(rise_, other->rise_);
    std::swap(plate_, other->plate_);
    std::swap(up_limit_rate_time_, other->up_limit_rate_time_);
    std::swap(continuous_up_limit_rate_, other->continuous_up_limit_rate_);
    std::swap(continuous_lower_limit_rate_, other->continuous_lower_limit_rate_);
    std::swap(up_limit_volume_, other->up_limit_volume_);
    std::swap(lower_limit_volume_, other->lower_limit_volume_);
    std::swap(lower_limit_rate_time_, other->lower_limit_rate_time_);
    std::swap(fried_time_, other->fried_time_);
    std::swap(fried_num_, other->fried_num_);
    std::swap(main_funds_, other->main_funds_);
    std::swap(to_up_limit_time_, other->to_up_limit_time_);
    std::swap(to_lower_limit_time_, other->to_lower_limit_time_);
    std::swap(history_continuous_, other->history_continuous_);
    std::swap(update_time_sec_, other->update_time_sec_);
    std::swap(tradingday_, other->tradingday_);
    std::swap(last_price_, other->last_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RateMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RateMsg_descriptor_;
  metadata.reflection = RateMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShortMotionMsg::kIndexFieldNumber;
const int ShortMotionMsg::kShortTypeFieldNumber;
const int ShortMotionMsg::kStockCodeFieldNumber;
const int ShortMotionMsg::kStockNameFieldNumber;
const int ShortMotionMsg::kUpdateTimeSecFieldNumber;
const int ShortMotionMsg::kDetailVolFieldNumber;
const int ShortMotionMsg::kRateFieldNumber;
const int ShortMotionMsg::kLastPriceFieldNumber;
const int ShortMotionMsg::kBuyVolumeFieldNumber;
const int ShortMotionMsg::kBuyVolume1FieldNumber;
const int ShortMotionMsg::kSellVolumeFieldNumber;
const int ShortMotionMsg::kSellVolume1FieldNumber;
#endif  // !_MSC_VER

ShortMotionMsg::ShortMotionMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShortMotionMsg::InitAsDefaultInstance() {
}

ShortMotionMsg::ShortMotionMsg(const ShortMotionMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShortMotionMsg::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  short_type_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_sec_ = 0u;
  detail_vol_ = GOOGLE_ULONGLONG(0);
  rate_ = 0;
  last_price_ = 0;
  buy_volume_ = 0;
  buy_volume1_ = 0;
  sell_volume_ = 0;
  sell_volume1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortMotionMsg::~ShortMotionMsg() {
  SharedDtor();
}

void ShortMotionMsg::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (this != default_instance_) {
  }
}

void ShortMotionMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortMotionMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMotionMsg_descriptor_;
}

const ShortMotionMsg& ShortMotionMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

ShortMotionMsg* ShortMotionMsg::default_instance_ = NULL;

ShortMotionMsg* ShortMotionMsg::New() const {
  return new ShortMotionMsg;
}

void ShortMotionMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    short_type_ = 0;
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    update_time_sec_ = 0u;
    detail_vol_ = GOOGLE_ULONGLONG(0);
    rate_ = 0;
    last_price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buy_volume_ = 0;
    buy_volume1_ = 0;
    sell_volume_ = 0;
    sell_volume1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShortMotionMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_short_type;
        break;
      }
      
      // optional .QuoteProto.ShortMotionType short_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_short_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::ShortMotionType_IsValid(value)) {
            set_short_type(static_cast< QuoteProto::ShortMotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_code;
        break;
      }
      
      // optional string stock_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stock_name;
        break;
      }
      
      // optional string stock_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_update_time_sec;
        break;
      }
      
      // optional uint32 update_time_sec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_sec_)));
          set_has_update_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_detail_vol;
        break;
      }
      
      // optional uint64 detail_vol = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detail_vol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &detail_vol_)));
          set_has_detail_vol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_rate;
        break;
      }
      
      // optional float rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_price;
        break;
      }
      
      // optional int32 last_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_price_)));
          set_has_last_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buy_volume;
        break;
      }
      
      // optional int32 buy_volume = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_volume_)));
          set_has_buy_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_buy_volume1;
        break;
      }
      
      // optional int32 buy_volume1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_volume1_)));
          set_has_buy_volume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_sell_volume;
        break;
      }
      
      // optional int32 sell_volume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_volume_)));
          set_has_sell_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_sell_volume1;
        break;
      }
      
      // optional int32 sell_volume1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_volume1_)));
          set_has_sell_volume1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShortMotionMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional .QuoteProto.ShortMotionType short_type = 2;
  if (has_short_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->short_type(), output);
  }
  
  // optional string stock_code = 3;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_code(), output);
  }
  
  // optional string stock_name = 4;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stock_name(), output);
  }
  
  // optional uint32 update_time_sec = 5;
  if (has_update_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->update_time_sec(), output);
  }
  
  // optional uint64 detail_vol = 6;
  if (has_detail_vol()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->detail_vol(), output);
  }
  
  // optional float rate = 7;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->rate(), output);
  }
  
  // optional int32 last_price = 8;
  if (has_last_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->last_price(), output);
  }
  
  // optional int32 buy_volume = 9;
  if (has_buy_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->buy_volume(), output);
  }
  
  // optional int32 buy_volume1 = 10;
  if (has_buy_volume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->buy_volume1(), output);
  }
  
  // optional int32 sell_volume = 11;
  if (has_sell_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sell_volume(), output);
  }
  
  // optional int32 sell_volume1 = 12;
  if (has_sell_volume1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sell_volume1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShortMotionMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional .QuoteProto.ShortMotionType short_type = 2;
  if (has_short_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->short_type(), target);
  }
  
  // optional string stock_code = 3;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_code(), target);
  }
  
  // optional string stock_name = 4;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stock_name(), target);
  }
  
  // optional uint32 update_time_sec = 5;
  if (has_update_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->update_time_sec(), target);
  }
  
  // optional uint64 detail_vol = 6;
  if (has_detail_vol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->detail_vol(), target);
  }
  
  // optional float rate = 7;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->rate(), target);
  }
  
  // optional int32 last_price = 8;
  if (has_last_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->last_price(), target);
  }
  
  // optional int32 buy_volume = 9;
  if (has_buy_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->buy_volume(), target);
  }
  
  // optional int32 buy_volume1 = 10;
  if (has_buy_volume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->buy_volume1(), target);
  }
  
  // optional int32 sell_volume = 11;
  if (has_sell_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sell_volume(), target);
  }
  
  // optional int32 sell_volume1 = 12;
  if (has_sell_volume1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sell_volume1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShortMotionMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional .QuoteProto.ShortMotionType short_type = 2;
    if (has_short_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->short_type());
    }
    
    // optional string stock_code = 3;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // optional string stock_name = 4;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // optional uint32 update_time_sec = 5;
    if (has_update_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time_sec());
    }
    
    // optional uint64 detail_vol = 6;
    if (has_detail_vol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->detail_vol());
    }
    
    // optional float rate = 7;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // optional int32 last_price = 8;
    if (has_last_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_price());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 buy_volume = 9;
    if (has_buy_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_volume());
    }
    
    // optional int32 buy_volume1 = 10;
    if (has_buy_volume1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_volume1());
    }
    
    // optional int32 sell_volume = 11;
    if (has_sell_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_volume());
    }
    
    // optional int32 sell_volume1 = 12;
    if (has_sell_volume1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_volume1());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortMotionMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShortMotionMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShortMotionMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShortMotionMsg::MergeFrom(const ShortMotionMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_short_type()) {
      set_short_type(from.short_type());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_update_time_sec()) {
      set_update_time_sec(from.update_time_sec());
    }
    if (from.has_detail_vol()) {
      set_detail_vol(from.detail_vol());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_last_price()) {
      set_last_price(from.last_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buy_volume()) {
      set_buy_volume(from.buy_volume());
    }
    if (from.has_buy_volume1()) {
      set_buy_volume1(from.buy_volume1());
    }
    if (from.has_sell_volume()) {
      set_sell_volume(from.sell_volume());
    }
    if (from.has_sell_volume1()) {
      set_sell_volume1(from.sell_volume1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShortMotionMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortMotionMsg::CopyFrom(const ShortMotionMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortMotionMsg::IsInitialized() const {
  
  return true;
}

void ShortMotionMsg::Swap(ShortMotionMsg* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(short_type_, other->short_type_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(update_time_sec_, other->update_time_sec_);
    std::swap(detail_vol_, other->detail_vol_);
    std::swap(rate_, other->rate_);
    std::swap(last_price_, other->last_price_);
    std::swap(buy_volume_, other->buy_volume_);
    std::swap(buy_volume1_, other->buy_volume1_);
    std::swap(sell_volume_, other->sell_volume_);
    std::swap(sell_volume1_, other->sell_volume1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShortMotionMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShortMotionMsg_descriptor_;
  metadata.reflection = ShortMotionMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FenJia::kTradingDayFieldNumber;
const int FenJia::kPriceFieldNumber;
const int FenJia::kBuyVolumeFieldNumber;
const int FenJia::kSellVolumeFieldNumber;
#endif  // !_MSC_VER

FenJia::FenJia()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FenJia::InitAsDefaultInstance() {
}

FenJia::FenJia(const FenJia& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FenJia::SharedCtor() {
  _cached_size_ = 0;
  trading_day_ = 0u;
  price_ = 0u;
  buy_volume_ = GOOGLE_ULONGLONG(0);
  sell_volume_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FenJia::~FenJia() {
  SharedDtor();
}

void FenJia::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FenJia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FenJia::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FenJia_descriptor_;
}

const FenJia& FenJia::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

FenJia* FenJia::default_instance_ = NULL;

FenJia* FenJia::New() const {
  return new FenJia;
}

void FenJia::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trading_day_ = 0u;
    price_ = 0u;
    buy_volume_ = GOOGLE_ULONGLONG(0);
    sell_volume_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FenJia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trading_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trading_day_)));
          set_has_trading_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }
      
      // optional uint32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_volume;
        break;
      }
      
      // optional uint64 buy_volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buy_volume_)));
          set_has_buy_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sell_volume;
        break;
      }
      
      // optional uint64 sell_volume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sell_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sell_volume_)));
          set_has_sell_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FenJia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 trading_day = 1;
  if (has_trading_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trading_day(), output);
  }
  
  // optional uint32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->price(), output);
  }
  
  // optional uint64 buy_volume = 4;
  if (has_buy_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buy_volume(), output);
  }
  
  // optional uint64 sell_volume = 5;
  if (has_sell_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->sell_volume(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FenJia::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 trading_day = 1;
  if (has_trading_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trading_day(), target);
  }
  
  // optional uint32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->price(), target);
  }
  
  // optional uint64 buy_volume = 4;
  if (has_buy_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->buy_volume(), target);
  }
  
  // optional uint64 sell_volume = 5;
  if (has_sell_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->sell_volume(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FenJia::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 trading_day = 1;
    if (has_trading_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trading_day());
    }
    
    // optional uint32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }
    
    // optional uint64 buy_volume = 4;
    if (has_buy_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buy_volume());
    }
    
    // optional uint64 sell_volume = 5;
    if (has_sell_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sell_volume());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FenJia::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FenJia* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FenJia*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FenJia::MergeFrom(const FenJia& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trading_day()) {
      set_trading_day(from.trading_day());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_buy_volume()) {
      set_buy_volume(from.buy_volume());
    }
    if (from.has_sell_volume()) {
      set_sell_volume(from.sell_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FenJia::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FenJia::CopyFrom(const FenJia& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FenJia::IsInitialized() const {
  
  return true;
}

void FenJia::Swap(FenJia* other) {
  if (other != this) {
    std::swap(trading_day_, other->trading_day_);
    std::swap(price_, other->price_);
    std::swap(buy_volume_, other->buy_volume_);
    std::swap(sell_volume_, other->sell_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FenJia::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FenJia_descriptor_;
  metadata.reflection = FenJia_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MidAbnormalMsg::kAbnormalTypeFieldNumber;
const int MidAbnormalMsg::kStockCodeFieldNumber;
const int MidAbnormalMsg::kStockNameFieldNumber;
const int MidAbnormalMsg::kUpdateTimeFieldNumber;
const int MidAbnormalMsg::kRateFieldNumber;
const int MidAbnormalMsg::kLastPriceFieldNumber;
const int MidAbnormalMsg::kTurnoverFieldNumber;
const int MidAbnormalMsg::kVolumeFieldNumber;
const int MidAbnormalMsg::kRealTimeRateFieldNumber;
#endif  // !_MSC_VER

MidAbnormalMsg::MidAbnormalMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MidAbnormalMsg::InitAsDefaultInstance() {
}

MidAbnormalMsg::MidAbnormalMsg(const MidAbnormalMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MidAbnormalMsg::SharedCtor() {
  _cached_size_ = 0;
  abnormal_type_ = 0;
  stock_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stock_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_time_ = 0u;
  rate_ = 0;
  last_price_ = 0u;
  turnover_ = GOOGLE_ULONGLONG(0);
  volume_ = GOOGLE_ULONGLONG(0);
  real_time_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidAbnormalMsg::~MidAbnormalMsg() {
  SharedDtor();
}

void MidAbnormalMsg::SharedDtor() {
  if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_code_;
  }
  if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stock_name_;
  }
  if (this != default_instance_) {
  }
}

void MidAbnormalMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidAbnormalMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidAbnormalMsg_descriptor_;
}

const MidAbnormalMsg& MidAbnormalMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_public_5fmessage_2eproto();  return *default_instance_;
}

MidAbnormalMsg* MidAbnormalMsg::default_instance_ = NULL;

MidAbnormalMsg* MidAbnormalMsg::New() const {
  return new MidAbnormalMsg;
}

void MidAbnormalMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    abnormal_type_ = 0;
    if (has_stock_code()) {
      if (stock_code_ != &::google::protobuf::internal::kEmptyString) {
        stock_code_->clear();
      }
    }
    if (has_stock_name()) {
      if (stock_name_ != &::google::protobuf::internal::kEmptyString) {
        stock_name_->clear();
      }
    }
    update_time_ = 0u;
    rate_ = 0;
    last_price_ = 0u;
    turnover_ = GOOGLE_ULONGLONG(0);
    volume_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    real_time_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MidAbnormalMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QuoteProto.MidAbnormalType abnormal_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (QuoteProto::MidAbnormalType_IsValid(value)) {
            set_abnormal_type(static_cast< QuoteProto::MidAbnormalType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stock_code;
        break;
      }
      
      // required string stock_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_code().data(), this->stock_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stock_name;
        break;
      }
      
      // required string stock_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stock_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stock_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stock_name().data(), this->stock_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }
      
      // required uint32 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rate;
        break;
      }
      
      // required float rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_price;
        break;
      }
      
      // required uint32 last_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_price_)));
          set_has_last_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_turnover;
        break;
      }
      
      // required uint64 turnover = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turnover:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &turnover_)));
          set_has_turnover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }
      
      // required uint64 volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_real_time_rate;
        break;
      }
      
      // required float real_time_rate = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_real_time_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &real_time_rate_)));
          set_has_real_time_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MidAbnormalMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QuoteProto.MidAbnormalType abnormal_type = 1;
  if (has_abnormal_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->abnormal_type(), output);
  }
  
  // required string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stock_code(), output);
  }
  
  // required string stock_name = 3;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stock_name(), output);
  }
  
  // required uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }
  
  // required float rate = 5;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rate(), output);
  }
  
  // required uint32 last_price = 6;
  if (has_last_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_price(), output);
  }
  
  // required uint64 turnover = 7;
  if (has_turnover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->turnover(), output);
  }
  
  // required uint64 volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->volume(), output);
  }
  
  // required float real_time_rate = 9;
  if (has_real_time_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->real_time_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MidAbnormalMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QuoteProto.MidAbnormalType abnormal_type = 1;
  if (has_abnormal_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->abnormal_type(), target);
  }
  
  // required string stock_code = 2;
  if (has_stock_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_code().data(), this->stock_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stock_code(), target);
  }
  
  // required string stock_name = 3;
  if (has_stock_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stock_name().data(), this->stock_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stock_name(), target);
  }
  
  // required uint32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_time(), target);
  }
  
  // required float rate = 5;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rate(), target);
  }
  
  // required uint32 last_price = 6;
  if (has_last_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_price(), target);
  }
  
  // required uint64 turnover = 7;
  if (has_turnover()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->turnover(), target);
  }
  
  // required uint64 volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->volume(), target);
  }
  
  // required float real_time_rate = 9;
  if (has_real_time_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->real_time_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MidAbnormalMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QuoteProto.MidAbnormalType abnormal_type = 1;
    if (has_abnormal_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abnormal_type());
    }
    
    // required string stock_code = 2;
    if (has_stock_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_code());
    }
    
    // required string stock_name = 3;
    if (has_stock_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stock_name());
    }
    
    // required uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }
    
    // required float rate = 5;
    if (has_rate()) {
      total_size += 1 + 4;
    }
    
    // required uint32 last_price = 6;
    if (has_last_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_price());
    }
    
    // required uint64 turnover = 7;
    if (has_turnover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->turnover());
    }
    
    // required uint64 volume = 8;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->volume());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float real_time_rate = 9;
    if (has_real_time_rate()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidAbnormalMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MidAbnormalMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MidAbnormalMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MidAbnormalMsg::MergeFrom(const MidAbnormalMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_abnormal_type()) {
      set_abnormal_type(from.abnormal_type());
    }
    if (from.has_stock_code()) {
      set_stock_code(from.stock_code());
    }
    if (from.has_stock_name()) {
      set_stock_name(from.stock_name());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_last_price()) {
      set_last_price(from.last_price());
    }
    if (from.has_turnover()) {
      set_turnover(from.turnover());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_real_time_rate()) {
      set_real_time_rate(from.real_time_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MidAbnormalMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidAbnormalMsg::CopyFrom(const MidAbnormalMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidAbnormalMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void MidAbnormalMsg::Swap(MidAbnormalMsg* other) {
  if (other != this) {
    std::swap(abnormal_type_, other->abnormal_type_);
    std::swap(stock_code_, other->stock_code_);
    std::swap(stock_name_, other->stock_name_);
    std::swap(update_time_, other->update_time_);
    std::swap(rate_, other->rate_);
    std::swap(last_price_, other->last_price_);
    std::swap(turnover_, other->turnover_);
    std::swap(volume_, other->volume_);
    std::swap(real_time_rate_, other->real_time_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MidAbnormalMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidAbnormalMsg_descriptor_;
  metadata.reflection = MidAbnormalMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace QuoteProto

// @@protoc_insertion_point(global_scope)
